// –õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç webhook server –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ Channex –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
import express from 'express';
import { createClient } from '@supabase/supabase-js';

const app = express();
app.use(express.json());

const supabaseUrl = 'https://zbhvwxpvlxqxadqzshfc.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpiaHZ3eHB2bHhxeGFkcXpzaGZjIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MTkyNTM3NCwiZXhwIjoyMDY3NTAxMzc0fQ.0kO3vG1OXNS05NPgm7MmcbkdMuLSG49GKwkCP4979tc';
const supabase = createClient(supabaseUrl, supabaseServiceKey);

// Webhook endpoint —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ Channex –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
app.post('/webhook', async (req, res) => {
  console.log('üîî –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Channex:');
  console.log('Headers:', req.headers);
  console.log('Body:', JSON.stringify(req.body, null, 2));
  
  const { event, payload, property_id, user_id, timestamp } = req.body;
  
  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º webhook –≤ –ë–î
    const { error: logError } = await supabase
      .from('channex_webhooks')
      .insert({
        event_type: event,
        event_id: `local-test-${Date.now()}`,
        object_type: event.includes('booking') ? 'booking' : 'other',
        object_id: payload?.booking_id || payload?.revision_id || 'unknown',
        payload: req.body,
        received_at: timestamp || new Date().toISOString(),
        processed: false
      });

    if (logError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è webhook:', logError);
    } else {
      console.log('‚úÖ Webhook —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î');
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º booking events
    if (event === 'booking' && payload?.booking_id) {
      console.log('üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º booking event:', payload.booking_id);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ Channex API
      const bookingData = await fetchBookingFromChannex(payload.booking_id);
      if (bookingData) {
        await processBooking(bookingData);
      }
    }

    res.json({
      success: true,
      message: 'Webhook processed successfully',
      event,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ Channex
async function fetchBookingFromChannex(bookingId) {
  const apiKey = 'uUdBtyJdPAYoP0m0qrEStPh2WJcXCBBBLMngnPxygFWpw0GyDE/nmvN/6wN7gXV+';
  const apiUrl = 'https://staging.channex.io/api/v1';
  
  try {
    console.log(`üåê –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ${bookingId} –∏–∑ Channex`);
    
    const response = await fetch(`${apiUrl}/bookings/${bookingId}`, {
      headers: {
        'user-api-key': apiKey,
        'Content-Type': 'application/json'
      }
    });

    if (response.ok) {
      const result = await response.json();
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã:', result.data?.id);
      return result.data;
    } else {
      console.error(`‚ùå –û—à–∏–±–∫–∞ API Channex: ${response.status}`);
      return null;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Channex API:', error);
    return null;
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
async function processBooking(channexBooking) {
  console.log('üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', channexBooking.id);
  console.log('OTA:', channexBooking.attributes?.ota_name);
  
  // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ PMS —Ñ–æ—Ä–º–∞—Ç
  if (channexBooking.attributes?.ota_name === 'Airbnb') {
    console.log('üè† Airbnb –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ AirbnbChannexService');
    // –ó–¥–µ—Å—å –º—ã –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ AirbnbChannexService.convertToPMSFormat()
  }
  
  console.log('‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ');
}

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({ status: 'OK', timestamp: new Date().toISOString() });
});

const PORT = 3001;
app.listen(PORT, () => {
  console.log(`üöÄ –õ–æ–∫–∞–ª—å–Ω—ã–π webhook server –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}/webhook`);
  console.log('üìã –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç URL –≤ Channex webhook –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');
});