#!/usr/bin/env node

// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è SQL —Å—Ö–µ–º—ã –∫ Supabase –ë–î
import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import path from 'path';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase
const supabaseUrl = 'https://zbhvwxpvlxqxadqzshfc.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpiaHZ3eHB2bHhxeGFkcXpzaGZjIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTczNTMwOTQyMCwiZXhwIjoyMDUwODg1NDIwfQ.R_vS_6SfOp46jSL3nL8ZgxAqPWjLYrmA8uPu1E-c8CM';

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function applyDatabaseSchema() {
  try {
    console.log('üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª
    const sqlContent = fs.readFileSync('database_schema_fix.sql', 'utf8');
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    const commands = sqlContent
      .split(';')
      .map(cmd => cmd.trim())
      .filter(cmd => cmd && !cmd.startsWith('--') && !cmd.startsWith('/*'));
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${commands.length} SQL –∫–æ–º–∞–Ω–¥`);
    
    let successCount = 0;
    let errorCount = 0;
    
    for (const [index, command] of commands.entries()) {
      if (!command) continue;
      
      try {
        console.log(`‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ ${index + 1}/${commands.length}...`);
        console.log(`üîß ${command.substring(0, 60)}...`);
        
        const { error } = await supabase.rpc('exec_sql', { sql: command });
        
        if (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ${index + 1}:`, error.message);
          errorCount++;
        } else {
          console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ ${index + 1} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
          successCount++;
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 100));
        
      } catch (error) {
        console.error(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ${index + 1}:`, error.message);
        errorCount++;
      }
    }
    
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ö–µ–º—ã:');
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    console.log(`üìã –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: ${commands.length}`);
    
    if (errorCount === 0) {
      console.log('üéâ –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!');
    } else {
      console.log('‚ö†Ô∏è  –°—Ö–µ–º–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.');
    }
    
    return { success: successCount, errors: errorCount, total: commands.length };
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ö–µ–º—ã:', error);
    throw error;
  }
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –ø—Ä—è–º–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL
async function applySchemaDirectly() {
  try {
    console.log('üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ö–µ–º—ã –Ω–∞–ø—Ä—è–º—É—é...');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≥–æ—Å—Ç–µ–π
    const guestColumns = `
      ALTER TABLE bookings 
      ADD COLUMN IF NOT EXISTS adults INTEGER DEFAULT 2,
      ADD COLUMN IF NOT EXISTS children INTEGER DEFAULT 0,
      ADD COLUMN IF NOT EXISTS infants INTEGER DEFAULT 0;
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
    const channelColumns = `
      ALTER TABLE bookings 
      ADD COLUMN IF NOT EXISTS channel VARCHAR(50),
      ADD COLUMN IF NOT EXISTS source VARCHAR(50),
      ADD COLUMN IF NOT EXISTS ota_reservation_code VARCHAR(255);
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤
    const roomColumns = `
      ALTER TABLE bookings 
      ADD COLUMN IF NOT EXISTS room_type VARCHAR(100),
      ADD COLUMN IF NOT EXISTS room_number VARCHAR(20),
      ADD COLUMN IF NOT EXISTS room_title VARCHAR(255);
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    const financeColumns = `
      ALTER TABLE bookings 
      ADD COLUMN IF NOT EXISTS total_amount DECIMAL(10,2),
      ADD COLUMN IF NOT EXISTS currency VARCHAR(3) DEFAULT 'USD';
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    const contactColumns = `
      ALTER TABLE bookings 
      ADD COLUMN IF NOT EXISTS guest_first_name VARCHAR(100),
      ADD COLUMN IF NOT EXISTS guest_last_name VARCHAR(100),
      ADD COLUMN IF NOT EXISTS guest_email VARCHAR(255),
      ADD COLUMN IF NOT EXISTS guest_phone VARCHAR(50);
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    const metaColumns = `
      ALTER TABLE bookings 
      ADD COLUMN IF NOT EXISTS notes TEXT,
      ADD COLUMN IF NOT EXISTS airbnb_meta JSONB,
      ADD COLUMN IF NOT EXISTS agoda_meta JSONB;
    `;
    
    const commands = [
      guestColumns,
      channelColumns,
      roomColumns,
      financeColumns,
      contactColumns,
      metaColumns
    ];
    
    for (const [index, sql] of commands.entries()) {
      try {
        console.log(`‚è≥ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã ${index + 1}/${commands.length}...`);
        
        const { error } = await supabase.rpc('query', { 
          query_text: sql 
        });
        
        if (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞:`, error.message);
          
          // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
          try {
            const { error: altError } = await supabase
              .from('_sql_commands')
              .insert({ command: sql });
              
            if (!altError) {
              console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ ${index + 1} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º`);
            }
          } catch (e) {
            console.error(`üí• –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª`);
          }
        } else {
          console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ ${index + 1} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
        }
        
      } catch (error) {
        console.error(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:`, error.message);
      }
    }
    
    console.log('üéâ –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ö–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞:', error);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
async function checkTableStructure() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã bookings...');
    
    const { data, error } = await supabase
      .from('bookings')
      .select('*')
      .limit(1);
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error.message);
      return;
    }
    
    if (data && data.length > 0) {
      console.log('üìã –¢–µ–∫—É—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏:', Object.keys(data[0]));
      
      const requiredColumns = [
        'adults', 'children', 'channel', 'source', 'ota_reservation_code',
        'room_type', 'room_number', 'room_title', 'total_amount', 'currency',
        'guest_first_name', 'guest_last_name', 'guest_email', 'guest_phone',
        'notes', 'airbnb_meta', 'agoda_meta'
      ];
      
      const existingColumns = Object.keys(data[0]);
      const missingColumns = requiredColumns.filter(col => !existingColumns.includes(col));
      
      if (missingColumns.length > 0) {
        console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏:', missingColumns);
        return false;
      } else {
        console.log('‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
        return true;
      }
    } else {
      console.log('‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞, –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É');
      return null;
    }
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:', error);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
  const structureOk = await checkTableStructure();
  
  if (structureOk === true) {
    console.log('‚úÖ –°—Ö–µ–º–∞ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!');
    return;
  }
  
  if (structureOk === false) {
    console.log('üîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å—Ö–µ–º—É...');
    await applySchemaDirectly();
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∏–º –µ—â–µ —Ä–∞–∑
  await checkTableStructure();
}

// –ó–∞–ø—É—Å–∫
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}

export { applyDatabaseSchema, checkTableStructure };