// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∏–∑ Channex –≤ PMS
const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));

// –≠–º—É–ª—è—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
const mockSupabase = {
  from: (table) => ({
    select: (fields) => ({
      then: (resolve) => resolve({ data: [], error: null }) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    }),
    insert: (data) => ({
      then: (resolve) => {
        console.log('üìù –í—Å—Ç–∞–≤–ª—è–µ–º –≤ Supabase:', data[0].id);
        resolve({ error: null });
      }
    })
  })
};

// –°–æ–∑–¥–∞–µ–º –º–æ–∫ ChannexService –¥–ª—è —Ç–µ—Å—Ç–∞
const testChannexService = {
  propertyId: '6ae9708a-cbaa-4134-bf04-29314e842709',
  apiKey: 'uUdBtyJdPAYoP0m0qrEStPh2WJcXCBBBLMngnPxygFWpw0GyDE/nmvN/6wN7gXV+',
  baseURL: 'https://staging.channex.io/api/v1',

  async apiRequest(endpoint, method = 'GET') {
    const url = `${this.baseURL}${endpoint}`;
    const response = await fetch(url, {
      method,
      headers: {
        'user-api-key': this.apiKey,
        'Content-Type': 'application/json',
      }
    });

    if (!response.ok) {
      throw new Error(`API Error: ${response.status}`);
    }

    return await response.json();
  },

  async getBookingsFromChannex() {
    console.log('üì• –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ Channex...');
    
    const response = await this.apiRequest(
      `/bookings?filter[property_id]=${this.propertyId}`
    );
    
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${response.data?.length || 0} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∏–∑ Channex`);
    return response.data || [];
  },

  convertChannexToPMSBooking(channexBooking) {
    const attrs = channexBooking.attributes;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã
    let roomNumber = '101';
    if (attrs.meta?.pms_room_number) {
      roomNumber = attrs.meta.pms_room_number;
    } else {
      const firstRoom = attrs.rooms?.[0] || {};
      const roomTypeName = firstRoom.room_type?.title || '';
      if (roomTypeName.includes('Deluxe')) {
        roomNumber = '201';
      } else if (roomTypeName.includes('Suite')) {
        roomNumber = '301';
      }
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
    let totalAmount = 0;
    const firstRoom = attrs.rooms?.[0] || {};
    if (firstRoom.days) {
      totalAmount = Object.values(firstRoom.days).reduce((sum, price) => sum + parseFloat(price || 0), 0);
    }

    return {
      id: `channex-${channexBooking.id}`,
      external_booking_id: channexBooking.id,
      room_id: `room-${roomNumber}`,
      
      check_in: attrs.arrival_date,
      check_out: attrs.departure_date,
      
      guests: {
        full_name: `${attrs.customer?.name || ''} ${attrs.customer?.surname || ''}`.trim(),
        email: attrs.customer?.mail || attrs.customer?.email,
        phone: attrs.customer?.phone || '',
        country: attrs.customer?.country || 'GB'
      },
      
      guests_count: firstRoom.occupancy?.adults || 1,
      total_amount: totalAmount,
      currency: attrs.currency || 'GBP',
      
      status: attrs.status === 'new' ? 'pending' : attrs.status,
      source: attrs.ota_name === 'Booking.com' ? 'booking' : 'direct',
      notes: attrs.notes || `–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ Channex (${attrs.ota_name})`,
      
      sync_status: 'synced',
      last_sync_at: new Date().toISOString(),
      created_at: new Date().toISOString()
    };
  },

  async importBookingsToPMS() {
    console.log('üìã –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ Channex –≤ PMS...');
    
    try {
      // 1. –ü–æ–ª—É—á–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ Channex
      const channexBookings = await this.getBookingsFromChannex();
      
      if (!channexBookings || channexBookings.length === 0) {
        console.log('‚ÑπÔ∏è –ù–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞');
        return { imported: 0, skipped: 0, errors: 0 };
      }

      // 2. –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ PMS (–º–æ–∫)
      const existingBookings = await mockSupabase.from('bookings').select('external_booking_id');
      const existingIds = new Set([]);
      
      let imported = 0, skipped = 0, errors = 0;

      console.log(`\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${channexBookings.length} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π...`);

      // 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      for (const channexBooking of channexBookings) {
        try {
          const bookingId = channexBooking.id;
          
          if (existingIds.has(bookingId)) {
            console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: ${bookingId}`);
            skipped++;
            continue;
          }

          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ Channex –≤ —Ñ–æ—Ä–º–∞—Ç PMS
          const pmsBooking = this.convertChannexToPMSBooking(channexBooking);
          
          console.log(`\nüìã –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: ${bookingId}`);
          console.log(`   üë§ –ì–æ—Å—Ç—å: ${pmsBooking.guests.full_name}`);
          console.log(`   üè† –ö–æ–º–Ω–∞—Ç–∞: ${pmsBooking.room_id}`);
          console.log(`   üìÖ –î–∞—Ç—ã: ${pmsBooking.check_in} ‚Üí ${pmsBooking.check_out}`);
          console.log(`   üí∞ –°—É–º–º–∞: ${pmsBooking.total_amount} ${pmsBooking.currency}`);
          console.log(`   üè∑Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫: ${pmsBooking.source}`);
          console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${pmsBooking.status}`);
          
          // –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö PMS (–º–æ–∫)
          await mockSupabase.from('bookings').insert([pmsBooking]);
          
          console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${bookingId}`);
          imported++;
          
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ${channexBooking.id}:`, error.message);
          errors++;
        }
      }

      console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–ø–æ—Ä—Ç–∞:`);
      console.log(`   ‚úÖ ${imported} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ`);
      console.log(`   ‚è≠Ô∏è ${skipped} –ø—Ä–æ–ø—É—â–µ–Ω–æ`);
      console.log(`   ‚ùå ${errors} –æ—à–∏–±–æ–∫`);
      
      return { imported, skipped, errors };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', error);
      throw error;
    }
  }
};

async function testImportBookings() {
  console.log('üß™ –¢–ï–°–¢ –ò–ú–ü–û–†–¢–ê –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ô –ò–ó CHANNEX –í PMS');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  
  try {
    const result = await testChannexService.importBookingsToPMS();
    
    console.log('\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log('–¢–µ–ø–µ—Ä—å –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ Channex –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –≤ PMS');
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
  }
  
  console.log('\nüèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
}

testImportBookings();