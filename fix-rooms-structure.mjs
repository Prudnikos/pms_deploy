import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://zbhvwxpvlxqxadqzshfc.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpiaHZ3eHB2bHhxeGFkcXpzaGZjIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MTkyNTM3NCwiZXhwIjoyMDY3NTAxMzc0fQ.0kO3vG1OXNS05NPgm7MmcbkdMuLSG49GKwkCP4979tc';

const supabase = createClient(supabaseUrl, supabaseKey);

async function fixRoomsStructure() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–æ–º–µ—Ä–æ–≤...\n');
  
  try {
    // 1. –î–æ–±–∞–≤–ª—è–µ–º Standard Room –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Standard Room...');
    
    const { data: standardRoom, error: checkError } = await supabase
      .from('rooms')
      .select('*')
      .eq('room_type', 'Standard')
      .single();
    
    if (!standardRoom) {
      console.log('   ‚ûï –î–æ–±–∞–≤–ª—è–µ–º Standard Room...');
      const { data: newRoom, error: insertError } = await supabase
        .from('rooms')
        .insert({
          room_number: 'Standard Room',
          room_type: 'Standard',
          floor: 1,
          base_price: 100,
          max_occupancy: 2
        })
        .select()
        .single();
      
      if (insertError) {
        console.error('   ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', insertError);
      } else {
        console.log('   ‚úÖ Standard Room –¥–æ–±–∞–≤–ª–µ–Ω —Å ID:', newRoom.id);
      }
    } else {
      console.log('   ‚úÖ Standard Room —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å ID:', standardRoom.id);
    }
    
    // 2. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º Deluxe apartment –≤ Deluxe Room
    console.log('\n2Ô∏è‚É£ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º Deluxe apartment –≤ Deluxe Room...');
    
    const { data: deluxeUpdate, error: deluxeError } = await supabase
      .from('rooms')
      .update({ room_number: 'Deluxe Room' })
      .eq('room_number', 'Deluxe apartment')
      .select();
    
    if (deluxeError) {
      console.error('   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', deluxeError);
    } else if (deluxeUpdate?.length > 0) {
      console.log('   ‚úÖ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –≤ Deluxe Room');
    } else {
      console.log('   ‚ÑπÔ∏è Deluxe apartment –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω');
    }
    
    // 3. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º Deluxe suite apartment –≤ Suite
    console.log('\n3Ô∏è‚É£ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º Deluxe suite apartment –≤ Suite...');
    
    const { data: suiteUpdate, error: suiteError } = await supabase
      .from('rooms')
      .update({ room_number: 'Suite' })
      .eq('room_number', 'Deluxe suite apartment')
      .select();
    
    if (suiteError) {
      console.error('   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', suiteError);
    } else if (suiteUpdate?.length > 0) {
      console.log('   ‚úÖ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –≤ Suite');
    } else {
      console.log('   ‚ÑπÔ∏è Deluxe suite apartment –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω');
    }
    
    // 4. –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    console.log('\nüìã –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–æ–º–µ—Ä–æ–≤:');
    console.log('================================');
    
    const { data: allRooms, error: finalError } = await supabase
      .from('rooms')
      .select('*')
      .in('room_type', ['Standard', 'Deluxe', 'Suite'])
      .order('room_type');
    
    if (!finalError && allRooms) {
      allRooms.forEach(room => {
        console.log(`\n${room.room_type}:`);
        console.log(`  ID: ${room.id}`);
        console.log(`  –ù–∞–∑–≤–∞–Ω–∏–µ: ${room.room_number}`);
        console.log(`  –¶–µ–Ω–∞: ${room.base_price || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
        console.log(`  –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: ${room.max_occupancy || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
      });
    }
    
    console.log('\n‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–æ–º–µ—Ä–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

fixRoomsStructure();