const fetch = require('node-fetch');

const API_KEY = process.env.VITE_CHANNEX_API_KEY || 'nWxt87XOKhF7HslqSxJW8y0t';
const BASE_URL = 'https://staging.channex.io/api/v1';
const PROPERTY_ID = '6ae9708a-cbaa-4134-bf04-29314e842709';

async function checkAllAvailability() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º availability –¥–ª—è –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤...\n');
  
  const ratePlans = {
    'Standard': '8212ad16-0057-496b-8b0b-54d741841852',
    'Deluxe': '0661e606-18e5-4ad3-bda0-ade13d29b76b',
    'Suite': '45195f3e-fb59-4ddf-9e29-b667dbe2ab58'
  };
  
  const dates = ['2025-09-01', '2025-09-02', '2025-09-03'];
  
  console.log('üìÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—ã:', dates.join(', '));
  console.log('');
  
  for (const [roomType, ratePlanId] of Object.entries(ratePlans)) {
    console.log(`\nüè† ${roomType} Room:`);
    console.log('  Rate Plan ID:', ratePlanId);
    
    const url = `${BASE_URL}/availability?filter[property_id]=${PROPERTY_ID}&filter[rate_plan_id]=${ratePlanId}&filter[date]=${dates.join(',')}`;
    
    try {
      const response = await fetch(url, {
        headers: {
          'user-api-key': API_KEY,
          'Content-Type': 'application/json'
        }
      });
      
      const data = await response.json();
      
      if (data.data && data.data.length > 0) {
        console.log('  ‚úÖ Availability –Ω–∞–π–¥–µ–Ω:');
        data.data.forEach(item => {
          console.log(`    üìÖ ${item.attributes.date}: ${item.attributes.availability} –¥–æ—Å—Ç—É–ø–Ω–æ`);
        });
      } else {
        console.log('  ‚ùå –ù–ï–¢ –¥–∞–Ω–Ω—ã—Ö availability!');
        console.log('  ‚ö†Ô∏è –≠—Ç–æ –ø—Ä–∏—á–∏–Ω–∞ –ø–æ—á–µ–º—É –Ω–æ–º–µ—Ä –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –ø–æ–∏—Å–∫–µ');
      }
      
    } catch (error) {
      console.error(`  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
    }
  }
  
  console.log('\n\nüìä –ò–¢–û–ì:');
  console.log('–ï—Å–ª–∏ —É Suite –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö availability, –Ω—É–∂–Ω–æ:');
  console.log('1. –î–æ–±–∞–≤–∏—Ç—å availability –≤ Channex –¥–ª—è rate plan 45195f3e-fb59-4ddf-9e29-b667dbe2ab58');
  console.log('2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback –Ω–∞ config availability_count');
}

checkAllAvailability();