const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á –∏–∑ .env
const API_KEY = 'uUdBtyJdPAYoP0m0qrEStPh2WJcXCBBBLMngnPxygFWpw0GyDE/nmvN/6wN7gXV+';
const BASE_URL = 'https://staging.channex.io/api/v1';
const PROPERTY_ID = '6ae9708a-cbaa-4134-bf04-29314e842709';

const roomsConfig = {
  'Standard Room': {
    room_type_id: '8df610ce-cabb-429d-98d0-90c33f451d97',
    rate_plan_id: '8212ad16-0057-496b-8b0b-54d741841852'
  },
  'Deluxe Room': {
    room_type_id: '734d5d86-1fe6-44d8-b6c5-4ac9349c4410',
    rate_plan_id: '0661e606-18e5-4ad3-bda0-ade13d29b76b'
  },
  'Deluxe suite apartment': {
    room_type_id: 'e243d5aa-eff3-43a7-8bf8-87352b62fdc3',
    rate_plan_id: '45195f3e-fb59-4ddf-9e29-b667dbe2ab58'
  },
  'Villa First Floor': {
    room_type_id: 'c14d8272-5406-40d0-b7d9-726513a13b5c',
    rate_plan_id: 'aa96a05e-f1a5-4e78-a9cb-0638ee1140f2'
  }
};

async function testAllRoomsDisplay() {
  console.log('üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –í–°–ï–• –ù–û–ú–ï–†–û–í\n');
  console.log('='.repeat(50));
  
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º Room Types
    console.log('\nüìã –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º Room Types –∏–∑ API...');
    const roomTypesUrl = `${BASE_URL}/room_types?property_id=${PROPERTY_ID}`;
    const rtResponse = await fetch(roomTypesUrl, {
      headers: {
        'user-api-key': API_KEY,
        'Content-Type': 'application/json'
      }
    });
    
    const rtData = await rtResponse.json();
    console.log(`–ù–∞–π–¥–µ–Ω–æ room types: ${rtData.data?.length || 0}`);
    
    // 2. –ü–æ–ª—É—á–∞–µ–º Rate Plans
    console.log('\nüìã –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º Rate Plans –∏–∑ API...');
    const rpUrl = `${BASE_URL}/rate_plans?property_id=${PROPERTY_ID}`;
    const rpResponse = await fetch(rpUrl, {
      headers: {
        'user-api-key': API_KEY,
        'Content-Type': 'application/json'
      }
    });
    
    const rpData = await rpResponse.json();
    console.log(`–ù–∞–π–¥–µ–Ω–æ rate plans: ${rpData.data?.length || 0}`);
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –Ω–æ–º–µ—Ä
    console.log('\nüìä –ü–†–û–í–ï–†–ö–ê –ö–ê–ñ–î–û–ì–û –ù–û–ú–ï–†–ê:');
    console.log('============================\n');
    
    for (const [roomName, config] of Object.entries(roomsConfig)) {
      console.log(`üè† ${roomName}:`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º Room Type
      const roomType = rtData.data?.find(rt => rt.id === config.room_type_id);
      if (roomType) {
        console.log(`  ‚úÖ Room Type –Ω–∞–π–¥–µ–Ω: ${roomType.attributes.title}`);
      } else {
        console.log(`  ‚ùå Room Type –ù–ï –ù–ê–ô–î–ï–ù (ID: ${config.room_type_id})`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º Rate Plan
      const ratePlan = rpData.data?.find(rp => rp.id === config.rate_plan_id);
      if (ratePlan) {
        console.log(`  ‚úÖ Rate Plan –Ω–∞–π–¥–µ–Ω: ${ratePlan.attributes.title}`);
      } else {
        console.log(`  ‚ùå Rate Plan –ù–ï –ù–ê–ô–î–ï–ù (ID: ${config.rate_plan_id})`);
        
        // –ò—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ Rate Plans –¥–ª—è —ç—Ç–æ–≥–æ Room Type
        const altRatePlans = rpData.data?.filter(rp => 
          rp.relationships?.room_type?.data?.id === config.room_type_id
        );
        
        if (altRatePlans && altRatePlans.length > 0) {
          console.log(`  ‚ÑπÔ∏è –ù–æ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ Rate Plans –¥–ª—è —ç—Ç–æ–≥–æ Room Type:`);
          altRatePlans.forEach(rp => {
            console.log(`     - ${rp.id}: ${rp.attributes.title}`);
          });
        }
      }
      
      // –°—Ç–∞—Ç—É—Å
      if (roomType && ratePlan) {
        console.log(`  ‚úÖ –ì–û–¢–û–í –ö –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Æ`);
      } else {
        console.log(`  ‚ö†Ô∏è –ù–ï –ë–£–î–ï–¢ –û–¢–û–ë–†–ê–ñ–ê–¢–¨–°–Ø`);
      }
      
      console.log('');
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º restrictions API
    console.log('üìã –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º API restrictions (availability)...');
    const restrictionsUrl = `${BASE_URL}/restrictions?filter[property_id]=${PROPERTY_ID}&filter[date][gte]=2025-09-01&filter[date][lte]=2025-09-03&filter[restrictions]=availability`;
    const restrictionsResponse = await fetch(restrictionsUrl, {
      headers: {
        'user-api-key': API_KEY,
        'Content-Type': 'application/json'
      }
    });
    
    console.log(`–°—Ç–∞—Ç—É—Å restrictions API: ${restrictionsResponse.status}`);
    
    if (restrictionsResponse.ok) {
      const restrictionsData = await restrictionsResponse.json();
      console.log('‚úÖ Restrictions API —Ä–∞–±–æ—Ç–∞–µ—Ç');
      
      if (restrictionsData.data && Object.keys(restrictionsData.data).length > 0) {
        console.log(`–î–∞–Ω–Ω—ã–µ availability –¥–ª—è ${Object.keys(restrictionsData.data).length} rate plans`);
      } else {
        console.log('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö availability - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è fallback');
      }
    } else {
      console.log('‚ùå Restrictions API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }
    
    console.log('\n' + '='.repeat(50));
    console.log('\nüí° –ò–¢–û–ì–ò:');
    console.log('=========');
    console.log('–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –Ω—É–∂–Ω–æ –ª–∏–±–æ:');
    console.log('1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å Rate Plan ID –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
    console.log('2. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ Rate Plans –≤ Channex');
    console.log('3. –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ Rate Plans');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

testAllRoomsDisplay();