import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://zbhvwxpvlxqxadqzshfc.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpiaHZ3eHB2bHhxeGFkcXpzaGZjIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MTkyNTM3NCwiZXhwIjoyMDY3NTAxMzc0fQ.0kO3vG1OXNS05NPgm7MmcbkdMuLSG49GKwkCP4979tc';

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkBookingPrices() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—ã –≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö Suite2...\n');
  
  try {
    // –ò—â–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Suite2
    const { data: bookings, error } = await supabase
      .from('bookings')
      .select('*')
      .ilike('guest_first_name', '%Suite%')
      .order('created_at', { ascending: false })
      .limit(3);
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error);
      return;
    }
    
    console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Suite:');
    console.log('================================');
    
    if (bookings && bookings.length > 0) {
      bookings.forEach((booking, index) => {
        console.log(`\n${index + 1}. ID: ${booking.id}`);
        console.log(`   –ì–æ—Å—Ç—å: ${booking.guest_first_name} ${booking.guest_last_name || ''}`);
        console.log(`   –î–∞—Ç—ã: ${booking.check_in} - ${booking.check_out}`);
        console.log(`   Room ID: ${booking.room_id}`);
        console.log('\n   üí∞ –§–ò–ù–ê–ù–°–û–í–´–ï –ü–û–õ–Ø:');
        console.log(`   total_amount: ${booking.total_amount}`);
        console.log(`   accommodation_total: ${booking.accommodation_total}`);
        console.log(`   services_total: ${booking.services_total}`);
        console.log(`   amount_paid: ${booking.amount_paid}`);
        console.log(`   balance_due: ${booking.balance_due || (booking.total_amount - (booking.amount_paid || 0))}`);
        
        // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π
        const nights = Math.ceil(
          (new Date(booking.check_out) - new Date(booking.check_in)) / (1000 * 60 * 60 * 24)
        );
        console.log(`\n   üìä –†–ê–°–ß–ï–¢:`);
        console.log(`   –ù–æ—á–µ–π: ${nights}`);
        console.log(`   –û–∂–∏–¥–∞–µ–º–∞—è —Ü–µ–Ω–∞ Suite: $300/–Ω–æ—á—å * ${nights} = $${300 * nights}`);
        
        if (booking.total_amount && booking.total_amount !== 300 * nights) {
          console.log(`   ‚ö†Ô∏è –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: total_amount = ${booking.total_amount}, –æ–∂–∏–¥–∞–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º ${300 * nights}`);
        }
      });
    } else {
      console.log('‚ö†Ô∏è –ù–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π Suite');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã bookings
    console.log('\n\nüìä –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶–´ BOOKINGS:');
    console.log('================================');
    
    const { data: sample } = await supabase
      .from('bookings')
      .select('*')
      .limit(1);
    
    if (sample && sample.length > 0) {
      const fields = Object.keys(sample[0]);
      const financialFields = fields.filter(f => 
        f.includes('amount') || 
        f.includes('total') || 
        f.includes('price') || 
        f.includes('balance') ||
        f.includes('paid')
      );
      
      console.log('–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–ª—è:');
      financialFields.forEach(field => {
        console.log(`  ‚Ä¢ ${field}: ${typeof sample[0][field]}`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

checkBookingPrices();