import React, { useState, useEffect, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Send, MessageCircle, Check, CheckCheck, AlertCircle } from 'lucide-react';
import { format } from 'date-fns';
import { ru } from 'date-fns/locale';
import { supabase } from '@/lib/supabase';
import { useAuth } from '@/components/auth/AuthProvider';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
const MessageStatusIcon = ({ status, channel }) => {
  // –î–ª—è Telegram –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ sent/delivered (–±–µ–∑ read)
  if (channel === 'telegram' && status === 'read') {
    return (
      <div className="flex items-center ml-1" title="–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ Telegram">
        <div className="relative">
          <CheckCheck className="h-3 w-3 text-white opacity-70" />
        </div>
      </div>
    );
  }
  
  switch (status) {
    case 'sent':
      // 1 –±–µ–ª–∞—è –≥–∞–ª–æ—á–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
      return (
        <div className="flex items-center ml-1" title="–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ">
          <Check className="h-3 w-3 text-white opacity-70" />
        </div>
      );
      
    case 'delivered':
      // 2 –±–µ–ª—ã–µ –≥–∞–ª–æ—á–∫–∏ - –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
      const deliveredTitle = channel === 'telegram' ? '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ Telegram' : 
                           channel === 'email' ? '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫' : 
                           channel === 'whatsapp' ? '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ WhatsApp' : '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ';
      return (
        <div className="flex items-center ml-1" title={deliveredTitle}>
          <div className="relative">
            <CheckCheck className="h-3 w-3 text-white opacity-70" />
          </div>
        </div>
      );
      
    case 'read':
      // 2 –∑–µ–ª–µ–Ω—ã–µ –≥–∞–ª–æ—á–∫–∏ - –ø—Ä–æ—á–∏—Ç–∞–Ω–æ
      const readTitle = channel === 'email' ? '–ü—Ä–æ—á–∏—Ç–∞–Ω–æ (–ø–æ–ª—É—á–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–ª –ø–∏—Å—å–º–æ)' : 
                       channel === 'whatsapp' ? '–ü—Ä–æ—á–∏—Ç–∞–Ω–æ –≤ WhatsApp' : '–ü—Ä–æ—á–∏—Ç–∞–Ω–æ';
      return (
        <div className="flex items-center ml-1" title={readTitle}>
          <div className="relative">
            <CheckCheck className="h-3 w-3 text-green-400" />
          </div>
        </div>
      );
      
    case 'failed':
      // –ö—Ä–∞—Å–Ω—ã–π –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫ - –æ—à–∏–±–∫–∞
      const failedTitle = channel === 'email' ? '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞' :
                         channel === 'whatsapp' ? '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ WhatsApp' :
                         channel === 'telegram' ? '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram' : '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏';
      return (
        <div className="flex items-center ml-1" title={failedTitle}>
          <AlertCircle className="h-3 w-3 text-red-400" />
        </div>
      );
      
    default:
      return null;
  }
};

export default function ChatInterface({ selectedConversation }) {
  const { user } = useAuth();
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState('');
  const [loading, setLoading] = useState(false);
  const messagesEndRef = useRef(null);

  useEffect(() => {
    if (!selectedConversation?.id) {
      setMessages([]);
      return;
    }
    
    const loadMessages = async () => {
      setLoading(true);
      try {
        const { data, error } = await supabase
          .from('messages')
          .select('*')
          .eq('conversation_id', selectedConversation.id)
          .order('created_at', { ascending: true });
        
        if (error) throw error;
        setMessages(data || []);
      } catch (error) { 
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error); 
      } finally { 
        setLoading(false); 
      }
    };
    
    loadMessages();

    // ‚úÖ –ü–û–î–ü–ò–°–ö–ê –ù–ê –ù–û–í–´–ï –°–û–û–ë–©–ï–ù–ò–Ø –ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø –°–¢–ê–¢–£–°–û–í
    const messagesChannel = supabase
      .channel(`messages:${selectedConversation.id}`)
      .on('postgres_changes', { 
        event: 'INSERT', 
        schema: 'public', 
        table: 'messages', 
        filter: `conversation_id=eq.${selectedConversation.id}` 
      }, (payload) => {
        console.log('üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ:', payload.new);
        setMessages(prev => {
          if (prev.find(msg => msg.id === payload.new.id)) {
            return prev;
          }
          return [...prev, payload.new];
        });
      })
      // ‚úÖ –ü–û–î–ü–ò–°–ö–ê –ù–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –°–¢–ê–¢–£–°–û–í (–ì–õ–ê–í–ù–û–ï!)
      .on('postgres_changes', { 
        event: 'UPDATE', 
        schema: 'public', 
        table: 'messages', 
        filter: `conversation_id=eq.${selectedConversation.id}` 
      }, (payload) => {
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', payload.new.id, '—Å—Ç–∞—Ç—É—Å:', payload.new.status, '–∫–∞–Ω–∞–ª:', payload.new.channel);
        
        // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        setMessages(prev => prev.map(msg => 
          msg.id === payload.new.id 
            ? { ...msg, status: payload.new.status, brevo_message_id: payload.new.brevo_message_id }
            : msg
        ));
      })
      .subscribe();
    
    return () => { 
      supabase.removeChannel(messagesChannel); 
    };
  }, [selectedConversation?.id]);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const sendMessage = async () => {
    const conversation = selectedConversation;
    if (!newMessage.trim() || !conversation || !user) return;
    
    const content = newMessage.trim();
    setNewMessage('');

    // ‚úÖ –û–ü–¢–ò–ú–ò–°–¢–ò–ß–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï: –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ UI —Å—Ä–∞–∑—É
    const tempMessage = {
      id: `temp-${Date.now()}`, // –í—Ä–µ–º–µ–Ω–Ω—ã–π ID
      conversation_id: conversation.id,
      content,
      sender_id: user.id,
      sender_type: 'staff',
      status: 'sent',
      created_at: new Date().toISOString(),
      isOptimistic: true // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    };
    
    setMessages(prev => [...prev, tempMessage]);

    try {
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ${conversation.channel}:`, content);

      // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'sent'
      const { data: newMessageData, error } = await supabase
        .from('messages')
        .insert({ 
          conversation_id: conversation.id, 
          content, 
          sender_id: user.id, 
          sender_type: 'staff',
          status: 'sent' // –ù–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        })
        .select()
        .single();

      if (error) throw error;
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î:', newMessageData.id);

      // ‚úÖ –ó–ê–ú–ï–ù–Ø–ï–ú –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ
      setMessages(prev => prev.map(msg => 
        msg.id === tempMessage.id 
          ? { ...newMessageData, isOptimistic: false }
          : msg
      ));

      // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ n8n webhook'–∏
      const channel = conversation.channel?.toLowerCase();
      let webhookUrl = null;
      let webhookPayload = {
        conversation_id: conversation.id,
        message_id: newMessageData.id, // ID –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î
        content: content
      };

      switch (channel) {
        case 'whatsapp':
          webhookUrl = 'https://vodahotel.app.n8n.cloud/webhook/pms_to_whatsapp';
          console.log('üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ WhatsApp...');
          break;
          
        case 'telegram':
          webhookUrl = 'https://vodahotel.app.n8n.cloud/webhook/telegram-reply';
          console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram...');
          break;
          
        case 'avito':
          webhookUrl = 'https://vodahotel.app.n8n.cloud/webhook/c2e07a8b-9c99-4dfb-b45f-37e6db393a54';
          console.log('üè† –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Avito...');
          break;
          
        case 'email':
          webhookUrl = 'https://vodahotel.app.n8n.cloud/webhook/pms_to_email_brevo';
          console.log('üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Email —á–µ—Ä–µ–∑ Brevo...');
          break;
          
        default:
          console.warn('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª:', conversation.channel);
          return;
      }

      if (webhookUrl) {
        console.log('üîó –í—ã–∑—ã–≤–∞–µ–º webhook:', webhookUrl);
        console.log('üì¶ Payload:', webhookPayload);
        
        const response = await fetch(webhookUrl, {
          method: 'POST',
          headers: { 
            'Content-Type': 'application/json' 
          },
          body: JSON.stringify(webhookPayload)
        });

        if (response.ok) {
          console.log(`‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –≤—ã–∑–≤–∞–Ω –¥–ª—è ${conversation.channel}`);
          
          // ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
          try {
            const responseData = await response.json();
            console.log(`üìä ${conversation.channel} Response:`, responseData);
            
            // WhatsApp Cloud API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: { messages: [{ id: "wamid...." }] }
            if (channel === 'whatsapp' && responseData && responseData.messages && responseData.messages[0] && responseData.messages[0].id) {
              const whatsappMessageId = responseData.messages[0].id;
              
              await supabase.from('messages')
                .update({ whatsapp_message_id: whatsappMessageId })
                .eq('id', newMessageData.id);
                
              console.log('‚úÖ WhatsApp Message ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', whatsappMessageId);
            }
            
            // Email —á–µ—Ä–µ–∑ Brevo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç messageId
            if (channel === 'email' && responseData && responseData.messageId) {
              console.log('‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Brevo, messageId:', responseData.messageId);
            }
            
          } catch (jsonError) {
            console.log('‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å response JSON:', jsonError.message);
          }
          
          // 3. –°–∏–º—É–ª—è—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è Telegram (—É –Ω–µ–≥–æ –Ω–µ—Ç webhooks —Å—Ç–∞—Ç—É—Å–æ–≤)
          if (channel === 'telegram') {
            console.log('üß™ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è Telegram...');
            
            setTimeout(async () => {
              try {
                await supabase.from('messages')
                  .update({ status: 'delivered' })
                  .eq('id', newMessageData.id);
                console.log('üì¨ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: delivered');
              } catch (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è delivered:', err);
              }
            }, 1500);
          }
          
        } else {
          console.error(`‚ùå –û—à–∏–±–∫–∞ webhook –¥–ª—è ${conversation.channel}:`, response.status);
          const errorText = await response.text();
          console.error('–û—à–∏–±–∫–∞ webhook:', errorText);
          
          // ‚úÖ –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ failed
          setMessages(prev => prev.map(msg => 
            msg.id === tempMessage.id || msg.id === newMessageData.id
              ? { ...(msg.id === tempMessage.id ? newMessageData : msg), status: 'failed' }
              : msg
          ));
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
          await supabase.from('messages')
            .update({ status: 'failed' })
            .eq('id', newMessageData.id);
        }
      }

    } catch (error) { 
      console.error('üí• –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      
      // ‚úÖ –ü—Ä–∏ –æ—à–∏–±–∫–µ —É–¥–∞–ª—è–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      setMessages(prev => prev.filter(msg => msg.id !== tempMessage.id));
    }
  };

  const getHeaderText = () => {
    if (!selectedConversation) return '';
    
    const contactName = selectedConversation.contact_full_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç';
    const channelText = selectedConversation.channel ? `(${selectedConversation.channel})` : '';
    
    return `${contactName} ${channelText}`;
  };
  
  return (
    <div className="flex flex-col h-full bg-white">
      {!selectedConversation ? (
        <div className="flex h-full items-center justify-center text-slate-500 p-4">
          <div className="text-center">
            <MessageCircle className="h-16 w-16 mx-auto mb-4 text-slate-300" />
            <p className="text-lg font-medium">–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ª–æ–≥</p>
            <p className="text-sm text-slate-400 mt-2">–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–µ–≤–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É</p>
          </div>
        </div>
      ) : (
        <>
          <div className="p-4 border-b border-slate-200 bg-slate-50">
            <h3 className="font-semibold text-slate-900">{getHeaderText()}</h3>
            <p className="text-sm text-slate-500 mt-1">–ö–∞–Ω–∞–ª: {selectedConversation.channel}</p>
          </div>
          
          <div className="flex-1 overflow-y-auto p-4 space-y-4">
            {loading && (
              <div className="text-center text-slate-500">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
            )}
            
            {messages.map((message) => {
              const isMyMessage = message.sender_type === 'staff';
              return (
                <div 
                  key={message.id} 
                  className={`flex mb-4 ${isMyMessage ? 'justify-end' : 'justify-start'}`}
                >
                  <div 
                    className={`max-w-[70%] px-4 py-2 rounded-lg break-words ${
                      isMyMessage 
                        ? 'bg-blue-500 text-white rounded-br-sm' 
                        : 'bg-slate-200 text-slate-900 rounded-bl-sm'
                    }`}
                    style={{ 
                      wordWrap: 'break-word', 
                      overflowWrap: 'break-word',
                      maxWidth: '70%' 
                    }}
                  >
                    <div className="flex items-end justify-between">
                      {/* –õ–µ–≤–∞—è —á–∞—Å—Ç—å - —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è */}
                      <p className="break-words whitespace-pre-wrap flex-1 mr-2">{message.content}</p>
                      
                      {/* –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –≤—Ä–µ–º—è –∏ –≥–∞–ª–æ—á–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É */}
                      <div className="flex items-center space-x-1 flex-shrink-0 self-end">
                        {message.created_at && (
                          <span className={`text-xs leading-none ${
                            isMyMessage ? 'text-blue-100' : 'text-slate-500'
                          }`}>
                            {format(new Date(message.created_at), 'HH:mm', { locale: ru })}
                          </span>
                        )}
                        
                        {/* ‚úÖ –ì–ê–õ–û–ß–ö–ò –¢–û–õ–¨–ö–û –î–õ–Ø –°–û–û–ë–©–ï–ù–ò–ô –û–¢ –ü–ï–†–°–û–ù–ê–õ–ê */}
                        {isMyMessage && message.status && (
                          <MessageStatusIcon 
                            status={message.status} 
                            channel={selectedConversation?.channel?.toLowerCase()} 
                          />
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              );
            })}
            <div ref={messagesEndRef} />
          </div>
          
          <div className="p-4 border-t border-slate-200">
            <div className="flex items-center space-x-2">
              <Input 
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." 
                value={newMessage} 
                onChange={(e) => setNewMessage(e.target.value)} 
                onKeyDown={(e) => { 
                  if (e.key === 'Enter' && !e.shiftKey) { 
                    e.preventDefault(); 
                    sendMessage(); 
                  } 
                }} 
                className="flex-1" 
              />
              <Button 
                onClick={sendMessage} 
                disabled={!newMessage.trim()}
              >
                <Send className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </>
      )}
    </div>
  );
}