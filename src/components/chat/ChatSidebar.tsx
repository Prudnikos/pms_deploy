import React, { useState, useEffect, useCallback } from 'react';
import { supabase } from '@/lib/supabase';
import { Avatar, AvatarImage, AvatarFallback } from '@/components/ui/avatar';
import { Input } from '@/components/ui/input';
import { Search, MessageCircle, AlertCircle, Check, CheckCheck, RefreshCw } from 'lucide-react';
import { format, isToday, isYesterday, isValid } from 'date-fns';
import { ru } from 'date-fns/locale';

// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤ –Ω–∞—á–∞–ª–æ ChatInterface.jsx (–ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤)

const MessageStatusIcon = ({ status }) => {
  switch (status) {
    case 'sent':
      // 1 –±–µ–ª–∞—è –≥–∞–ª–æ—á–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
      return (
        <div className="flex items-center ml-1" title="–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ">
          <Check className="h-3 w-3 text-white opacity-70" />
        </div>
      );
      
    case 'delivered':
      // 2 –±–µ–ª—ã–µ –≥–∞–ª–æ—á–∫–∏ - –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
      return (
        <div className="flex items-center ml-1" title="–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ">
          <div className="relative">
            <CheckCheck className="h-3 w-3 text-white opacity-70" />
          </div>
        </div>
      );
      
    case 'read':
      // 2 –∑–µ–ª–µ–Ω—ã–µ –≥–∞–ª–æ—á–∫–∏ - –ø—Ä–æ—á–∏—Ç–∞–Ω–æ
      return (
        <div className="flex items-center ml-1" title="–ü—Ä–æ—á–∏—Ç–∞–Ω–æ">
          <div className="relative">
            <CheckCheck className="h-3 w-3 text-green-400" />
          </div>
        </div>
      );
      
    case 'failed':
      // –ö—Ä–∞—Å–Ω—ã–π –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫ - –æ—à–∏–±–∫–∞
      return (
        <div className="flex items-center ml-1" title="–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏">
          <AlertCircle className="h-3 w-3 text-red-400" />
        </div>
      );
      
    default:
      return null;
  }
};

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã ---
const ChannelIcon = ({ channel }) => {
    const channelKey = typeof channel === 'string' ? channel.toLowerCase() : '';
    const iconMap = {
        whatsapp: <img src="/icons/whatsapp.png" alt="WhatsApp" className="h-5 w-5" />,
        telegram: <img src="/icons/telegram.png" alt="Telegram" className="h-5 w-5" />,
        avito: <img src="/icons/avito.png" alt="Avito" className="h-5 w-5" />,
        email: <img src="/icons/email.png" alt="Email" className="h-5 w-5" />,
    };
    
    if (!iconMap[channelKey]) return null;
    
    return (
        <div className="absolute bottom-[-2px] right-[-2px] bg-white rounded-full p-0.5 shadow-sm border border-slate-200 flex items-center justify-center">
            {iconMap[channelKey]}
        </div>
    );
};

const MessageStatus = ({ status, isLastMessageFromStaff }) => {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
    if (!isLastMessageFromStaff) return null;
    
    switch (status) {
        case 'sent':
            // –û–¥–Ω–∞ —Å–µ—Ä–∞—è –≥–∞–ª–æ—á–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            return (
                <div className="flex items-center" title="–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ">
                    <Check className="h-4 w-4 text-slate-400" />
                </div>
            );
            
        case 'delivered':
            // –î–≤–µ —Å–µ—Ä—ã–µ –≥–∞–ª–æ—á–∫–∏ - –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
            return (
                <div className="flex items-center" title="–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ">
                    <div className="relative">
                        <CheckCheck className="h-4 w-4 text-slate-400" />
                    </div>
                </div>
            );
            
        case 'read':
            // –î–≤–µ —Å–∏–Ω–∏–µ –≥–∞–ª–æ—á–∫–∏ - –ø—Ä–æ—á–∏—Ç–∞–Ω–æ
            return (
                <div className="flex items-center" title="–ü—Ä–æ—á–∏—Ç–∞–Ω–æ">
                    <div className="relative">
                        <CheckCheck className="h-4 w-4 text-blue-500" />
                    </div>
                </div>
            );
            
        case 'failed':
            // –ö—Ä–∞—Å–Ω—ã–π –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫ - –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
            return (
                <div className="flex items-center" title="–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏">
                    <AlertCircle className="h-4 w-4 text-red-500" />
                </div>
            );
            
        default:
            return null;
    }
};

const formatSmartTime = (date) => {
    if (!date) return '';
    const d = new Date(date);
    if (!isValid(d)) return '';
    if (isToday(d)) return format(d, 'HH:mm');
    if (isYesterday(d)) return '–í—á–µ—Ä–∞';
    return format(d, 'dd.MM.yy', { locale: ru });
};

const getDisplayName = (conversation) => {
    if (conversation?.contact_full_name) return conversation.contact_full_name;
    return `–î–∏–∞–ª–æ–≥ #${(conversation?.id || '').substring(0, 6)}`;
};

const getInitials = (conversation) => {
    const name = getDisplayName(conversation);
    if (name.startsWith('–î–∏–∞–ª–æ–≥')) {
        // –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∫–æ–Ω–∫—É –∫–∞–Ω–∞–ª–∞
        if (conversation.channel === 'whatsapp') return 'WA';
        if (conversation.channel === 'telegram') return 'TG';
        if (conversation.channel === 'avito') return 'AV';
        if (conversation.channel === 'email') return '@';
        return '??';
    }
    
    const words = name.trim().split(' ');
    if (words.length === 1) {
        return words[0].substring(0, 2).toUpperCase();
    }
    return words.slice(0, 2).map(word => word[0]).join('').toUpperCase();
};

// --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç ---
export default function ChatSidebar({ onConversationSelect, selectedConversation }) {
    const [conversations, setConversations] = useState([]);
    const [loading, setLoading] = useState(true);
    const [searchTerm, setSearchTerm] = useState('');
    const [error, setError] = useState('');
    const [debugInfo, setDebugInfo] = useState('');

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞ —á–µ—Ä–µ–∑ Edge Function
   // –ó–∞–º–µ–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é fetchAvatar –≤ ChatSidebar.tsx
const fetchAvatar = async (conversation) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∞ –∏ –µ—Å—Ç—å contact_id
    if (conversation.contact_avatar_url) {
        console.log(`‚ÑπÔ∏è –ê–≤–∞—Ç–∞—Ä —É–∂–µ –µ—Å—Ç—å –¥–ª—è ${conversation.contact_full_name}`);
        return null;
    }
    
    if (!conversation.contact_id) {
        console.log(`‚ùå –ù–µ—Ç contact_id –¥–ª—è ${conversation.contact_full_name}`);
        return null;
    }

    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º WhatsApp –∏ Telegram
    if (conversation.channel !== 'whatsapp' && conversation.channel !== 'telegram') {
        console.log(`‚ÑπÔ∏è –ö–∞–Ω–∞–ª ${conversation.channel} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤`);
        return null;
    }

    try {
        console.log(`üñºÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä –¥–ª—è ${conversation.channel}:`, conversation.contact_full_name);
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä—è–º–æ –∏–∑ –¥–∏–∞–ª–æ–≥–∞ (–Ω–æ–≤–∞—è RPC —Ñ—É–Ω–∫—Ü–∏—è –∏—Ö –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç)
        let external_id;
        if (conversation.channel === 'telegram') {
            external_id = conversation.telegram_user_id;
        } else if (conversation.channel === 'whatsapp') {
            external_id = conversation.whatsapp_sender_id;
        }

        if (!external_id) {
            console.log(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω external_id –≤ –¥–∏–∞–ª–æ–≥–µ –¥–ª—è ${conversation.channel}`);
            
            // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - –∏—â–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ contacts
            console.log('üîÑ –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ external_id –≤ —Ç–∞–±–ª–∏—Ü–µ contacts...');
            const { data: contactData, error: contactError } = await supabase
                .from('contacts')
                .select('external_id')
                .eq('id', conversation.contact_id)
                .single();

            if (contactError || !contactData?.external_id) {
                console.log('‚ùå external_id –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ –≤ —Ç–∞–±–ª–∏—Ü–µ contacts');
                return null;
            }
            
            external_id = contactData.external_id;
        }

        console.log(`üìû –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä –¥–ª—è ${conversation.channel} ID:`, external_id);

        // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é Edge Function
        const functionName = conversation.channel === 'telegram' ? 'fetch-telegram-avatar' : 'fetch-whatsapp-avatar';
        const bodyParam = conversation.channel === 'telegram' ? 'telegram_user_id' : 'wa_id';

        // –í—ã–∑—ã–≤–∞–µ–º Edge Function
        const { data, error } = await supabase.functions.invoke(functionName, {
            body: {
                [bodyParam]: external_id,
                contact_id: conversation.contact_id
            }
        });

        if (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ Edge Function:', error);
            return null;
        }

        if (data?.success && data?.avatar_url) {
            console.log('‚úÖ –ê–≤–∞—Ç–∞—Ä –∑–∞–≥—Ä—É–∂–µ–Ω:', data.avatar_url);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            setConversations(prev => prev.map(c => 
                c.id === conversation.id 
                    ? { ...c, contact_avatar_url: data.avatar_url }
                    : c
            ));

            return data.avatar_url;
        } else {
            console.log('‚ÑπÔ∏è –ê–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω:', data?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
            return null;
        }

    } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∞:', error);
        return null;
    }
};

// ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –£–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ
const updateConversationLastMessageStatus = useCallback(async (messageUpdate) => {
    console.log('üéØ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ:', messageUpdate);
    
    try {
        // ‚úÖ –ú–ì–ù–û–í–ï–ù–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï: –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ª–æ–∫–∞–ª—å–Ω–æ
        setConversations(prev => prev.map(conv => {
            if (conv.id === messageUpdate.conversation_id) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
                const isLastMessage = conv.last_message_sender_is_staff;
                
                if (isLastMessage) {
                    console.log(`‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–∏–∞–ª–æ–≥–∞ ${conv.contact_full_name}: ${messageUpdate.status}`);
                    return {
                        ...conv,
                        last_message_status: messageUpdate.status,
                        updated_at: new Date().toISOString()
                    };
                }
            }
            return conv;
        }));
        
        console.log('‚úÖ –°—Ç–∞—Ç—É—Å –¥–∏–∞–ª–æ–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –º–≥–Ω–æ–≤–µ–Ω–Ω–æ');
        
    } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –¥–µ–ª–∞–µ–º –ø–æ–ª–Ω—É—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –∫–∞–∫ fallback
        setTimeout(() => fetchConversations(true), 500);
    }
}, []);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –≥–æ—Å—Ç—è
const handleGuestMessage = async (newMessage) => {
    try {
        console.log('üß† –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≥–æ—Å—Ç—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...');
        
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –Ω–µpr–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç staff –≤ —ç—Ç–æ–º –¥–∏–∞–ª–æ–≥–µ
        const { data: unreadStaffMessages, error } = await supabase
            .from('messages')
            .select('id, content, created_at')
            .eq('conversation_id', newMessage.conversation_id)
            .eq('sender_type', 'staff')
            .in('status', ['sent', 'delivered'])
            .order('created_at', { ascending: false });
            
        if (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
            return;
        }
        
        if (!unreadStaffMessages?.length) {
            console.log('‚ÑπÔ∏è –ù–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∞');
            return;
        }
        
        console.log(`üìñ –ù–∞–π–¥–µ–Ω–æ ${unreadStaffMessages.length} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∞`);
        
        // –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ—á—Ç–µ–Ω–∏—è:
        const messageAge = new Date() - new Date(unreadStaffMessages[0].created_at);
        const isRecentMessage = messageAge < 24 * 60 * 60 * 1000; // –ú–ª–∞–¥—à–µ 24 —á–∞—Å–æ–≤
        
        if (isRecentMessage) {
            // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –Ω–µ–¥–∞–≤–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            const messageIds = unreadStaffMessages.map(msg => msg.id);
            
            const { error: updateError } = await supabase
                .from('messages')
                .update({ 
                    status: 'read',
                    updated_at: new Date().toISOString()
                })
                .in('id', messageIds);
                
            if (updateError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤:', updateError);
            } else {
                console.log(`‚úÖ –ü–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ ${messageIds.length} —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª)`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
                setTimeout(() => fetchConversations(true), 500);
            }
        } else {
            console.log('‚è∞ –°–æ–æ–±—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–µ, –Ω–µ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
        }
        
    } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞ —É–º–Ω–æ–π –ª–æ–≥–∏–∫–∏ –ø—Ä–æ—á—Ç–µ–Ω–∏—è:', error);
    }
};

    // –í–†–ï–ú–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram –∞–≤–∞—Ç–∞—Ä–æ–≤
    const testTelegramAvatar = async () => {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Telegram Avatar Function...');
        
        try {
            const result = await supabase.functions.invoke('fetch-telegram-avatar', {
                body: { 
                    telegram_user_id: '1322101796', 
                    contact_id: 'd860abee-90a9-4e01-a5bd-5ef07adb13da' 
                }
            });
            
            console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', result);
            
            if (result.data?.success) {
                console.log('‚úÖ –ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:', result.data.avatar_url);
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥–∏ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                fetchConversations(true);
            } else {
                console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤–∞—Ç–∞—Ä:', result.data?.message);
            }
            
        } catch (error) {
            console.error('üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        }
    };

    const fetchConversations = useCallback(async (silent = false) => {
        console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∏–∞–ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ RPC...', silent ? '(—Ç–∏—Ö–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)' : '');
        setError('');
        if (!silent) setLoading(true);
        
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à—É RPC —Ñ—É–Ω–∫—Ü–∏—é
            const { data, error: rpcError } = await supabase.rpc('get_conversations');
            
            if (rpcError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ RPC get_conversations:', rpcError);
                setError(`–û—à–∏–±–∫–∞ RPC: ${rpcError.message}`);
                setDebugInfo(`RPC –æ—à–∏–±–∫–∞: ${rpcError.code} - ${rpcError.message}`);
            } else {
                console.log('‚úÖ RPC —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ –¥–∞–Ω–Ω—ã–µ:', data?.length || 0);
                console.log('üìä –ü–µ—Ä–≤—ã–µ 3 –¥–∏–∞–ª–æ–≥–∞:', data?.slice(0, 3));
                console.log('üñºÔ∏è –ê–≤–∞—Ç–∞—Ä—ã:', data?.slice(0, 3).map(c => ({ id: c.id, avatar: c.contact_avatar_url })));
                
                setConversations(data || []);
                setDebugInfo(`RPC —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç. –ù–∞–π–¥–µ–Ω–æ: ${data?.length || 0} –¥–∏–∞–ª–æ–≥–æ–≤`);
            }
        } catch (error) {
            console.error('üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
            setError(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
            setDebugInfo(`–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error.message}`);
        }
        
        if (!silent) setLoading(false);
    }, []);

 useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∞–ª–æ–≥–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    fetchConversations();
    
    const subscription = supabase
        .channel('public-db-changes-smart-read-sidebar')
        .on('postgres_changes', { 
            event: 'INSERT', 
            schema: 'public', 
            table: 'messages'
        }, (payload) => {
            console.log('üîî –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î (sidebar):', payload.new);
            
            // –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≥–æ—Å—Ç—è
            if (payload.new.sender_type === 'guest') {
                console.log('üë§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≥–æ—Å—Ç—è');
                
                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ê–ö–¢–ò–í–ù–û–ú –¥–∏–∞–ª–æ–≥–µ - —Å—Ä–∞–∑—É –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
                if (selectedConversation && payload.new.conversation_id === selectedConversation.id) {
                    console.log('üìñ –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ - –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ —Å—Ä–∞–∑—É');
                    
                    setTimeout(async () => {
                        const { error } = await supabase.rpc('mark_conversation_as_read', { 
                            conv_id: payload.new.conversation_id 
                        });
                        
                        if (!error) {
                            console.log('‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π');
                        }
                    }, 100);
                } else {
                    console.log('üí≠ –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ - –∑–∞–ø—É—Å–∫–∞–µ–º —É–º–Ω—É—é –ª–æ–≥–∏–∫—É');
                    handleGuestMessage(payload.new);
                }
            }
            
            // ‚úÖ –£–õ–£–ß–®–ï–ù–ò–ï: –ë—ã—Å—Ç—Ä–µ–µ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            setTimeout(() => fetchConversations(true), 300);
        })
        .on('postgres_changes', { 
            event: 'UPDATE', 
            schema: 'public', 
            table: 'messages'
        }, (payload) => {
            console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (sidebar):', payload.new.id, '—Å—Ç–∞—Ç—É—Å:', payload.new.status);
            
            // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –£–õ–£–ß–®–ï–ù–ò–ï: –£–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
            updateConversationLastMessageStatus(payload.new);
            
            // ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            setTimeout(() => {
                console.log('üîÑ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–æ–≤');
                fetchConversations(true);
            }, 2000);
        })
        .on('postgres_changes', { 
            event: '*', 
            schema: 'public', 
            table: 'conversations'
        }, (payload) => {
            console.log('üîî –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –¥–∏–∞–ª–æ–≥–∞—Ö:', payload);
            setTimeout(() => fetchConversations(true), 500);
        })
        .subscribe();
        
    console.log('üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–º–Ω—É—é –ª–æ–≥–∏–∫—É –ø—Ä–æ—á—Ç–µ–Ω–∏—è (sidebar) –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
    
    return () => { 
        console.log('üîå –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É (sidebar)');
        supabase.removeChannel(subscription); 
    };
}, []); // –£–±—Ä–∞–ª–∏ selectedConversation –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞: –ø–æ–º–µ—á–∞—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø—Ä–∏ –¥–æ–ª–≥–æ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
const markOldMessagesAsRead = async () => {
    try {
        console.log('‚è∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—á—Ç–µ–Ω–∏—è...');
        
        // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ 2 —á–∞—Å–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º delivered
        const twoHoursAgo = new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString();
        
        const { data: oldMessages, error } = await supabase
            .from('messages')
            .select('id, conversation_id')
            .eq('sender_type', 'staff')
            .eq('status', 'delivered')
            .lt('created_at', twoHoursAgo);
            
        if (error || !oldMessages?.length) {
            return;
        }
        
        console.log(`üìÖ –ù–∞–π–¥–µ–Ω–æ ${oldMessages.length} —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ–ø—Ä–æ—á—Ç–µ–Ω–∏—è`);
        
        const messageIds = oldMessages.map(msg => msg.id);
        
        const { error: updateError } = await supabase
            .from('messages')
            .update({ status: 'read' })
            .in('id', messageIds);
            
        if (!updateError) {
            console.log(`‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ ${messageIds.length} —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π`);
        }
        
    } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø—Ä–æ—á—Ç–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    }
};

    // –ó–∞–º–µ–Ω–∏—Ç–µ –≤–µ—Å—å useEffect –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤ (–æ–∫–æ–ª–æ —Å—Ç—Ä–æ–∫–∏ 397)
useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä—ã –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –±–µ–∑ –∞–≤–∞—Ç–∞—Ä–∞ (WhatsApp –∏ Telegram)
    const loadMissingAvatars = async () => {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤–∞—Ç–∞—Ä—ã –¥–ª—è –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤...');
        
        const contactsWithoutAvatars = conversations.filter(conv => {
            const hasNoAvatar = !conv.contact_avatar_url;
            const isSupportedChannel = conv.channel === 'whatsapp' || conv.channel === 'telegram';
            const hasContactId = conv.contact_id;
            
            console.log(`üìã –î–∏–∞–ª–æ–≥ ${conv.contact_full_name}: –∫–∞–Ω–∞–ª=${conv.channel}, –∞–≤–∞—Ç–∞—Ä=${conv.contact_avatar_url ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}, contact_id=${conv.contact_id ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}`);
            
            return hasNoAvatar && isSupportedChannel && hasContactId;
        });

        console.log(`üîÑ –ù–∞–π–¥–µ–Ω–æ ${contactsWithoutAvatars.length} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –±–µ–∑ –∞–≤–∞—Ç–∞—Ä–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏`);
        
        if (contactsWithoutAvatars.length === 0) {
            console.log('‚úÖ –í—Å–µ –∞–≤–∞—Ç–∞—Ä—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–ª–∏ –∫–∞–Ω–∞–ª—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è');
            return;
        }

        // –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        contactsWithoutAvatars.forEach(conv => {
            console.log(`üéØ –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤–∞—Ç–∞—Ä: ${conv.contact_full_name} (${conv.channel})`);
        });

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä—ã –ø–æ –æ–¥–Ω–æ–º—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        for (const conversation of contactsWithoutAvatars.slice(0, 3)) { // –ú–∞–∫—Å–∏–º—É–º 3 –∑–∞ —Ä–∞–∑
            console.log(`‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä –¥–ª—è ${conversation.contact_full_name} (${conversation.channel})`);
            await fetchAvatar(conversation);
            await new Promise(resolve => setTimeout(resolve, 1000)); // –ü–∞—É–∑–∞ 1 —Å–µ–∫—É–Ω–¥–∞
        }
    };

    if (conversations.length > 0) {
        console.log(`üìä –í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤: ${conversations.length}`);
        loadMissingAvatars();
    }
}, [conversations.length]); // –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∏–∞–ª–æ–≥–æ–≤

    // –ó–∞–º–µ–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é handleConversationClick
const handleConversationClick = async (conversation) => {
    console.log('üëÜ –ö–ª–∏–∫ –ø–æ –¥–∏–∞–ª–æ–≥—É:', conversation.id, '–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö:', conversation.unread_count);
    
    // ‚úÖ –°–ù–ê–ß–ê–õ–ê –æ–±–Ω–æ–≤–ª—è–µ–º UI - –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
    onConversationSelect(conversation);
    
    if (conversation.unread_count > 0) {
        // ‚úÖ –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI - —Å—Ä–∞–∑—É —É–±–∏—Ä–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        setConversations(prev => prev.map(c => 
            c.id === conversation.id ? { ...c, unread_count: 0 } : c
        ));
        
        console.log('üîÑ –û—Ç–º–µ—á–∞–µ–º –¥–∏–∞–ª–æ–≥ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π...');
        
        // ‚úÖ –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ –≤ —Ñ–æ–Ω–µ
        const { error: rpcError } = await supabase.rpc('mark_conversation_as_read', { 
            conv_id: conversation.id 
        });
        
        if (rpcError) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏:", rpcError);
            // ‚úÖ –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            setConversations(prev => prev.map(c => 
                c.id === conversation.id ? { ...c, unread_count: conversation.unread_count } : c
            ));
        } else {
            console.log('‚úÖ –î–∏–∞–ª–æ–≥ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π');
            // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º fetchConversations - UI —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω!
        }
    }
};

// –ó–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
useEffect(() => {
    const interval = setInterval(markOldMessagesAsRead, 30 * 60 * 1000);
    return () => clearInterval(interval);
}, []);

    const filteredConversations = conversations.filter(conv => {
        if (!searchTerm) return true;
        return getDisplayName(conv).toLowerCase().includes(searchTerm.toLowerCase());
    });
    
    const updateMessageStatus = async (messageId, newStatus) => {
    try {
        console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId} –Ω–∞ ${newStatus}`);
        
        const { error } = await supabase
            .from('messages')
            .update({ status: newStatus })
            .eq('id', messageId);
            
        if (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
        } else {
            console.log('‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤
            fetchConversations(true);
        }
    } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
const simulateStatusUpdates = async (messageId) => {
    console.log('üß™ –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤...');
    
    // –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚Üí –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => updateMessageStatus(messageId, 'delivered'), 2000);
    
    // –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ ‚Üí –ü—Ä–æ—á–∏—Ç–∞–Ω–æ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => updateMessageStatus(messageId, 'read'), 5000);
};

    return (
        <div className="h-full flex flex-col bg-white border-r border-slate-200">
            {/* –•–µ–¥–µ—Ä —Å debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π */}
            <div className="p-4 border-b border-slate-200">
                <div className="flex items-center justify-between mb-4">
                    <h2 className="text-xl font-bold text-slate-800 flex items-center">
                        <MessageCircle className="mr-2 h-5 w-5" />
                        –ß–∞—Ç—ã
                    </h2>
                    <div className="flex space-x-2">
                        {/* –í–†–ï–ú–ï–ù–ù–ê–Ø –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
                        <button 
                            onClick={testTelegramAvatar}
                            className="p-2 bg-blue-500 text-white rounded text-xs hover:bg-blue-600"
                            title="–¢–µ—Å—Ç Telegram Avatar"
                        >
                            üß™ TG
                        </button>
                        <button 
                            onClick={() => fetchConversations(false)}
                            className="p-2 hover:bg-slate-100 rounded-full transition-colors"
                            title="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫"
                        >
                            <RefreshCw className={`h-4 w-4 ${loading ? 'animate-spin' : ''}`} />
                        </button>
                    </div>
                </div>

                {/* Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                {debugInfo && (
                    <div className="mb-2 p-2 bg-blue-50 border border-blue-200 rounded text-xs text-blue-700">
                        üêõ {debugInfo}
                    </div>
                )}

                {/* –û—à–∏–±–∫–∏ */}
                {error && (
                    <div className="mb-2 p-2 bg-red-50 border border-red-200 rounded text-xs text-red-700 flex items-center">
                        <AlertCircle className="h-4 w-4 mr-2 flex-shrink-0" />
                        {error}
                    </div>
                )}

                <div className="relative">
                    <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-slate-400" />
                    <Input 
                        placeholder="–ü–æ–∏—Å–∫..." 
                        value={searchTerm} 
                        onChange={(e) => setSearchTerm(e.target.value)} 
                        className="pl-10"
                    />
                </div>
            </div>

            <div className="flex-1 overflow-y-auto">
                {loading && (
                    <div className="p-4 text-center text-slate-500">
                        <RefreshCw className="h-6 w-6 animate-spin mx-auto mb-2" />
                        –ó–∞–≥—Ä—É–∑–∫–∞...
                    </div>
                )}
                
                {!loading && !error && filteredConversations.length === 0 && conversations.length === 0 && (
                    <div className="p-4 text-center text-slate-500">
                        <MessageCircle className="h-8 w-8 mx-auto mb-2 opacity-50" />
                        –î–∏–∞–ª–æ–≥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç
                    </div>
                )}
                
                {!loading && !error && filteredConversations.length === 0 && conversations.length > 0 && (
                    <div className="p-4 text-center text-slate-500">
                        <Search className="h-8 w-8 mx-auto mb-2 opacity-50" />
                        –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É "{searchTerm}"
                    </div>
                )}
                
                {!loading && !error && filteredConversations.map((conversation) => (
                    <div
                        key={conversation.id}
                        onClick={() => handleConversationClick(conversation)}
                        className={`p-3 border-b border-slate-100 cursor-pointer hover:bg-slate-50 ${
                            selectedConversation?.id === conversation.id ? 'bg-blue-50' : ''
                        }`}
                    >
                        <div className="flex items-center space-x-3">
                            <div className="relative flex-shrink-0">
                                <Avatar className="h-12 w-12">
                                    {conversation.contact_avatar_url ? (
                                        <AvatarImage 
                                            src={conversation.contact_avatar_url} 
                                            alt={getDisplayName(conversation)}
                                            onError={(e) => {
                                                console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞:', e.target.src);
                                                // –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –∑–∞–Ω–æ–≤–æ
                                                fetchAvatar(conversation);
                                            }}
                                        />
                                    ) : null}
                                    <AvatarFallback className="bg-blue-500 text-white font-semibold text-sm">
                                        {getInitials(conversation)}
                                    </AvatarFallback>
                                </Avatar>
                                <ChannelIcon channel={conversation.channel} />
                            </div>
                            <div className="flex-1 min-w-0">
                                <div className="flex items-start justify-between">
                                    <h3 className="font-semibold truncate text-slate-800 flex-1 pr-2">
                                        {getDisplayName(conversation)}
                                    </h3>
                                    <span className="text-xs text-slate-400 flex-shrink-0">
                                        {formatSmartTime(conversation.updated_at)}
                                    </span>
                                </div>
                                <div className="flex items-start justify-between mt-1">
                                    <p className="text-sm truncate text-slate-500 pr-2">
                                        {conversation.last_message_sender_is_staff && (
                                            <span className="font-medium">–í—ã: </span>
                                        )}
                                        {conversation.last_message_preview}
                                    </p>
                                    <div className="flex-shrink-0 h-5 flex items-center justify-center min-w-[20px]">
                                        {conversation.unread_count > 0 ? (
                                            <div className="bg-green-500 text-white text-xs font-bold rounded-full h-5 min-w-[20px] flex items-center justify-center px-1.5">
                                                {conversation.unread_count}
                                            </div>
                                        ) : conversation.last_message_sender_is_staff ? (
                                            <MessageStatus  
                                                status={conversation.last_message_status} 
                                                isLastMessageFromStaff={conversation.last_message_sender_is_staff}
                                            />
                                        ) : null}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                ))}
            </div>
        </div>
    );
}