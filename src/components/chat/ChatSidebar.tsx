import React, { useState, useEffect, useCallback } from 'react';
import { supabase } from '@/lib/supabase';
import { Avatar, AvatarImage, AvatarFallback } from '@/components/ui/avatar';
import { Input } from '@/components/ui/input';
import { Search, MessageCircle, AlertCircle, Check, CheckCheck, RefreshCw } from 'lucide-react';
import { format, isToday, isYesterday, isValid } from 'date-fns';
import { ru } from 'date-fns/locale';

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
const ChannelIcon = ({ channel }) => {
    const channelKey = typeof channel === 'string' ? channel.toLowerCase() : '';
    const iconMap = {
        whatsapp: <img src="/icons/whatsapp.png" alt="WhatsApp" className="h-5 w-5" />,
    };
    if (!iconMap[channelKey]) return null;
    return (
        <div className="absolute bottom-[-2px] right-[-2px] bg-white rounded-full flex items-center justify-center">
            {iconMap[channelKey]}
        </div>
    );
};

const MessageStatus = ({ status }) => {
    if (status === 'read') return <CheckCheck className="h-5 w-5 text-blue-500" />;
    if (status === 'delivered') return <CheckCheck className="h-5 w-5 text-slate-400" />;
    if (status === 'sent') return <Check className="h-5 w-5 text-slate-400" />;
    return null;
};

const formatSmartTime = (date) => {
    if (!date) return '';
    const d = new Date(date);
    if (!isValid(d)) return '';
    if (isToday(d)) return format(d, 'HH:mm');
    if (isYesterday(d)) return '–í—á–µ—Ä–∞';
    return format(d, 'dd.MM.yy', { locale: ru });
};

const getDisplayName = (conversation) => {
    if (conversation?.contact_full_name) return conversation.contact_full_name;
    return `–î–∏–∞–ª–æ–≥ #${(conversation?.id || '').substring(0, 6)}`;
};

const getInitials = (conversation) => {
    const name = getDisplayName(conversation);
    if (name.startsWith('–î–∏–∞–ª–æ–≥')) return '??';
    return name.split(' ').map(n => n[0]).join('').toUpperCase();
};

// --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç ---
export default function ChatSidebar({ onConversationSelect, selectedConversation }) {
    const [conversations, setConversations] = useState([]);
    const [loading, setLoading] = useState(true);
    const [searchTerm, setSearchTerm] = useState('');
    const [error, setError] = useState('');
    const [debugInfo, setDebugInfo] = useState('');

    const fetchConversations = useCallback(async (silent = false) => {
        console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∏–∞–ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ RPC...', silent ? '(—Ç–∏—Ö–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)' : '');
        setError('');
        if (!silent) setLoading(true);
        
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à—É RPC —Ñ—É–Ω–∫—Ü–∏—é
            const { data, error: rpcError } = await supabase.rpc('get_conversations');
            
            if (rpcError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ RPC get_conversations:', rpcError);
                setError(`–û—à–∏–±–∫–∞ RPC: ${rpcError.message}`);
                setDebugInfo(`RPC –æ—à–∏–±–∫–∞: ${rpcError.code} - ${rpcError.message}`);
            } else {
                console.log('‚úÖ RPC —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ –¥–∞–Ω–Ω—ã–µ:', data?.length || 0);
                console.log('üìä –ü–µ—Ä–≤—ã–µ 3 –¥–∏–∞–ª–æ–≥–∞:', data?.slice(0, 3));
                
                setConversations(data || []);
                setDebugInfo(`RPC —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç. –ù–∞–π–¥–µ–Ω–æ: ${data?.length || 0} –¥–∏–∞–ª–æ–≥–æ–≤`);
            }
        } catch (error) {
            console.error('üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
            setError(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
            setDebugInfo(`–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error.message}`);
        }
        
        if (!silent) setLoading(false);
    }, []);

    useEffect(() => {
        fetchConversations();
        
        const subscription = supabase
            .channel('public-db-changes-final-debug')
            .on('postgres_changes', { event: '*', schema: 'public' }, 
                (payload) => {
                    console.log('üîî –ü–æ–ª—É—á–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ë–î:', payload);
                    // –¢–∏—Ö–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –ø–æ–∫–∞–∑–∞ –ª–æ–∞–¥–µ—Ä–∞
                    setTimeout(() => fetchConversations(true), 50);
                }
            )
            .subscribe();
            
        console.log('üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
        
        return () => { 
            console.log('üîå –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É');
            supabase.removeChannel(subscription); 
        };
    }, [fetchConversations]);

    const handleConversationClick = async (conversation) => {
        console.log('üëÜ –ö–ª–∏–∫ –ø–æ –¥–∏–∞–ª–æ–≥—É:', conversation.id, '–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö:', conversation.unread_count);
        
        onConversationSelect(conversation);
        
        if (conversation.unread_count > 0) {
            // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
            setConversations(prev => prev.map(c => 
                c.id === conversation.id ? { ...c, unread_count: 0 } : c
            ));
            
            console.log('üîÑ –û—Ç–º–µ—á–∞–µ–º –¥–∏–∞–ª–æ–≥ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π...');
            const { error: rpcError } = await supabase.rpc('mark_conversation_as_read', { 
                conv_id: conversation.id 
            });
            
            if (rpcError) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏:", rpcError);
                // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                setConversations(prev => prev.map(c => 
                    c.id === conversation.id ? { ...c, unread_count: conversation.unread_count } : c
                ));
            } else {
                console.log('‚úÖ –î–∏–∞–ª–æ–≥ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π');
                // –¢–∏—Ö–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –ø–æ–∫–∞–∑–∞ –ª–æ–∞–¥–µ—Ä–∞
                setTimeout(() => fetchConversations(true), 100);
            }
        }
    };

    const filteredConversations = conversations.filter(conv => {
        if (!searchTerm) return true;
        return getDisplayName(conv).toLowerCase().includes(searchTerm.toLowerCase());
    });

    return (
        <div className="h-full flex flex-col bg-white border-r border-slate-200">
            {/* –•–µ–¥–µ—Ä —Å debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π */}
            <div className="p-4 border-b border-slate-200">
                <div className="flex items-center justify-between mb-4">
                    <h2 className="text-xl font-bold text-slate-800 flex items-center">
                        <MessageCircle className="mr-2 h-5 w-5" />
                        –ß–∞—Ç—ã
                    </h2>
                    <button 
                        onClick={() => fetchConversations(false)}
                        className="p-2 hover:bg-slate-100 rounded-full transition-colors"
                        title="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫"
                    >
                        <RefreshCw className={`h-4 w-4 ${loading ? 'animate-spin' : ''}`} />
                    </button>
                </div>

                {/* Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                {debugInfo && (
                    <div className="mb-2 p-2 bg-blue-50 border border-blue-200 rounded text-xs text-blue-700">
                        üêõ {debugInfo}
                    </div>
                )}

                {/* –û—à–∏–±–∫–∏ */}
                {error && (
                    <div className="mb-2 p-2 bg-red-50 border border-red-200 rounded text-xs text-red-700 flex items-center">
                        <AlertCircle className="h-4 w-4 mr-2 flex-shrink-0" />
                        {error}
                    </div>
                )}

                <div className="relative">
                    <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-slate-400" />
                    <Input 
                        placeholder="–ü–æ–∏—Å–∫..." 
                        value={searchTerm} 
                        onChange={(e) => setSearchTerm(e.target.value)} 
                        className="pl-10"
                    />
                </div>
            </div>

            <div className="flex-1 overflow-y-auto">
                {loading && (
                    <div className="p-4 text-center text-slate-500">
                        <RefreshCw className="h-6 w-6 animate-spin mx-auto mb-2" />
                        –ó–∞–≥—Ä—É–∑–∫–∞...
                    </div>
                )}
                
                {!loading && !error && filteredConversations.length === 0 && conversations.length === 0 && (
                    <div className="p-4 text-center text-slate-500">
                        <MessageCircle className="h-8 w-8 mx-auto mb-2 opacity-50" />
                        –î–∏–∞–ª–æ–≥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç
                    </div>
                )}
                
                {!loading && !error && filteredConversations.length === 0 && conversations.length > 0 && (
                    <div className="p-4 text-center text-slate-500">
                        <Search className="h-8 w-8 mx-auto mb-2 opacity-50" />
                        –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É "{searchTerm}"
                    </div>
                )}
                
                {!loading && !error && filteredConversations.map((conversation) => (
                    <div
                        key={conversation.id}
                        onClick={() => handleConversationClick(conversation)}
                        className={`p-3 border-b border-slate-100 cursor-pointer hover:bg-slate-50 ${
                            selectedConversation?.id === conversation.id ? 'bg-blue-50' : ''
                        }`}
                    >
                        <div className="flex items-center space-x-3">
                            <div className="relative flex-shrink-0">
                                <Avatar className="h-12 w-12">
                                    <AvatarImage src={conversation.contact_avatar_url} />
                                    <AvatarFallback>{getInitials(conversation)}</AvatarFallback>
                                </Avatar>
                                <ChannelIcon channel={conversation.channel} />
                            </div>
                            <div className="flex-1 min-w-0">
                                <div className="flex items-start justify-between">
                                    <h3 className="font-semibold truncate text-slate-800 flex-1 pr-2">
                                        {getDisplayName(conversation)}
                                    </h3>
                                    <span className="text-xs text-slate-400 flex-shrink-0">
                                        {formatSmartTime(conversation.updated_at)}
                                    </span>
                                </div>
                                <div className="flex items-start justify-between mt-1">
                                    <p className="text-sm truncate text-slate-500 pr-2">
                                        {conversation.last_message_sender_is_staff && (
                                            <span className="font-medium">–í—ã: </span>
                                        )}
                                        {conversation.last_message_preview}
                                    </p>
                                    <div className="flex-shrink-0 h-5 flex items-center justify-center min-w-[20px]">
                                        {conversation.unread_count > 0 ? (
                                            <div className="bg-green-500 text-white text-xs font-bold rounded-full h-5 min-w-[20px] flex items-center justify-center px-1.5">
                                                {conversation.unread_count}
                                            </div>
                                        ) : conversation.last_message_sender_is_staff ? (
                                            <MessageStatus status={conversation.last_message_status} />
                                        ) : null}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                ))}
            </div>
        </div>
    );
}