import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Loader2, Plus, Download, User, Calendar, Home, DollarSign } from 'lucide-react';
import channexService from '@/services/channex/ChannexService.jsx';
import { supabase } from '@/lib/supabase';

export default function ChannexBookingManager() {
  const [isCreating, setIsCreating] = useState(false);
  const [isImporting, setIsImporting] = useState(false);
  const [result, setResult] = useState(null);
  const [formData, setFormData] = useState({
    // –î–∞–Ω–Ω—ã–µ –≥–æ—Å—Ç—è
    guestName: '',
    guestSurname: '',
    guestEmail: '',
    guestPhone: '',
    guestCountry: 'GB',
    
    // –î–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    roomNumber: '101',
    checkIn: '',
    checkOut: '',
    guestsCount: 1,
    source: 'Open Channel',
    notes: ''
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–æ—Ä–º—ã
  const handleInputChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ PMS
  const handleCreateBooking = async () => {
    setIsCreating(true);
    setResult(null);

    try {
      console.log('üéØ –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ PMS...');

      // 1. –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ PMS –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const pmsBookingData = {
        id: `pms-${Date.now()}`,
        room_id: `room-${formData.roomNumber}`,
        check_in: formData.checkIn,
        check_out: formData.checkOut,
        source: formData.source,
        
        guests: {
          full_name: `${formData.guestName} ${formData.guestSurname}`,
          email: formData.guestEmail,
          phone: formData.guestPhone,
          country: formData.guestCountry
        },
        
        guests_count: parseInt(formData.guestsCount),
        status: 'pending',
        notes: formData.notes,
        sync_status: 'pending',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };

      // –í—Å—Ç–∞–≤–ª—è–µ–º –≤ Supabase
      const { data: insertedBooking, error: insertError } = await supabase
        .from('bookings')
        .insert([pmsBookingData])
        .select()
        .single();

      if (insertError) throw insertError;

      console.log('‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –≤ PMS:', insertedBooking.id);

      // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Channex
      const channexResult = await channexService.createBookingInChannex(insertedBooking);
      
      if (channexResult?.id) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å ID –∏–∑ Channex
        const { error: updateError } = await supabase
          .from('bookings')
          .update({
            external_booking_id: channexResult.id,
            sync_status: 'synced',
            last_sync_at: new Date().toISOString()
          })
          .eq('id', insertedBooking.id);

        if (updateError) throw updateError;

        setResult({
          success: true,
          message: '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!',
          pmsId: insertedBooking.id,
          channexId: channexResult.id
        });

        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        setFormData({
          guestName: '',
          guestSurname: '',
          guestEmail: '',
          guestPhone: '',
          guestCountry: 'GB',
          roomNumber: '101',
          checkIn: '',
          checkOut: '',
          guestsCount: 1,
          source: 'Open Channel',
          notes: ''
        });
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      setResult({
        success: false,
        message: `–û—à–∏–±–∫–∞: ${error.message}`
      });
    } finally {
      setIsCreating(false);
    }
  };

  // –ò–º–ø–æ—Ä—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∏–∑ Channex
  const handleImportBookings = async () => {
    setIsImporting(true);
    setResult(null);

    try {
      console.log('üì• –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ Channex...');
      const importResult = await channexService.importBookingsToPMS();
      
      setResult({
        success: true,
        message: `–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: ${importResult.imported} –¥–æ–±–∞–≤–ª–µ–Ω–æ, ${importResult.skipped} –ø—Ä–æ–ø—É—â–µ–Ω–æ, ${importResult.errors} –æ—à–∏–±–æ–∫`,
        importStats: importResult
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
      setResult({
        success: false,
        message: `–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ${error.message}`
      });
    } finally {
      setIsImporting(false);
    }
  };

  return (
    <div className="space-y-6">
      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ */}
      {result && (
        <Alert className={result.success ? "border-green-500" : "border-red-500"}>
          <AlertDescription className={result.success ? "text-green-700" : "text-red-700"}>
            {result.message}
            {result.pmsId && (
              <div className="mt-2 text-sm">
                <Badge variant="outline">PMS ID: {result.pmsId}</Badge>
                {result.channexId && (
                  <Badge variant="outline" className="ml-2">Channex ID: {result.channexId}</Badge>
                )}
              </div>
            )}
            {result.importStats && (
              <div className="mt-2 text-sm">
                <Badge variant="secondary">{result.importStats.imported} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ</Badge>
                <Badge variant="outline" className="ml-2">{result.importStats.skipped} –ø—Ä–æ–ø—É—â–µ–Ω–æ</Badge>
                {result.importStats.errors > 0 && (
                  <Badge variant="destructive" className="ml-2">{result.importStats.errors} –æ—à–∏–±–æ–∫</Badge>
                )}
              </div>
            )}
          </AlertDescription>
        </Alert>
      )}

      {/* –ò–º–ø–æ—Ä—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Download className="h-5 w-5" />
            –ò–º–ø–æ—Ä—Ç –∏–∑ Channex
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-sm text-muted-foreground mb-4">
            –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ Channex –≤ PMS
          </p>
          <Button 
            onClick={handleImportBookings}
            disabled={isImporting}
            className="w-full"
          >
            {isImporting ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º...
              </>
            ) : (
              <>
                <Download className="mr-2 h-4 w-4" />
                –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
              </>
            )}
          </Button>
        </CardContent>
      </Card>

      {/* –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Plus className="h-5 w-5" />
            –°–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ PMS
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Å—Ç–µ */}
          <div className="space-y-3">
            <Label className="text-base flex items-center gap-2">
              <User className="h-4 w-4" />
              –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Å—Ç–µ
            </Label>
            
            <div className="grid grid-cols-2 gap-3">
              <div>
                <Label htmlFor="guestName">–ò–º—è *</Label>
                <Input
                  id="guestName"
                  value={formData.guestName}
                  onChange={(e) => handleInputChange('guestName', e.target.value)}
                  placeholder="John"
                />
              </div>
              <div>
                <Label htmlFor="guestSurname">–§–∞–º–∏–ª–∏—è *</Label>
                <Input
                  id="guestSurname"
                  value={formData.guestSurname}
                  onChange={(e) => handleInputChange('guestSurname', e.target.value)}
                  placeholder="Doe"
                />
              </div>
            </div>

            <div>
              <Label htmlFor="guestEmail">Email *</Label>
              <Input
                id="guestEmail"
                type="email"
                value={formData.guestEmail}
                onChange={(e) => handleInputChange('guestEmail', e.target.value)}
                placeholder="john.doe@example.com"
              />
            </div>

            <div className="grid grid-cols-2 gap-3">
              <div>
                <Label htmlFor="guestPhone">–¢–µ–ª–µ—Ñ–æ–Ω</Label>
                <Input
                  id="guestPhone"
                  value={formData.guestPhone}
                  onChange={(e) => handleInputChange('guestPhone', e.target.value)}
                  placeholder="+44 123 456 789"
                />
              </div>
              <div>
                <Label htmlFor="guestCountry">–°—Ç—Ä–∞–Ω–∞</Label>
                <Select value={formData.guestCountry} onValueChange={(value) => handleInputChange('guestCountry', value)}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="GB">–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è (GB)</SelectItem>
                    <SelectItem value="US">–°–®–ê (US)</SelectItem>
                    <SelectItem value="DE">–ì–µ—Ä–º–∞–Ω–∏—è (DE)</SelectItem>
                    <SelectItem value="FR">–§—Ä–∞–Ω—Ü–∏—è (FR)</SelectItem>
                    <SelectItem value="RU">–†–æ—Å—Å–∏—è (RU)</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ */}
          <div className="space-y-3">
            <Label className="text-base flex items-center gap-2">
              <Calendar className="h-4 w-4" />
              –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
            </Label>

            <div className="grid grid-cols-2 gap-3">
              <div>
                <Label htmlFor="checkIn">–ó–∞–µ–∑–¥ *</Label>
                <Input
                  id="checkIn"
                  type="date"
                  value={formData.checkIn}
                  onChange={(e) => handleInputChange('checkIn', e.target.value)}
                />
              </div>
              <div>
                <Label htmlFor="checkOut">–í—ã–µ–∑–¥ *</Label>
                <Input
                  id="checkOut"
                  type="date"
                  value={formData.checkOut}
                  onChange={(e) => handleInputChange('checkOut', e.target.value)}
                />
              </div>
            </div>

            <div className="grid grid-cols-2 gap-3">
              <div>
                <Label htmlFor="roomNumber">–ù–æ–º–µ—Ä</Label>
                <Select value={formData.roomNumber} onValueChange={(value) => handleInputChange('roomNumber', value)}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="101">101 (Standard Room - ¬£100)</SelectItem>
                    <SelectItem value="201">201 (Deluxe Room - ¬£200)</SelectItem>
                    <SelectItem value="301">301 (Suite - ¬£300)</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label htmlFor="guestsCount">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π</Label>
                <Select value={formData.guestsCount.toString()} onValueChange={(value) => handleInputChange('guestsCount', parseInt(value))}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="1">1 –≥–æ—Å—Ç—å</SelectItem>
                    <SelectItem value="2">2 –≥–æ—Å—Ç—è</SelectItem>
                    <SelectItem value="3">3 –≥–æ—Å—Ç—è</SelectItem>
                    <SelectItem value="4">4 –≥–æ—Å—Ç—è</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div>
              <Label htmlFor="source">–ò—Å—Ç–æ—á–Ω–∏–∫</Label>
              <Select value={formData.source} onValueChange={(value) => handleInputChange('source', value)}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Open Channel">Open Channel</SelectItem>
                  <SelectItem value="booking">Booking.com</SelectItem>
                  <SelectItem value="direct">–ü—Ä—è–º–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</SelectItem>
                  <SelectItem value="phone">–ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É</SelectItem>
                  <SelectItem value="walk-in">Walk-in</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div>
              <Label htmlFor="notes">–ü—Ä–∏–º–µ—á–∞–Ω–∏—è</Label>
              <Textarea
                id="notes"
                value={formData.notes}
                onChange={(e) => handleInputChange('notes', e.target.value)}
                placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è..."
                rows={3}
              />
            </div>
          </div>

          <Button 
            onClick={handleCreateBooking}
            disabled={isCreating || !formData.guestName || !formData.guestSurname || !formData.guestEmail || !formData.checkIn || !formData.checkOut}
            className="w-full"
            size="lg"
          >
            {isCreating ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...
              </>
            ) : (
              <>
                <Plus className="mr-2 h-4 w-4" />
                –°–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
              </>
            )}
          </Button>
        </CardContent>
      </Card>
    </div>
  );
}