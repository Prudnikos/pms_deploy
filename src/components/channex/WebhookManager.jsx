import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { AlertCircle, CheckCircle, Clock, RefreshCw, Play, Server } from 'lucide-react';
import { supabase } from '@/lib/supabase';

export default function WebhookManager() {
  const [webhookServerStatus, setWebhookServerStatus] = useState('unknown');
  const [webhooks, setWebhooks] = useState([]);
  const [bookings, setBookings] = useState([]);
  const [logs, setLogs] = useState([]);
  const [loading, setLoading] = useState(false);

  const addLog = (message, type = 'info') => {
    const timestamp = new Date().toLocaleTimeString();
    setLogs(prev => [...prev, { message, type, timestamp }]);
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å webhook —Å–µ—Ä–≤–µ—Ä–∞
  const checkWebhookServer = async () => {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const healthUrl = window.location.hostname === 'localhost' 
      ? 'http://localhost:3001/health' 
      : 'https://pms.voda.center/api/health';
      
    try {
      const response = await fetch(healthUrl);
      if (response.ok) {
        const data = await response.json();
        setWebhookServerStatus('running');
        addLog(`‚úÖ Webhook —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç (${data.environment || 'production'})`, 'success');
      } else {
        setWebhookServerStatus('error');
        addLog('‚ùå Webhook —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'error');
      }
    } catch (error) {
      setWebhookServerStatus('offline');
      addLog('üîå Webhook —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω', 'warning');
    }
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º webhooks –∏–∑ –ë–î
  const loadWebhooks = async () => {
    try {
      const { data, error } = await supabase
        .from('channex_webhooks')
        .select('*')
        .order('received_at', { ascending: false })
        .limit(20);
        
      if (error) throw error;
      setWebhooks(data || []);
      addLog(`üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ webhook'–æ–≤: ${data?.length || 0}`, 'info');
    } catch (error) {
      addLog(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ webhooks: ${error.message}`, 'error');
    }
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ Channex
  const loadBookingsFromChannex = async () => {
    try {
      const { data, error } = await supabase
        .from('bookings')
        .select('*')
        .not('external_booking_id', 'is', null)
        .order('created_at', { ascending: false })
        .limit(20);
        
      if (error) throw error;
      setBookings(data || []);
      addLog(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∏–∑ Channex: ${data?.length || 0}`, 'info');
    } catch (error) {
      addLog(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: ${error.message}`, 'error');
    }
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const createTestBooking = async () => {
    setLoading(true);
    addLog('üß™ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...', 'info');
    
    try {
      const testBooking = {
        external_booking_id: `test_${Date.now()}`,
        source: 'booking',
        check_in: new Date().toISOString().split('T')[0],
        check_out: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
        guest_name: '–¢–µ—Å—Ç –ì–æ—Å—Ç—å',
        guest_email: 'test@example.com',
        guest_phone: '+7 999 123-45-67',
        total_amount: 5000,
        status: 'confirmed',
        guests_count: 2,
        notes: '–¢–µ—Å—Ç–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Channex –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
        channex_data: {
          test: true,
          created_at: new Date().toISOString()
        }
      };

      const { data, error } = await supabase
        .from('bookings')
        .insert(testBooking)
        .select()
        .single();

      if (error) throw error;

      addLog('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!', 'success');
      addLog(`üÜî ID: ${data.external_booking_id}`, 'info');
      addLog(`üë§ –ì–æ—Å—Ç—å: ${data.guest_name}`, 'info');
      addLog(`üìÖ –ó–∞–µ–∑–¥: ${data.check_in} - –í—ã–µ–∑–¥: ${data.check_out}`, 'info');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
      await loadBookingsFromChannex();
      
    } catch (error) {
      addLog(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`, 'error');
    }
    
    setLoading(false);
  };

  // –°–∏–º—É–ª—è—Ü–∏—è webhook –æ—Ç Channex
  const simulateWebhook = async () => {
    setLoading(true);
    addLog('üé≠ –°–∏–º—É–ª–∏—Ä—É–µ–º webhook –æ—Ç Channex...', 'info');
    
    try {
      const webhookData = {
        type: 'booking_new',
        id: `webhook_${Date.now()}`,
        object_type: 'booking',
        object_id: `booking_${Date.now()}`,
        data: {
          booking: {
            id: `channex_booking_${Date.now()}`,
            ota_name: 'Booking.com',
            status: 'confirmed',
            arrival_date: '2025-09-15',
            departure_date: '2025-09-18',
            total_price: 15000,
            customer: {
              name: '–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞',
              email: 'anna@example.com',
              phone: '+7 999 888-77-66'
            },
            occupancy: { adults: 2, children: 0 },
            notes: '–°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç webhook'
          }
        }
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook –Ω–∞ –Ω–∞—à —Å–µ—Ä–≤–µ—Ä
      const webhookUrl = window.location.hostname === 'localhost' 
        ? 'http://localhost:3001/api/channex/webhook' 
        : 'https://pms.voda.center/api/channex/webhook';
      
      const response = await fetch(webhookUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(webhookData)
      });

      if (response.ok) {
        addLog('‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!', 'success');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        await loadWebhooks();
        await loadBookingsFromChannex();
      } else {
        addLog(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: ${response.status}`, 'error');
      }
      
    } catch (error) {
      addLog(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ webhook: ${error.message}`, 'error');
    }
    
    setLoading(false);
  };

  const getWebhookServerStatusColor = () => {
    switch (webhookServerStatus) {
      case 'running': return 'bg-green-500';
      case 'error': return 'bg-red-500';
      default: return 'bg-yellow-500';
    }
  };

  const getWebhookServerStatusText = () => {
    switch (webhookServerStatus) {
      case 'running': return '–†–∞–±–æ—Ç–∞–µ—Ç';
      case 'error': return '–û—à–∏–±–∫–∞';
      case 'offline': return '–ù–µ –∑–∞–ø—É—â–µ–Ω';
      default: return '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è';
    }
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    checkWebhookServer();
    loadWebhooks();
    loadBookingsFromChannex();
  }, []);

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-bold">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Webhooks</h2>
        <Badge className={getWebhookServerStatusColor()}>
          <Server className="h-4 w-4 mr-2" />
          {getWebhookServerStatusText()}
        </Badge>
      </div>

      {/* Server Status Alert */}
      {webhookServerStatus !== 'running' && (
        <Alert>
          <AlertCircle className="h-4 w-4" />
          <AlertDescription>
            <strong>Webhook —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω!</strong> 
            <br />
            –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç Channex –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π: 
            <code className="ml-2 px-2 py-1 bg-gray-100 rounded">npm run webhook-server</code>
            <br />
            –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—É—é —Å—Ä–µ–¥—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: 
            <code className="ml-2 px-2 py-1 bg-gray-100 rounded">npm run dev:full</code>
          </AlertDescription>
        </Alert>
      )}

      {/* Control Panel */}
      <Card>
        <CardHeader>
          <CardTitle>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</CardTitle>
          <CardDescription>
            –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ webhook –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex gap-4 flex-wrap">
            <Button 
              onClick={checkWebhookServer}
              variant="outline"
            >
              <Server className="h-4 w-4 mr-2" />
              –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
            </Button>
            
            <Button 
              onClick={simulateWebhook}
              disabled={loading || webhookServerStatus !== 'running'}
            >
              {loading ? (
                <Clock className="h-4 w-4 mr-2 animate-spin" />
              ) : (
                <Play className="h-4 w-4 mr-2" />
              )}
              –°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å webhook
            </Button>
            
            <Button 
              onClick={createTestBooking}
              disabled={loading}
              variant="outline"
            >
              {loading ? (
                <Clock className="h-4 w-4 mr-2 animate-spin" />
              ) : (
                <CheckCircle className="h-4 w-4 mr-2" />
              )}
              –¢–µ—Å—Ç–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            </Button>
            
            <Button 
              onClick={() => {
                loadWebhooks();
                loadBookingsFromChannex();
              }}
              variant="outline"
            >
              <RefreshCw className="h-4 w-4 mr-2" />
              –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            </Button>
          </div>

          {/* Webhook URL */}
          <div className="space-y-2">
            <label className="text-sm font-medium">Webhook URL –¥–ª—è Channex</label>
            <div className="flex gap-2">
              <input
                type="text"
                className="flex-1 p-2 border rounded bg-slate-50"
                value={window.location.hostname === 'localhost' 
                  ? 'http://localhost:3001/api/channex/webhook' 
                  : 'https://pms.voda.center/api/channex/webhook'}
                readOnly
              />
              <Button 
                variant="outline" 
                size="sm"
                onClick={() => {
                  const webhookUrl = window.location.hostname === 'localhost' 
                    ? 'http://localhost:3001/api/channex/webhook' 
                    : 'https://pms.voda.center/api/channex/webhook';
                  navigator.clipboard.writeText(webhookUrl);
                  addLog('‚úÖ URL —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'success');
                }}
              >
                –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
              </Button>
            </div>
            <p className="text-xs text-slate-500">
              –£–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç URL –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Channex –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            </p>
          </div>
        </CardContent>
      </Card>

      {/* Tabs */}
      <Tabs defaultValue="webhooks" className="space-y-6">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="webhooks">Webhooks ({webhooks.length})</TabsTrigger>
          <TabsTrigger value="bookings">–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ({bookings.length})</TabsTrigger>
          <TabsTrigger value="logs">–õ–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</TabsTrigger>
        </TabsList>

        <TabsContent value="webhooks">
          <Card>
            <CardHeader>
              <CardTitle>–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ Webhooks</CardTitle>
              <CardDescription>
                –ò—Å—Ç–æ—Ä–∏—è –≤—Ö–æ–¥—è—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç Channex
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4 max-h-96 overflow-y-auto">
                {webhooks.length === 0 ? (
                  <p className="text-muted-foreground text-center py-8">
                    Webhook'–∏ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∞–ª–∏
                  </p>
                ) : (
                  webhooks.map((webhook) => (
                    <div key={webhook.id} className="p-4 border rounded-lg">
                      <div className="flex justify-between items-start">
                        <div className="space-y-2">
                          <div className="flex items-center gap-2">
                            <Badge variant="outline">{webhook.event_type}</Badge>
                            {webhook.object_type && (
                              <Badge variant="secondary">{webhook.object_type}</Badge>
                            )}
                            {webhook.processed ? (
                              <Badge className="bg-green-500">
                                <CheckCircle className="h-3 w-3 mr-1" />
                                –û–±—Ä–∞–±–æ—Ç–∞–Ω
                              </Badge>
                            ) : (
                              <Badge variant="destructive">
                                <Clock className="h-3 w-3 mr-1" />
                                –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
                              </Badge>
                            )}
                          </div>
                          <div className="text-sm text-muted-foreground">
                            <p>Event ID: {webhook.event_id}</p>
                            <p>Object ID: {webhook.object_id}</p>
                            <p className="text-xs">
                              {new Date(webhook.received_at).toLocaleString()}
                            </p>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))
                )}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="bookings">
          <Card>
            <CardHeader>
              <CardTitle>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ Channex</CardTitle>
              <CardDescription>
                –°–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4 max-h-96 overflow-y-auto">
                {bookings.length === 0 ? (
                  <p className="text-muted-foreground text-center py-8">
                    –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∏–∑ Channex –ø–æ–∫–∞ –Ω–µ—Ç
                  </p>
                ) : (
                  bookings.map((booking) => (
                    <div key={booking.id} className="p-4 border rounded-lg">
                      <div className="flex justify-between items-start">
                        <div className="space-y-2">
                          <div className="flex items-center gap-2">
                            <h4 className="font-semibold">{booking.guest_name}</h4>
                            <Badge variant="outline">{booking.source}</Badge>
                            <Badge 
                              className={
                                booking.status === 'confirmed' ? 'bg-green-500' :
                                booking.status === 'cancelled' ? 'bg-red-500' :
                                'bg-yellow-500'
                              }
                            >
                              {booking.status}
                            </Badge>
                          </div>
                          <div className="text-sm text-muted-foreground">
                            <p>üìÖ {booking.check_in} ‚Äî {booking.check_out}</p>
                            <p>üë• –ì–æ—Å—Ç–µ–π: {booking.guests_count} | üí∞ {booking.total_amount} ‚ÇΩ</p>
                            <p>üÜî Channex ID: {booking.external_booking_id}</p>
                            {booking.notes && <p>üìù {booking.notes}</p>}
                          </div>
                        </div>
                      </div>
                    </div>
                  ))
                )}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="logs">
          <Card>
            <CardHeader>
              <CardTitle>–õ–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</CardTitle>
              <CardDescription>
                –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –∏ —Å–æ–±—ã—Ç–∏–π
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-2 max-h-96 overflow-y-auto">
                {logs.length === 0 ? (
                  <p className="text-muted-foreground text-center py-8">
                    –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                  </p>
                ) : (
                  logs.slice(-20).reverse().map((log, index) => (
                    <div 
                      key={index}
                      className={`p-2 rounded text-sm border-l-4 ${
                        log.type === 'success' ? 'bg-green-50 border-green-500 text-green-800' :
                        log.type === 'error' ? 'bg-red-50 border-red-500 text-red-800' :
                        log.type === 'warning' ? 'bg-yellow-50 border-yellow-500 text-yellow-800' :
                        'bg-blue-50 border-blue-500 text-blue-800'
                      }`}
                    >
                      <div className="flex justify-between">
                        <span>{log.message}</span>
                        <span className="text-xs opacity-70">{log.timestamp}</span>
                      </div>
                    </div>
                  ))
                )}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}