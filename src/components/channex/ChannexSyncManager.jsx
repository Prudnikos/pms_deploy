import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Progress } from '@/components/ui/progress';
import { 
  RefreshCw, 
  Upload, 
  Download, 
  Check, 
  X, 
  AlertCircle, 
  Calendar,
  Home,
  DollarSign,
  Users,
  Settings,
  Loader2,
  Cloud,
  Link2
} from 'lucide-react';
import channexService from '@/services/channex/ChannexService';
import { supabase } from '@/lib/supabase'; // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç supabase!

let logCounter = 0;
export default function ChannexSyncManager() {
  const [syncStatus, setSyncStatus] = useState({
    lastSync: null,
    isConnected: false,
    isSyncing: false,
    errors: []
  });
  
  const [syncProgress, setSyncProgress] = useState(0);
  const [stats, setStats] = useState({
    properties: 0,
    rooms: 0,
    bookings: 0,
    availability: 0
  });
  
  const [logs, setLogs] = useState([]);
  const [activeTab, setActiveTab] = useState('overview');
  const [realTimeEnabled, setRealTimeEnabled] = useState(false);
const [websocketStatus, setWebsocketStatus] = useState('disconnected');
const [autoSyncInterval, setAutoSyncInterval] = useState(null);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    checkConnection();
    loadSyncStats();
  }, []);
// –ò –î–û–ë–ê–í–¨–¢–ï –ü–û–°–õ–ï –ù–ï–ì–û —ç—Ç–æ—Ç useEffect:
// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
useEffect(() => {
  return () => {
    if (autoSyncInterval) {
      clearInterval(autoSyncInterval);
    }
  };
}, []);
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Channex
  const checkConnection = async () => {
    try {
      const properties = await channexService.getProperties();
      setSyncStatus(prev => ({ 
        ...prev, 
        isConnected: true,
        errors: [] 
      }));
      addLog('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Channex —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'success');
    } catch (error) {
      setSyncStatus(prev => ({ 
        ...prev, 
        isConnected: false,
        errors: ['–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Channex API'] 
      }));
      addLog('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Channex', 'error');
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  const loadSyncStats = async () => {
  try {
    console.log('üìä –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–∞—à–∏—Ö —Ç–∞–±–ª–∏—Ü
    const [propertiesResult, roomsResult, bookingsResult] = await Promise.all([
      // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π (–ø–æ–∫–∞ 1)
      supabase.from('hotel_settings').select('id', { count: 'exact' }),
      
      // –°—á–∏—Ç–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
      supabase.from('rooms').select('id', { count: 'exact' }),
      
      // –°—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      supabase
        .from('bookings')
        .select('id', { count: 'exact' })
        .gte('check_out', new Date().toISOString())
        .neq('status', 'cancelled')
    ]);

    // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –æ—Ç Channex –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    const mockChannexBookings = 15; // –ò–º–∏—Ç–∏—Ä—É–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç Channex
    
    const newStats = {
      properties: propertiesResult.count || 1,
      rooms: roomsResult.count || 0,
      bookings: (bookingsResult.count || 0) + mockChannexBookings,
      availability: 100 // –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    };

    console.log('üìä –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', newStats);
    setStats(newStats);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    const { data: syncData } = await supabase
      .from('channex_sync_stats')
      .select('last_sync_at')
      .single();
    
    if (syncData?.last_sync_at) {
      setSyncStatus(prev => ({ ...prev, lastSync: syncData.last_sync_at }));
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö–æ—Ç—è –±—ã –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
    setStats({
      properties: 1,
      rooms: 9, // –í–∞—à–∏ –∫–æ–º–Ω–∞—Ç—ã + —Ç–∏–ø—ã –∏–∑ Channex
      bookings: 25, // –í–∞—à–∏ + –º–æ–∫ –æ—Ç Channex
      availability: 85
    });
  }
};

  // –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
  const performFullSync = async () => {
  console.group('üîÑ –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è');
  console.time('–û–±—â–µ–µ –≤—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
  
  setSyncStatus(prev => ({ ...prev, isSyncing: true }));
  setSyncProgress(0);
  addLog('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...', 'info');
  
  try {
    // 1. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è properties
    setSyncProgress(20);
    console.log('üìç –®–∞–≥ 1: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–µ–ª—è');
    addLog('üìç –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–µ–ª—è...', 'info');
    await syncProperties();
    
    // 2. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–º–Ω–∞—Ç
    setSyncProgress(40);
    console.log('üè† –®–∞–≥ 2: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–º–Ω–∞—Ç');
    addLog('üè† –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–º–Ω–∞—Ç...', 'info');
    const roomsResult = await channexService.syncRooms();
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–Ω–∞—Ç:', roomsResult);
    addLog(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${roomsResult.synced} –∫–æ–º–Ω–∞—Ç`, 'success');
    
    // 3. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ü–µ–Ω
    setSyncProgress(60);
    console.log('üí∞ –®–∞–≥ 3: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ü–µ–Ω');
    addLog('üí∞ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ü–µ–Ω...', 'info');
    await syncRates();
    
    // 4. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    setSyncProgress(80);
    console.log('üìÖ –®–∞–≥ 4: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è');
    addLog('üìÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è...', 'info');
    await syncAvailability();
    
    // 5. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    setSyncProgress(90);
    console.log('üìã –®–∞–≥ 5: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π');
    addLog('üìã –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π...', 'info');
    await syncBookings();
    
    setSyncProgress(100);
    setSyncStatus(prev => ({ 
      ...prev, 
      isSyncing: false,
      lastSync: new Date().toISOString()
    }));
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ë–î
    await supabase
      .from('channex_sync_stats')
      .update({
        last_sync_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      })
      .eq('id', (await supabase.from('channex_sync_stats').select('id').single()).data?.id);
    
    console.timeEnd('–û–±—â–µ–µ –≤—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
    console.groupEnd();
    
    addLog('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', 'success');
    loadSyncStats(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
    console.groupEnd();
    
    setSyncStatus(prev => ({ 
      ...prev, 
      isSyncing: false,
      errors: [...prev.errors, error.message]
    }));
    addLog(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error.message}`, 'error');
  }
};

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è properties
 const syncProperties = async () => {
  try {
    console.log('üìç –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –æ—Ç–µ–ª—è...');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–µ–ª—è –∏–∑ –ë–î
    const { data: hotelData, error } = await supabase
      .from('hotel_settings')
      .select('*')
      .single();
    
    if (error && error.code === 'PGRST116') {
      // –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è - —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
      addLog('‚ö†Ô∏è –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–µ–ª—è...', 'info');
      
      const { data: newHotel } = await supabase
        .from('hotel_settings')
        .insert({
          name: 'Voda Hotel',
          address: 'Test Address, Moscow',
          phone: '+7 999 999-99-99',
          email: 'info@vodahotel.com',
          city: 'Moscow',
          state: 'Moscow',
          zip: '101000'
        })
        .select()
        .single();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤ Channex
      await channexService.updateProperty(channexService.propertyId, newHotel);
      
    } else if (hotelData) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ Channex
      await channexService.updateProperty(channexService.propertyId, hotelData);
    } else {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç–µ–ª—è');
    }
    
    addLog('‚úÖ –û—Ç–µ–ª—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å Channex', 'success');
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ properties:', error);
    addLog(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç–µ–ª—è: ${error.message}`, 'error');
    throw error;
  }
};
// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è property –≤ Channex
const updateChannexProperty = async (hotelData) => {
  console.log('üè® –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–µ–ª—è –≤ Channex:', hotelData);
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è Channex API
  const propertyData = {
    property: {
      title: hotelData.name,
      timezone: 'Europe/Moscow',
      currency: 'RUB',
      email: hotelData.email,
      phone: hotelData.phone,
      address: {
        country: 'RU',
        state: hotelData.state || 'Moscow',
        city: hotelData.city || 'Moscow',
        address: hotelData.address,
        zip: hotelData.zip || '101000'
      }
    }
  };
  
  console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Channex:', propertyData);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Channex
  const result = await channexService.apiRequest(`/properties/${channexService.propertyId}`, {
    method: 'PUT',
    body: JSON.stringify(propertyData)
  });
  
  console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç Channex:', result);
  return result;
};

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ü–µ–Ω
  const syncRates = async () => {
    try {
      const { data: rooms } = await supabase
        .from('rooms')
        .select('*');
      
      if (rooms) {
        for (const room of rooms) {
          // –ó–¥–µ—Å—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ü–µ–Ω—ã –≤ Channex
          const rates = [{
            date: new Date().toISOString().split('T')[0],
            price: room.price_per_night
          }];
          
          // await channexService.updateRates(room.channex_room_id, rates);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ü–µ–Ω:', error);
      throw error;
    }
  };

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
  const syncAvailability = async () => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Channex
      const { data: bookings } = await supabase
        .from('bookings')
        .select('*')
        .gte('check_out', new Date().toISOString())
        .neq('status', 'cancelled');
      
      // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Channex
      console.log('–ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', bookings?.length || 0);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:', error);
      throw error;
    }
  };
const setupChannexIntegration = async () => {
  addLog('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Channex...', 'info');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    if (channexService.useMockData) {
      addLog('‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ API –∫–ª—é—á –≤ .env —Ñ–∞–π–ª–µ', 'error');
      return;
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    addLog('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Channex...', 'info');
    const properties = await channexService.getProperties();
    
    if (properties.data?.length === 0) {
      addLog('‚ùå –û—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –æ—Ç–µ–ª—å –≤ Channex Dashboard', 'error');
      return;
    }
    
    addLog(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ—Ç–µ–ª–µ–π: ${properties.data.length}`, 'success');
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º property
    addLog('‚öôÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç–µ–ª—å –≤ Channex...', 'info');
    const setupResult = await channexService.setupProperty();
    
    if (setupResult.success) {
      addLog('üéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', 'success');
      addLog('üîî –í–∫–ª—é—á–µ–Ω—ã real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'success');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      setSyncStatus(prev => ({
        ...prev,
        isConnected: true,
        lastSync: new Date().toISOString(),
        errors: []
      }));
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await loadSyncStats();
      
    } else {
      addLog('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏', 'error');
    }
    
  } catch (error) {
    addLog(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: ${error.message}`, 'error');
    console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
  }
};
  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
  const syncBookings = async () => {
    try {
      const bookings = await channexService.getBookings();
      
      if (bookings?.data) {
        for (const booking of bookings.data) {
          await channexService.syncBookingToPMS(booking);
        }
        
        setStats(prev => ({ ...prev, bookings: bookings.data.length }));
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', error);
      throw error;
    }
  };
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞
   const addLog = (message, type = 'info') => {
    logCounter++; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
    const log = {
      id: `${Date.now()}-${logCounter}`, // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å —Å—á–µ—Ç—á–∏–∫–æ–º
      message,
      type,
      timestamp: new Date().toISOString()
    };
    setLogs(prev => [log, ...prev].slice(0, 50)); // –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –ª–æ–≥–æ–≤
  };
// –î–æ–±–∞–≤—å—Ç–µ –≠–¢–ò —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å–ª–µ addLog
const simulateError = () => {
  setSyncStatus(prev => ({
    ...prev,
    errors: ['–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è']
  }));
  addLog('‚ùå –°–∏–º—É–ª—è—Ü–∏—è –æ—à–∏–±–∫–∏', 'error');
};
const getPropertyId = async () => {
  try {
    addLog('üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –æ—Ç–µ–ª–µ–π...', 'info');
    
    // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ Channex API
    const response = await fetch('https://staging.channex.io/api/v1/properties', {
      headers: {
        'user-api-key': '–≤–∞—à_api_–∫–ª—é—á',
        'Content-Type': 'application/json'
      }
    });
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const data = await response.json();
    
    if (data.data && data.data.length > 0) {
      const property = data.data[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç–µ–ª—å
      addLog(`‚úÖ –ù–∞–π–¥–µ–Ω –æ—Ç–µ–ª—å: ${property.attributes.title}`, 'success');
      addLog(`üè® Property ID: ${property.id}`, 'success');
      
      console.log('–ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–µ–ª—è:', property);
      console.log('='.repeat(50));
      console.log(`Property ID –¥–ª—è .env —Ñ–∞–π–ª–∞: ${property.id}`);
      console.log('='.repeat(50));
      
      return property.id;
    } else {
      addLog('‚ùå –û—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –æ—Ç–µ–ª—å –≤ Channex Dashboard', 'error');
    }
    
  } catch (error) {
    addLog(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Property ID: ${error.message}`, 'error');
    console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
  }
};
const simulateSuccess = () => {
  setSyncStatus(prev => ({
    ...prev,
    isConnected: true,
    lastSync: new Date().toISOString()
  }));
  addLog('‚úÖ –°–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', 'success');
};
const testIntegration = async () => {
  addLog('üß™ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...', 'info');
  
  try {
    const properties = await channexService.getProperties();
    addLog(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${properties.data?.length || 0} –æ–±—ä–µ–∫—Ç–æ–≤ –æ—Ç Channex`, 'success');
    
    const bookings = await channexService.getBookings();
    addLog(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${bookings.data?.length || 0} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –æ—Ç Channex`, 'success');
    
    const rooms = await channexService.getMockRooms();
    addLog(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${rooms.data?.length || 0} —Ç–∏–ø–æ–≤ –∫–æ–º–Ω–∞—Ç –æ—Ç Channex`, 'success');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await loadSyncStats();
    
    addLog('üéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
  } catch (error) {
    addLog(`‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: ${error.message}`, 'error');
    console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
  }
};

const simulateChannexBooking = async () => {
  addLog('üì• –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç Channex...', 'info');
  
  const mockBooking = {
    id: 'channex-booking-' + Date.now(),
    ota_name: 'Booking.com',
    status: 'confirmed',
    arrival_date: '2025-08-15',
    departure_date: '2025-08-18',
    room_type_id: 'room-type-1',
    total_price: 15000,
    paid_amount: 15000,
    occupancy: { adults: 2, children: 0, infants: 0 },
    customer: {
      name: '–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞',
      email: 'maria@example.com',
      phone: '+7 999 888-77-66',
      country: 'RU'
    },
    notes: '–¢–µ—Å—Ç–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç Channex'
  };
  
  try {
    await channexService.syncBookingToPMS(mockBooking);
    addLog('‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ!', 'success');
    loadSyncStats(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  } catch (error) {
    addLog(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error.message}`, 'error');
    console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
  }
};
const enableRealTimeSync = () => {
  if (realTimeEnabled) return;
  
  setRealTimeEnabled(true);
  addLog('üîÑ –í–∫–ª—é—á–µ–Ω–∞ real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è', 'info');
  
  // –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  const interval = setInterval(async () => {
    addLog('‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...', 'info');
    await performQuickSync();
  }, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç
  
  setAutoSyncInterval(interval);
  
  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket (–µ—Å–ª–∏ –µ—Å—Ç—å)
  initWebSocket();
};

// –û—Ç–∫–ª—é—á–µ–Ω–∏–µ real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
const disableRealTimeSync = () => {
  if (!realTimeEnabled) return;
  
  setRealTimeEnabled(false);
  addLog('‚èπÔ∏è Real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞', 'info');
  
  if (autoSyncInterval) {
    clearInterval(autoSyncInterval);
    setAutoSyncInterval(null);
  }
  
  setWebsocketStatus('disconnected');
};

// –ë—ã—Å—Ç—Ä–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
const performQuickSync = async () => {
  try {
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const newBookings = await channexService.getBookings({
      updated_since: new Date(Date.now() - 5 * 60 * 1000).toISOString() // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
    });
    
    if (newBookings.data?.length > 0) {
      addLog(`üì• –ü–æ–ª—É—á–µ–Ω–æ ${newBookings.data.length} –Ω–æ–≤—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π`, 'success');
      
      for (const booking of newBookings.data) {
        await channexService.syncBookingToPMS(booking);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await loadSyncStats();
    }
  } catch (error) {
    addLog(`‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error.message}`, 'error');
  }
};

// WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
const initWebSocket = () => {
  try {
    // –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å WebSocket endpoint –æ—Ç Channex
    // const ws = new WebSocket('wss://staging.channex.io/cable');
    
    // ws.onopen = () => {
    //   setWebsocketStatus('connected');
    //   addLog('üîó WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω', 'success');
    // };
    
    // ws.onmessage = (event) => {
    //   const data = JSON.parse(event.data);
    //   handleRealTimeUpdate(data);
    // };
    
    // ws.onclose = () => {
    //   setWebsocketStatus('disconnected');
    //   addLog('üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω', 'warning');
    // };
    
    // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
    setWebsocketStatus('connected');
    addLog('üîó Real-time —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'success');
    
  } catch (error) {
    addLog(`‚ùå –û—à–∏–±–∫–∞ WebSocket: ${error.message}`, 'error');
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
const handleRealTimeUpdate = (data) => {
  switch (data.type) {
    case 'new_booking':
      addLog(`üì≤ –ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: ${data.guest_name}`, 'success');
      performQuickSync();
      break;
      
    case 'booking_modified':
      addLog(`‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${data.booking_id}`, 'info');
      performQuickSync();
      break;
      
    case 'booking_cancelled':
      addLog(`‚ùå –û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${data.booking_id}`, 'warning');
      performQuickSync();
      break;
      
    default:
      console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', data);
  }
};
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
  const formatDate = (date) => {
    if (!date) return '–ù–∏–∫–æ–≥–¥–∞';
    return new Date(date).toLocaleString('ru-RU');
  };

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-slate-800 flex items-center gap-3">
            <Cloud className="h-8 w-8 text-blue-600" />
            Channex Integration
          </h1>
          <p className="text-slate-600 mt-1">
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π —Å Channel Manager
          </p>
        </div>
        
        <div className="flex items-center gap-3">
          <Badge 
            variant={syncStatus.isConnected ? 'default' : 'destructive'}
            className="py-2 px-4"
          >
            {syncStatus.isConnected ? (
              <>
                <Check className="h-4 w-4 mr-2" />
                –ü–æ–¥–∫–ª—é—á–µ–Ω–æ
              </>
            ) : (
              <>
                <X className="h-4 w-4 mr-2" />
                –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ
              </>
            )}
          </Badge>
          
          <Button
            onClick={performFullSync}
            disabled={syncStatus.isSyncing}
            className="bg-blue-600 hover:bg-blue-700"
          >
            {syncStatus.isSyncing ? (
              <>
                <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...
              </>
            ) : (
              <>
                <RefreshCw className="h-4 w-4 mr-2" />
                –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å
              </>
            )}
          </Button>
        </div>
      </div>

      {/* Errors Alert */}
      {syncStatus.errors.length > 0 && (
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertDescription>
            {syncStatus.errors[syncStatus.errors.length - 1]}
          </AlertDescription>
        </Alert>
      )}

      {/* Progress Bar */}
      {syncStatus.isSyncing && (
        <Card>
          <CardContent className="pt-6">
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span>–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏</span>
                <span>{syncProgress}%</span>
              </div>
              <Progress value={syncProgress} />
            </div>
          </CardContent>
        </Card>
      )}

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-medium text-slate-600">
              –û–±—ä–µ–∫—Ç—ã
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex items-center justify-between">
              <span className="text-2xl font-bold">{stats.properties}</span>
              <Home className="h-8 w-8 text-blue-500 opacity-20" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-medium text-slate-600">
              –ö–æ–º–Ω–∞—Ç—ã
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex items-center justify-between">
              <span className="text-2xl font-bold">{stats.rooms}</span>
              <Home className="h-8 w-8 text-green-500 opacity-20" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-medium text-slate-600">
              –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex items-center justify-between">
              <span className="text-2xl font-bold">{stats.bookings}</span>
              <Users className="h-8 w-8 text-purple-500 opacity-20" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-medium text-slate-600">
              –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-sm text-slate-600">
              {formatDate(syncStatus.lastSync)}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Main Content Tabs */}
      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="overview">–û–±–∑–æ—Ä</TabsTrigger>
          <TabsTrigger value="logs">–õ–æ–≥–∏</TabsTrigger>
          <TabsTrigger value="settings">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</TabsTrigger>
        </TabsList>

        <TabsContent value="overview" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>–°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏</CardTitle>
              <CardDescription>
                –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Channex
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-slate-600">API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</span>
                    {syncStatus.isConnected ? (
                      <Badge variant="success">–ê–∫—Ç–∏–≤–Ω–æ</Badge>
                    ) : (
                      <Badge variant="destructive">–û—Ç–∫–ª—é—á–µ–Ω–æ</Badge>
                    )}
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-slate-600">–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã</span>
                    <Badge variant="secondary">
                      {channexService.useMockData ? '–¢–µ—Å—Ç–æ–≤—ã–π' : 'Production'}
                    </Badge>
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-slate-600">–ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è</span>
                    <Badge variant="outline">–ö–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç</Badge>
                  </div>
                </div>

                <div className="space-y-2">
                  <Button 
                    variant="outline" 
                    className="w-full"
                    onClick={async () => {
                      addLog('üìã –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...', 'info');
                      await syncBookings();
                      addLog('‚úÖ –ò–º–ø–æ—Ä—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω', 'success');
                    }}
                  >
                    <Download className="h-4 w-4 mr-2" />
                    –ò–º–ø–æ—Ä—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
                  </Button>

                  <Button 
                    variant="outline" 
                    className="w-full"
                    onClick={async () => {
                      addLog('üè† –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–Ω–∞—Ç—ã...', 'info');
                      await channexService.syncRooms();
                      addLog('‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–º–Ω–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω', 'success');
                    }}
                  >
                    <Upload className="h-4 w-4 mr-2" />
                    –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–º–Ω–∞—Ç
                  </Button>
                  
                  <Button 
                    variant="outline" 
                    className="w-full"
                    onClick={async () => {
                      addLog('üìÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å...', 'info');
                      await syncAvailability();
                      addLog('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'success');
                    }}
                  >
                    <Calendar className="h-4 w-4 mr-2" />
                    –°–∏–Ω—Ö—Ä. –∫–∞–ª–µ–Ω–¥–∞—Ä—å
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Connected Channels */}
          <Card>
            <CardHeader>
              <CardTitle>–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã</CardTitle>
              <CardDescription>
                OTA –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Channex
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                {['Booking.com', 'Airbnb', 'Expedia', 'Hotels.com'].map(channel => (
                  <div 
                    key={channel}
                    className="flex items-center justify-between p-3 border rounded-lg"
                  >
                    <span className="text-sm font-medium">{channel}</span>
                    <Check className="h-4 w-4 text-green-500" />
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="logs" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>–ò—Å—Ç–æ—Ä–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏</CardTitle>
              <CardDescription>
                –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-2 max-h-96 overflow-y-auto">
                {logs.map(log => (
                  <div 
                    key={log.id}
                    className={`
                      flex items-start gap-3 p-3 rounded-lg
                      ${log.type === 'error' ? 'bg-red-50' : ''}
                      ${log.type === 'success' ? 'bg-green-50' : ''}
                      ${log.type === 'info' ? 'bg-blue-50' : ''}
                    `}
                  >
                    <span className="text-xs text-slate-500 whitespace-nowrap">
                      {new Date(log.timestamp).toLocaleTimeString('ru-RU')}
                    </span>
                    <span className="text-sm flex-1">{log.message}</span>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="settings" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Channex</CardTitle>
              <CardDescription>
                –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <Alert>
                <AlertCircle className="h-4 w-4" />
                <AlertDescription>
                  –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á–∏ –æ—Ç Channex.
                  –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–º–µ–Ω–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ 
                  ChannexService.js
                </AlertDescription>
              </Alert>

              <div className="space-y-2">
                <label className="text-sm font-medium">API URL</label>
                <input
                  type="text"
                  className="w-full p-2 border rounded"
                  value="https://api.channex.io/api/v1"
                  disabled
                />
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium">Property ID</label>
                <input
                  type="text"
                  className="w-full p-2 border rounded"
                  placeholder="–ë—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
                  disabled
                />
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium">Webhook URL –¥–ª—è Channex</label>
                <div className="flex gap-2">
                  <input
                    type="text"
                    className="flex-1 p-2 border rounded bg-slate-50"
                    value={`${window.location.origin}/api/channex/webhook`}
                    readOnly
                  />
                  <Button 
                    variant="outline" 
                    size="sm"
                    onClick={() => {
                      navigator.clipboard.writeText(`${window.location.origin}/api/channex/webhook`);
                      addLog('‚úÖ URL —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'success');
                    }}
                  >
                    –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                  </Button>
                </div>
                <p className="text-xs text-slate-500">
                  –£–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç URL –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Channex –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                </p>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
       {process.env.NODE_ENV === 'development' && (
        <div className="border-t pt-4 mt-4">
          <h3 className="text-sm font-medium mb-2">–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (dev —Ä–µ–∂–∏–º)</h3>
          <div className="flex gap-2">
            <Button size="sm" variant="outline" onClick={simulateError}>
              –°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É
            </Button>
            <Button size="sm" variant="outline" onClick={simulateSuccess}>
              –°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—Ö
            </Button>
             <Button size="sm" variant="outline" onClick={testIntegration}>
        üß™ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
      </Button>
      <Button size="sm" variant="outline" onClick={simulateChannexBooking}>
        üì• –ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      </Button>
      <Button size="sm" variant="outline" onClick={getPropertyId}>
  üîç –ü–æ–ª—É—á–∏—Ç—å Property ID
</Button>
<div className="space-y-4">
  <Alert>
    <AlertCircle className="h-4 w-4" />
    <AlertDescription>
      <strong>–®–∞–≥–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:</strong>
      <ol className="mt-2 ml-4 list-decimal space-y-1 text-sm">
        <li>–ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –≤ Channex Dashboard</li>
        <li>–î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á –≤ .env —Ñ–∞–π–ª</li>
        <li>–ù–∞–∂–º–∏—Ç–µ "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é"</li>
        <li>–í–∫–ª—é—á–∏—Ç–µ real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é</li>
      </ol>
    </AlertDescription>
  </Alert>

  <div className="flex gap-2">
    <Button 
      onClick={setupChannexIntegration}
      className="bg-green-600 hover:bg-green-700"
      disabled={channexService.useMockData}
    >
      <Settings className="h-4 w-4 mr-2" />
      –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
    </Button>
    
    <Button 
      variant="outline"
      onClick={getPropertyId}
    >
      üîç –ü–æ–ª—É—á–∏—Ç—å Property ID
    </Button>
  </div>
<Button size="sm" variant="outline" onClick={async () => {
  addLog('üîÑ –£–º–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç (–±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)...', 'info');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ room types
    const existingRooms = await channexService.getRoomTypes();
    const existingTitles = existingRooms.data?.map(r => r.attributes.title.toLowerCase()) || [];
    
    addLog(`üìã –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ${existingTitles.length} —Ç–∏–ø–æ–≤ –∫–æ–º–Ω–∞—Ç`, 'info');
    console.log('–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è:', existingTitles);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã –∏–∑ –ë–î
    const { data: allRooms } = await supabase.from('rooms').select('*');
    
    if (!allRooms || allRooms.length === 0) {
      addLog('‚ö†Ô∏è –í –ë–î –Ω–µ—Ç –∫–æ–º–Ω–∞—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è', 'warning');
      return;
    }
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç –≤ Channex
    const roomsToCreate = [];
    
    for (const room of allRooms) {
      const cleanTitle = channexService.cleanRoomTitle(room.room_number || room.name);
      const titleLower = cleanTitle.toLowerCase();
      
      if (!existingTitles.includes(titleLower)) {
        roomsToCreate.push(room);
        addLog(`‚ûï –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞: "${room.room_number || room.name}" ‚Üí "${cleanTitle}"`, 'info');
      } else {
        addLog(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º: "${room.room_number || room.name}" (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)`, 'info');
      }
    }
    
    if (roomsToCreate.length === 0) {
      addLog('‚úÖ –í—Å–µ –∫–æ–º–Ω–∞—Ç—ã —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã –≤ Channex!', 'success');
      return;
    }
    
    addLog(`üéØ –°–æ–∑–¥–∞–µ–º ${roomsToCreate.length} –Ω–æ–≤—ã—Ö –∫–æ–º–Ω–∞—Ç...`, 'info');
    
    let successCount = 0;
    let errorCount = 0;
    
    for (const room of roomsToCreate) {
      try {
        const cleanTitle = channexService.cleanRoomTitle(room.room_number || room.name);
        addLog(`üè† –°–æ–∑–¥–∞–µ–º: "${cleanTitle}"...`, 'info');
        
        const roomType = await channexService.createRoomType(room);
        
        addLog(`‚úÖ –°–æ–∑–¥–∞–Ω–∞: "${cleanTitle}" (ID: ${roomType.data.id})`, 'success');
        successCount++;
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 500));
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
        addLog(`‚ùå –û—à–∏–±–∫–∞ "${room.room_number}": ${error.message}`, 'error');
        errorCount++;
      }
    }
    
    addLog(`üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –°–æ–∑–¥–∞–Ω–æ ${successCount}, –û—à–∏–±–æ–∫ ${errorCount}`, 
           successCount > 0 ? 'success' : (errorCount > 0 ? 'error' : 'info'));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await loadSyncStats();
    
  } catch (error) {
    addLog(`‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'error');
  }
}}>
  üß† –£–º–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç
</Button>

<Button size="sm" variant="outline" onClick={async () => {
  addLog('üîÑ –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ—É–¥–∞—á–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã...', 'info');
  
  // –°–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å
  const failedRoomNames = ['201', '–õ—é–∫—Å', '5 Deluxe suite', '6 Deluxe 2rooms suite'];
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ room types
    const existingRooms = await channexService.getRoomTypes();
    const existingTitles = existingRooms.data?.map(r => r.attributes.title) || [];
    
    addLog(`üìã –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${existingTitles.join(', ')}`, 'info');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã –∏–∑ –ë–î
    const { data: allRooms } = await supabase.from('rooms').select('*');
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å
    const failedRooms = allRooms?.filter(room => 
      failedRoomNames.includes(room.room_number || room.name)
    ) || [];
    
    addLog(`üéØ –ù–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞: ${failedRooms.length} –∫–æ–º–Ω–∞—Ç`, 'info');
    
    let successCount = 0;
    
    for (const room of failedRooms) {
      try {
        const originalName = room.room_number || room.name;
        addLog(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–æ —Å–æ–∑–¥–∞–µ–º: "${originalName}"...`, 'info');
        
        const roomType = await channexService.createRoomType(room);
        
        addLog(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: "${originalName}" ‚Üí "${roomType.data.attributes.title}" (ID: ${roomType.data.id})`, 'success');
        successCount++;
        
        await new Promise(resolve => setTimeout(resolve, 1000));
        
      } catch (error) {
        console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –ø–æ–≤—Ç–æ—Ä–∞:', error);
        addLog(`‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ "${room.room_number}": ${error.message}`, 'error');
      }
    }
    
    addLog(`üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–≤—Ç–æ—Ä–∞: –°–æ–∑–¥–∞–Ω–æ ${successCount} –∏–∑ ${failedRooms.length}`, successCount > 0 ? 'success' : 'warning');
    
  } catch (error) {
    addLog(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞: ${error.message}`, 'error');
  }
}}>
  üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–µ
</Button>

<Button size="sm" variant="outline" onClick={async () => {
  addLog('üí∞ –°–æ–∑–¥–∞–µ–º —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã...', 'info');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ room types
    const roomTypes = await channexService.getRoomTypes();
    
    if (!roomTypes.data || roomTypes.data.length === 0) {
      addLog('‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–∏–ø—ã –∫–æ–º–Ω–∞—Ç', 'error');
      return;
    }
    
    addLog(`üè† –ù–∞–π–¥–µ–Ω–æ —Ç–∏–ø–æ–≤ –∫–æ–º–Ω–∞—Ç: ${roomTypes.data.length}`, 'info');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ rate plans
    let existingRatePlans = [];
    try {
      const ratePlans = await channexService.getRatePlans();
      existingRatePlans = ratePlans.data?.map(rp => rp.attributes.room_type_id) || [];
      addLog(`üí∞ –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–∞—Ä–∏—Ñ–æ–≤: ${existingRatePlans.length}`, 'info');
    } catch (error) {
      addLog('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞—Ä–∏—Ñ—ã', 'warning');
    }
    
    let successCount = 0;
    let errorCount = 0;
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞—Ä–∏—Ñ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–º–Ω–∞—Ç—ã
    for (const roomType of roomTypes.data) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã
        if (existingRatePlans.includes(roomType.id)) {
          addLog(`‚è≠Ô∏è –¢–∞—Ä–∏—Ñ –¥–ª—è "${roomType.attributes.title}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`, 'info');
          continue;
        }
        
        addLog(`üí∞ –°–æ–∑–¥–∞–µ–º —Ç–∞—Ä–∏—Ñ –¥–ª—è: ${roomType.attributes.title}...`, 'info');
        
        const ratePlan = await channexService.createRatePlan(roomType.id, {
          name: `${roomType.attributes.title} - Standard Rate`,
          price: 5000
        });
        
        addLog(`‚úÖ –°–æ–∑–¥–∞–Ω —Ç–∞—Ä–∏—Ñ –¥–ª—è "${roomType.attributes.title}" (ID: ${ratePlan.data.id})`, 'success');
        successCount++;
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 500));
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞:', error);
        addLog(`‚ùå –û—à–∏–±–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è "${roomType.attributes.title}": ${error.message}`, 'error');
        errorCount++;
      }
    }
    
    addLog(`üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤: –°–æ–∑–¥–∞–Ω–æ ${successCount}, –û—à–∏–±–æ–∫ ${errorCount}`, 
           successCount > 0 ? 'success' : (errorCount > 0 ? 'error' : 'info'));
    
    if (successCount > 0) {
      addLog('üéâ –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã —Å–æ–∑–¥–∞–Ω—ã! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ü–µ–Ω—ã', 'success');
    }
    
  } catch (error) {
    console.error('–û–±—â–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤:', error);
    addLog(`‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'error');
  }
}}>
  üí∞ –°–æ–∑–¥–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã
</Button>

<Button size="sm" variant="outline" onClick={async () => {
  addLog('üí∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã...', 'info');
  
  try {
    const ratePlans = await channexService.getRatePlans();
    
    if (ratePlans.data && ratePlans.data.length > 0) {
      addLog(`üí∞ –ù–∞–π–¥–µ–Ω–æ —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤: ${ratePlans.data.length}`, 'success');
      
      ratePlans.data.forEach((ratePlan, index) => {
        const attrs = ratePlan.attributes;
        addLog(`${index + 1}. ${attrs.title} (${attrs.sell_mode}, ${attrs.currency})`, 'info');
      });
    } else {
      addLog('üí∞ –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'warning');
    }
    
    console.log('–ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ rate plans:', ratePlans);
    
  } catch (error) {
    addLog(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è rate plans: ${error.message}`, 'error');
    console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
  }
}}>
  üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞—Ä–∏—Ñ—ã
</Button>

// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏ –≤ ChannexSyncManager.jsx —Ä—è–¥–æ–º —Å –¥—Ä—É–≥–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏:

{/* –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã –Ω–∞ USD */}
<Button size="sm" variant="outline" onClick={async () => {
  addLog('üí± –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞–ª—é—Ç—É —Ç–∞—Ä–∏—Ñ–æ–≤ –Ω–∞ USD...', 'info');
  
  try {
    const ratePlans = await channexService.getRatePlans();
    
    if (ratePlans.data && ratePlans.data.length > 0) {
      addLog(`üí∞ –ù–∞–π–¥–µ–Ω–æ ${ratePlans.data.length} —Ç–∞—Ä–∏—Ñ–æ–≤`, 'info');
      
      let updated = 0;
      for (const ratePlan of ratePlans.data) {
        try {
          // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª—è–º (Channex –∏—Å–ø–æ–ª—å–∑—É–µ—Ç attributes)
          const title = ratePlan.attributes?.title || ratePlan.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ';
          const currency = ratePlan.attributes?.currency || ratePlan.currency;
          const id = ratePlan.attributes?.id || ratePlan.id;
          
          console.log('üîç Rate Plan –¥–∞–Ω–Ω—ã–µ:', { id, title, currency });
          
          if (currency !== 'USD') {
            await channexService.updateRatePlanCurrency(id, 'USD');
            addLog(`‚úÖ –í–∞–ª—é—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è "${title}"`, 'success');
            updated++;
          } else {
            addLog(`üíµ "${title}" —É–∂–µ –≤ USD`, 'info');
          }
        } catch (error) {
          const title = ratePlan.attributes?.title || ratePlan.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ';
          addLog(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã –¥–ª—è "${title}": ${error.message}`, 'error');
        }
      }
      
      addLog(`üéâ –í–∞–ª—é—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${updated} —Ç–∞—Ä–∏—Ñ–æ–≤ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –Ω–∞ USD!`, 'success');
    } else {
      addLog('‚ùå –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'error');
    }
  } catch (error) {
    addLog(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã: ${error.message}`, 'error');
  }
}}>
  üí± –í–∞–ª—é—Ç–∞ ‚Üí USD
</Button>

{/* –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö —Ü–µ–Ω –Ω–∞ –º–µ—Å—è—Ü */}
<Button size="sm" variant="outline" onClick={async () => {
  addLog('üíµ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü...', 'info');
  
  try {
    const ratePlans = await channexService.getRatePlans();
    const today = new Date();
    const nextMonth = new Date(today.getFullYear(), today.getMonth() + 1, 1);
    const endMonth = new Date(today.getFullYear(), today.getMonth() + 2, 0);
    
    const dateFrom = nextMonth.toISOString().split('T')[0];
    const dateTo = endMonth.toISOString().split('T')[0];
    
    // –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã –≤ USD –ø–æ —Ç–∏–ø–∞–º –Ω–æ–º–µ—Ä–æ–≤
    const basePrices = {
      '—Å—Ç–∞–Ω–¥–∞—Ä—Ç': 120,
      'standard': 120,
      'deluxe': 180,
      '–ª—é–∫—Å': 250,
      'suite': 280,
      'family': 200
    };
    
    let pricesSet = 0;
    for (const ratePlan of ratePlans.data || []) {
      try {
        // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª—è–º
        const title = ratePlan.attributes?.title || ratePlan.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ';
        const id = ratePlan.attributes?.id || ratePlan.id;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –Ω–æ–º–µ—Ä–∞
        let price = 150; // –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const titleLower = title.toLowerCase();
        
        for (const [type, typePrice] of Object.entries(basePrices)) {
          if (titleLower.includes(type)) {
            price = typePrice;
            break;
          }
        }
        
        await channexService.setRates(id, dateFrom, dateTo, [
          { occupancy: 2, rate: price }
        ]);
        
        addLog(`‚úÖ –¶–µ–Ω–∞ ${price} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è "${title}"`, 'success');
        pricesSet++;
      } catch (error) {
        const title = ratePlan.attributes?.title || ratePlan.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ';
        addLog(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω—ã –¥–ª—è "${title}": ${error.message}`, 'error');
      }
    }
    
    addLog(`üéâ –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: ${pricesSet} —Ç–∞—Ä–∏—Ñ–æ–≤ –Ω–∞ –ø–µ—Ä–∏–æ–¥ ${dateFrom} - ${dateTo}`, 'success');
  } catch (error) {
    addLog(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω: ${error.message}`, 'error');
  }
}}>
  üíµ –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã –Ω–∞ –º–µ—Å—è—Ü
</Button>

{/* –ë—ã—Å—Ç—Ä–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞ */}
<Button size="sm" variant="outline" onClick={async () => {
  addLog('‚ö° –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞...', 'info');
  
  try {
    const ratePlans = await channexService.getRatePlans();
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    const tomorrowStr = tomorrow.toISOString().split('T')[0];
    
    // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (demand-based pricing)
    const tomorrowPrices = {
      '—Å—Ç–∞–Ω–¥–∞—Ä—Ç': 140,
      'standard': 140,
      'deluxe': 200,
      '–ª—é–∫—Å': 280,
      'suite': 320,
      'family': 220
    };
    
    let pricesSet = 0;
    for (const ratePlan of ratePlans.data || []) {
      try {
        // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª—è–º
        const title = ratePlan.attributes?.title || ratePlan.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ';
        const id = ratePlan.attributes?.id || ratePlan.id;
        
        let price = 170; // –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const titleLower = title.toLowerCase();
        
        for (const [type, typePrice] of Object.entries(tomorrowPrices)) {
          if (titleLower.includes(type)) {
            price = typePrice;
            break;
          }
        }
        
        await channexService.setRates(id, tomorrowStr, tomorrowStr, [
          { occupancy: 2, rate: price }
        ]);
        
        addLog(`‚ö° –¶–µ–Ω–∞ ${price} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è "${title}"`, 'success');
        pricesSet++;
      } catch (error) {
        const title = ratePlan.attributes?.title || ratePlan.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ';
        addLog(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω—ã –¥–ª—è "${title}": ${error.message}`, 'error');
      }
    }
    
    addLog(`üéâ –¶–µ–Ω—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (${tomorrowStr}) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: ${pricesSet} —Ç–∞—Ä–∏—Ñ–æ–≤`, 'success');
  } catch (error) {
    addLog(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞: ${error.message}`, 'error');
  }
}}>
  ‚ö° –¶–µ–Ω—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞
</Button>

{/* –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω */}
<Button size="sm" variant="outline" onClick={async () => {
  addLog('üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã...', 'info');
  
  try {
    const today = new Date().toISOString().split('T')[0];
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    const tomorrowStr = tomorrow.toISOString().split('T')[0];
    
    // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ Availability & Rates API
    const restrictions = await channexService.apiRequest(
      `/restrictions?filter[property_id]=${channexService.propertyId}&filter[date][gte]=${today}&filter[date][lte]=${tomorrowStr}&filter[restrictions]=rate`
    );
    
    if (restrictions && Object.keys(restrictions).length > 0) {
      addLog('üìä –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã:', 'info');
      
      Object.entries(restrictions).forEach(([ratePlanId, dates]) => {
        Object.entries(dates).forEach(([date, data]) => {
          if (data.rate) {
            addLog(`üí∞ ${date}: $${data.rate} (Rate Plan: ${ratePlanId.slice(0, 8)}...)`, 'info');
          }
        });
      });
    } else {
      addLog('üìä –¶–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã', 'info');
    }
  } catch (error) {
    addLog(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω: ${error.message}`, 'error');
  }
}}>
  üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—ã
</Button>

<Button size="sm" variant="outline" onClick={async () => {
  addLog('üè® –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞–ª—é—Ç—É property –Ω–∞ USD...', 'info');
  
  try {
    await channexService.updatePropertyCurrency('USD');
    addLog('‚úÖ –í–∞–ª—é—Ç–∞ property –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ USD!', 'success');
    addLog('üìå –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å —Å—Ç–∞—Ä—ã–µ —Ç–∞—Ä–∏—Ñ—ã', 'info');
  } catch (error) {
    addLog(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã property: ${error.message}`, 'error');
  }
}}>
  üè® 1Ô∏è‚É£ Property ‚Üí USD
</Button>

{/* –®–∞–≥ 2: –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö rate plans */}
<Button size="sm" variant="destructive" onClick={async () => {
  addLog('üóëÔ∏è –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã...', 'info');
  
  try {
    const ratePlans = await channexService.getRatePlans();
    
    if (ratePlans.data && ratePlans.data.length > 0) {
      addLog(`üóëÔ∏è –ù–∞–π–¥–µ–Ω–æ ${ratePlans.data.length} —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è`, 'info');
      
      let deleted = 0;
      for (const ratePlan of ratePlans.data) {
        try {
          const title = ratePlan.attributes?.title || ratePlan.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ';
          const id = ratePlan.attributes?.id || ratePlan.id;
          
          await channexService.deleteRatePlan(id);
          addLog(`üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ç–∞—Ä–∏—Ñ "${title}"`, 'success');
          deleted++;
        } catch (error) {
          const title = ratePlan.attributes?.title || ratePlan.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ';
          addLog(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞ "${title}": ${error.message}`, 'error');
        }
      }
      
      addLog(`üéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ ${deleted} —Ç–∞—Ä–∏—Ñ–æ–≤`, 'success');
      addLog('üìå –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ç–∞—Ä–∏—Ñ—ã –≤ USD', 'info');
    } else {
      addLog('üì≠ –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'info');
    }
  } catch (error) {
    addLog(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤: ${error.message}`, 'error');
  }
}}>
  üóëÔ∏è 2Ô∏è‚É£ –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã
</Button>

{/* –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö rate plans –≤ USD */}
<Button size="sm" variant="default" onClick={async () => {
  addLog('üí∞ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã –≤ USD...', 'info');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ room types
    const roomTypes = await channexService.getRoomTypes();
    
    if (!roomTypes.data || roomTypes.data.length === 0) {
      addLog('‚ùå –¢–∏–ø—ã –∫–æ–º–Ω–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–Ω–∞—Ç—ã.', 'error');
      return;
    }
    
    addLog(`üè† –ù–∞–π–¥–µ–Ω–æ —Ç–∏–ø–æ–≤ –∫–æ–º–Ω–∞—Ç: ${roomTypes.data.length}`, 'info');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ rate plans
    const existingRatePlans = await channexService.getRatePlans();
    addLog(`üí∞ –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–∞—Ä–∏—Ñ–æ–≤: ${existingRatePlans.data?.length || 0}`, 'info');
    
    let created = 0;
    let errors = 0;
    
    for (const roomType of roomTypes.data) {
      try {
        const roomTitle = roomType.attributes?.title || roomType.title || 'Unknown Room';
        const roomId = roomType.attributes?.id || roomType.id;
        
        addLog(`üí∞ –°–æ–∑–¥–∞–µ–º —Ç–∞—Ä–∏—Ñ –¥–ª—è: ${roomTitle}...`, 'info');
        
        const rateData = {
          name: `${roomTitle} - Standard Rate`,
          price: 150 // –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –≤ USD
        };
        
        const result = await channexService.createRatePlan(roomId, rateData);
        
        if (result.data && result.data.id) {
          const newRatePlanId = result.data.id;
          addLog(`‚úÖ –°–æ–∑–¥–∞–Ω —Ç–∞—Ä–∏—Ñ –¥–ª—è "${roomTitle}" (ID: ${newRatePlanId})`, 'success');
          created++;
        } else {
          addLog(`‚ö†Ô∏è –¢–∞—Ä–∏—Ñ —Å–æ–∑–¥–∞–Ω, –Ω–æ ID –Ω–µ –ø–æ–ª—É—á–µ–Ω –¥–ª—è "${roomTitle}"`, 'warning');
          created++;
        }
        
      } catch (error) {
        const roomTitle = roomType.attributes?.title || roomType.title || 'Unknown Room';
        addLog(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è "${roomTitle}": ${error.message}`, 'error');
        errors++;
      }
    }
    
    addLog(`üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤: –°–æ–∑–¥–∞–Ω–æ ${created}, –û—à–∏–±–æ–∫ ${errors}`, 'info');
    
    if (created > 0) {
      addLog('üéâ –ù–æ–≤—ã–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã –≤ USD —Å–æ–∑–¥–∞–Ω—ã! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ü–µ–Ω—ã', 'success');
    }
    
  } catch (error) {
    addLog(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤: ${error.message}`, 'error');
  }
}}>
  üí∞ 3Ô∏è‚É£ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ —Ç–∞—Ä–∏—Ñ—ã USD
</Button>

{/* –ö–Ω–æ–ø–∫–∞ "–í—Å–µ –≤ –æ–¥–Ω–æ–º" - –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å */}
<Button size="sm" variant="default" className="bg-green-600 hover:bg-green-700" onClick={async () => {
  addLog('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤...', 'info');
  
  try {
    // –®–∞–≥ 1: –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞–ª—é—Ç—É property
    addLog('üè® –®–∞–≥ 1: –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞–ª—é—Ç—É property...', 'info');
    await channexService.updatePropertyCurrency('USD');
    addLog('‚úÖ –í–∞–ª—é—Ç–∞ property –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ USD', 'success');
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // –®–∞–≥ 2: –£–¥–∞–ª—è–µ–º –≤—Å–µ rate plans
    addLog('üóëÔ∏è –®–∞–≥ 2: –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∞—Ä–∏—Ñ—ã...', 'info');
    const ratePlans = await channexService.getRatePlans();
    
    if (ratePlans.data && ratePlans.data.length > 0) {
      for (const ratePlan of ratePlans.data) {
        const title = ratePlan.attributes?.title || ratePlan.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ';
        const id = ratePlan.attributes?.id || ratePlan.id;
        
        await channexService.deleteRatePlan(id);
        addLog(`üóëÔ∏è –£–¥–∞–ª–µ–Ω: "${title}"`, 'success');
      }
    }
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // –®–∞–≥ 3: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ rate plans
    addLog('üí∞ –®–∞–≥ 3: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ç–∞—Ä–∏—Ñ—ã –≤ USD...', 'info');
    const roomTypes = await channexService.getRoomTypes();
    
    if (!roomTypes.data || roomTypes.data.length === 0) {
      addLog('‚ùå –¢–∏–ø—ã –∫–æ–º–Ω–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'error');
      return;
    }
    
    let created = 0;
    for (const roomType of roomTypes.data) {
      const roomTitle = roomType.attributes?.title || roomType.title || 'Unknown Room';
      const roomId = roomType.attributes?.id || roomType.id;
      
      const rateData = {
        name: `${roomTitle} - Standard Rate`,
        price: 150 // –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –≤ USD
      };
      
      await channexService.createRatePlan(roomId, rateData);
      addLog(`‚úÖ –°–æ–∑–¥–∞–Ω —Ç–∞—Ä–∏—Ñ: "${roomTitle}"`, 'success');
      created++;
    }
    
    addLog(`üéâ –ì–û–¢–û–í–û! –°–æ–∑–¥–∞–Ω–æ ${created} –Ω–æ–≤—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –≤ USD`, 'success');
    addLog('üíµ –¢–µ–ø–µ—Ä—å –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!', 'success');
    
  } catch (error) {
    addLog(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏: ${error.message}`, 'error');
  }
}}>
  üöÄ –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê + USD
</Button>

<Button size="sm" variant="outline" onClick={async () => {
  addLog('üí± –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞–ª—é—Ç—É —Ç–∞—Ä–∏—Ñ–æ–≤ –Ω–∞ USD...', 'info');
  
  try {
    const ratePlans = await channexService.getRatePlans();
    
    if (ratePlans.data && ratePlans.data.length > 0) {
      addLog(`üí∞ –ù–∞–π–¥–µ–Ω–æ ${ratePlans.data.length} —Ç–∞—Ä–∏—Ñ–æ–≤`, 'info');
      
      let updated = 0;
      for (const ratePlan of ratePlans.data) {
        try {
          // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª—è–º (Channex –∏—Å–ø–æ–ª—å–∑—É–µ—Ç attributes)
          const title = ratePlan.attributes?.title || ratePlan.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ';
          const currency = ratePlan.attributes?.currency || ratePlan.currency;
          const id = ratePlan.attributes?.id || ratePlan.id;
          
          console.log('üîç Rate Plan –¥–∞–Ω–Ω—ã–µ:', { id, title, currency });
          
          if (currency !== 'USD') {
            await channexService.updateRatePlanCurrency(id, 'USD');
            addLog(`‚úÖ –í–∞–ª—é—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è "${title}"`, 'success');
            updated++;
          } else {
            addLog(`üíµ "${title}" —É–∂–µ –≤ USD`, 'info');
          }
        } catch (error) {
          const title = ratePlan.attributes?.title || ratePlan.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ';
          addLog(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã –¥–ª—è "${title}": ${error.message}`, 'error');
        }
      }
      
      addLog(`üéâ –í–∞–ª—é—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${updated} —Ç–∞—Ä–∏—Ñ–æ–≤ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –Ω–∞ USD!`, 'success');
    } else {
      addLog('‚ùå –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'error');
    }
  } catch (error) {
    addLog(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã: ${error.message}`, 'error');
  }
}}>
  üí± –í–∞–ª—é—Ç–∞ ‚Üí USD
</Button>

{/* –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö —Ü–µ–Ω –Ω–∞ –º–µ—Å—è—Ü */}
<Button size="sm" variant="outline" onClick={async () => {
  addLog('üíµ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü...', 'info');
  
  try {
    const ratePlans = await channexService.getRatePlans();
    const today = new Date();
    const nextMonth = new Date(today.getFullYear(), today.getMonth() + 1, 1);
    const endMonth = new Date(today.getFullYear(), today.getMonth() + 2, 0);
    
    const dateFrom = nextMonth.toISOString().split('T')[0];
    const dateTo = endMonth.toISOString().split('T')[0];
    
    // –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã –≤ USD –ø–æ —Ç–∏–ø–∞–º –Ω–æ–º–µ—Ä–æ–≤
    const basePrices = {
      '—Å—Ç–∞–Ω–¥–∞—Ä—Ç': 120,
      'standard': 120,
      'deluxe': 180,
      '–ª—é–∫—Å': 250,
      'suite': 280,
      'family': 200
    };
    
    let pricesSet = 0;
    for (const ratePlan of ratePlans.data || []) {
      try {
        // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª—è–º
        const title = ratePlan.attributes?.title || ratePlan.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ';
        const id = ratePlan.attributes?.id || ratePlan.id;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –Ω–æ–º–µ—Ä–∞
        let price = 150; // –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const titleLower = title.toLowerCase();
        
        for (const [type, typePrice] of Object.entries(basePrices)) {
          if (titleLower.includes(type)) {
            price = typePrice;
            break;
          }
        }
        
        await channexService.setRates(id, dateFrom, dateTo, [
          { occupancy: 2, rate: price } // –ü–µ—Ä–µ–¥–∞–µ–º —Ü–µ–Ω—É –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö, –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Ü–µ–Ω—Ç—ã –≤ –º–µ—Ç–æ–¥–µ
        ]);
        
        addLog(`‚úÖ –¶–µ–Ω–∞ ${price} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è "${title}"`, 'success');
        pricesSet++;
      } catch (error) {
        const title = ratePlan.attributes?.title || ratePlan.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ';
        addLog(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω—ã –¥–ª—è "${title}": ${error.message}`, 'error');
      }
    }
    
    addLog(`üéâ –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: ${pricesSet} —Ç–∞—Ä–∏—Ñ–æ–≤ –Ω–∞ –ø–µ—Ä–∏–æ–¥ ${dateFrom} - ${dateTo}`, 'success');
  } catch (error) {
    addLog(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω: ${error.message}`, 'error');
  }
}}>
  üíµ –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã –Ω–∞ –º–µ—Å—è—Ü
</Button>

{/* –ë—ã—Å—Ç—Ä–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞ */}
<Button size="sm" variant="outline" onClick={async () => {
  addLog('‚ö° –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞...', 'info');
  
  try {
    const ratePlans = await channexService.getRatePlans();
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    const tomorrowStr = tomorrow.toISOString().split('T')[0];
    
    // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (demand-based pricing)
    const tomorrowPrices = {
      '—Å—Ç–∞–Ω–¥–∞—Ä—Ç': 140,
      'standard': 140,
      'deluxe': 200,
      '–ª—é–∫—Å': 280,
      'suite': 320,
      'family': 220
    };
    
    let pricesSet = 0;
    for (const ratePlan of ratePlans.data || []) {
      try {
        // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª—è–º
        const title = ratePlan.attributes?.title || ratePlan.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ';
        const id = ratePlan.attributes?.id || ratePlan.id;
        
        let price = 170; // –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const titleLower = title.toLowerCase();
        
        for (const [type, typePrice] of Object.entries(tomorrowPrices)) {
          if (titleLower.includes(type)) {
            price = typePrice;
            break;
          }
        }
        
        await channexService.setRates(id, tomorrowStr, tomorrowStr, [
          { occupancy: 2, rate: price }
        ]);
        
        addLog(`‚ö° –¶–µ–Ω–∞ ${price} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è "${title}"`, 'success');
        pricesSet++;
      } catch (error) {
        const title = ratePlan.attributes?.title || ratePlan.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ';
        addLog(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω—ã –¥–ª—è "${title}": ${error.message}`, 'error');
      }
    }
    
    addLog(`üéâ –¶–µ–Ω—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (${tomorrowStr}) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: ${pricesSet} —Ç–∞—Ä–∏—Ñ–æ–≤`, 'success');
  } catch (error) {
    addLog(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞: ${error.message}`, 'error');
  }
}}>
  ‚ö° –¶–µ–Ω—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞
</Button>

{/* –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω */}
<Button size="sm" variant="outline" onClick={async () => {
  addLog('üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã...', 'info');
  
  try {
    const today = new Date().toISOString().split('T')[0];
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    const tomorrowStr = tomorrow.toISOString().split('T')[0];
    
    // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ Availability & Rates API
    const restrictions = await channexService.apiRequest(
      `/restrictions?filter[property_id]=${channexService.propertyId}&filter[date][gte]=${today}&filter[date][lte]=${tomorrowStr}&filter[restrictions]=rate`
    );
    
    if (restrictions && Object.keys(restrictions).length > 0) {
      addLog('üìä –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã:', 'info');
      
      Object.entries(restrictions).forEach(([ratePlanId, dates]) => {
        Object.entries(dates).forEach(([date, data]) => {
          if (data.rate) {
            addLog(`üí∞ ${date}: $${data.rate} (Rate Plan: ${ratePlanId.slice(0, 8)}...)`, 'info');
          }
        });
      });
    } else {
      addLog('üìä –¶–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã', 'info');
    }
  } catch (error) {
    addLog(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω: ${error.message}`, 'error');
  }
}}>
  üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—ã
</Button>

<Button size="sm" variant="default" className="bg-blue-600 hover:bg-blue-700" onClick={async () => {
  addLog('üîÑ –ü–†–ê–í–ò–õ–¨–ù–û–ï –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ: Property USD ‚Üí –£–¥–∞–ª–µ–Ω–∏–µ ‚Üí –°–æ–∑–¥–∞–Ω–∏–µ', 'info');
  
  try {
    // –®–ê–ì 1: –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞–ª—é—Ç—É property –°–ù–ê–ß–ê–õ–ê
    addLog('üè® –®–∞–≥ 1/3: –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞–ª—é—Ç—É property –Ω–∞ USD...', 'info');
    await channexService.updatePropertyCurrency('USD');
    addLog('‚úÖ Property —Ç–µ–ø–µ—Ä—å –≤ USD!', 'success');
    
    // –ü–∞—É–∑–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –®–ê–ì 2: –£–¥–∞–ª—è–µ–º –≤—Å–µ rate plans
    addLog('üóëÔ∏è –®–∞–≥ 2/3: –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∞—Ä–∏—Ñ—ã –≤ RUB...', 'info');
    const ratePlans = await channexService.getRatePlans();
    
    if (ratePlans.data && ratePlans.data.length > 0) {
      for (const ratePlan of ratePlans.data) {
        const title = ratePlan.attributes?.title || ratePlan.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ';
        const id = ratePlan.attributes?.id || ratePlan.id;
        
        await channexService.deleteRatePlan(id);
        addLog(`üóëÔ∏è –£–¥–∞–ª–µ–Ω: "${title}"`, 'success');
      }
    }
    
    // –ü–∞—É–∑–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –®–ê–ì 3: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ rate plans (—Ç–µ–ø–µ—Ä—å –æ–Ω–∏ –±—É–¥—É—Ç –≤ USD!)
    addLog('üí∞ –®–∞–≥ 3/3: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ç–∞—Ä–∏—Ñ—ã –≤ USD...', 'info');
    const roomTypes = await channexService.getRoomTypes();
    
    if (!roomTypes.data || roomTypes.data.length === 0) {
      addLog('‚ùå –¢–∏–ø—ã –∫–æ–º–Ω–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'error');
      return;
    }
    
    let created = 0;
    for (const roomType of roomTypes.data) {
      const roomTitle = roomType.attributes?.title || roomType.title || 'Unknown Room';
      const roomId = roomType.attributes?.id || roomType.id;
      
      const rateData = {
        name: `${roomTitle} - Standard Rate`,
        price: 150 // –í USD
      };
      
      await channexService.createRatePlan(roomId, rateData);
      addLog(`‚úÖ –°–æ–∑–¥–∞–Ω USD —Ç–∞—Ä–∏—Ñ: "${roomTitle}"`, 'success');
      created++;
    }
    
    addLog(`üéâ –ì–û–¢–û–í–û! –°–æ–∑–¥–∞–Ω–æ ${created} —Ç–∞—Ä–∏—Ñ–æ–≤ –≤ USD`, 'success');
    addLog('üí° –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ Channex - –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å USD!', 'info');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã
    addLog('üíµ –ë–æ–Ω—É—Å: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã...', 'info');
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    const newRatePlans = await channexService.getRatePlans();
    const today = new Date();
    const nextMonth = new Date(today.getFullYear(), today.getMonth() + 1, 1);
    const endMonth = new Date(today.getFullYear(), today.getMonth() + 2, 0);
    
    const dateFrom = nextMonth.toISOString().split('T')[0];
    const dateTo = endMonth.toISOString().split('T')[0];
    
    for (const ratePlan of newRatePlans.data || []) {
      const title = ratePlan.attributes?.title || ratePlan.title || 'Unknown';
      const id = ratePlan.attributes?.id || ratePlan.id;
      
      await channexService.setRates(id, dateFrom, dateTo, [
        { occupancy: 2, rate: 150 }
      ]);
      
      addLog(`üíµ –¶–µ–Ω–∞ $150 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è "${title}"`, 'success');
    }
    
    addLog('üöÄ –í–°–ï –ì–û–¢–û–í–û! –¢–∞—Ä–∏—Ñ—ã –≤ USD —Å —Ü–µ–Ω–∞–º–∏ $150!', 'success');
    
  } catch (error) {
    addLog(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è: ${error.message}`, 'error');
  }
}}>
  üöÄ –ü–†–ê–í–ò–õ–¨–ù–û–ï –ü–ï–†–ï–°–û–ó–î–ê–ù–ò–ï USD
</Button>

<Button size="sm" variant="outline" onClick={async () => {
  addLog('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã —Å –æ—Ç–ª–∞–¥–∫–æ–π...', 'info');
  
  try {
    // –ë–µ—Ä–µ–º –æ–¥–Ω—É –∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
    const { data: rooms } = await supabase.from('rooms').select('*');
    const testRoom = rooms?.find(r => r.room_number === '201' || r.name === '201');
    
    if (!testRoom) {
      addLog('‚ùå –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error');
      return;
    }
    
    addLog(`üè† –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–Ω–∞—Ç—É: ${JSON.stringify(testRoom)}`, 'info');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–ø–ø–∏–Ω–≥
    const roomKind = channexService.getRoomKind(testRoom.room_type);
    addLog(`üîß room_kind: "${roomKind}" (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'room' –∏–ª–∏ 'dorm')`, 'info');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–∏—Å—Ç–∫—É –Ω–∞–∑–≤–∞–Ω–∏—è
    const cleanTitle = channexService.cleanRoomTitle(testRoom.room_number || testRoom.name);
    addLog(`üßπ –û—á–∏—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: "${cleanTitle}"`, 'info');
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º payload
    const payload = {
      room_type: {
        title: cleanTitle,
        room_kind: roomKind,
        occ_adults: Math.min(testRoom.capacity || 2, 8),
        occ_children: 0,
        occ_infants: 0,
        default_occupancy: Math.min(testRoom.capacity || 2, 8),
        count_of_rooms: 1,
        property_id: channexService.propertyId,
        facilities: []
      }
    };
    
    addLog(`üì§ –§–∏–Ω–∞–ª—å–Ω—ã–π payload: ${JSON.stringify(payload, null, 2)}`, 'info');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
    const result = await channexService.createRoomType(testRoom);
    
    addLog(`‚úÖ –£—Å–ø–µ—Ö! ID: ${result.data.id}`, 'success');
    
  } catch (error) {
    console.error('–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    addLog(`‚ùå –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'error');
  }
}}>
  üß™ –û—Ç–ª–∞–¥–∫–∞ –æ–¥–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã
</Button>

<Button size="sm" variant="outline" onClick={async () => {
  addLog('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∏–ø—ã –∫–æ–º–Ω–∞—Ç –≤ Channex...', 'info');
  
  try {
    const roomTypes = await channexService.getRoomTypes();
    
    if (roomTypes.data && roomTypes.data.length > 0) {
      addLog(`üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∏–ø–æ–≤ –∫–æ–º–Ω–∞—Ç: ${roomTypes.data.length}`, 'success');
      
      roomTypes.data.forEach((room, index) => {
        addLog(`${index + 1}. ${room.attributes.title} (${room.attributes.room_kind})`, 'info');
      });
    } else {
      addLog('üìã –¢–∏–ø—ã –∫–æ–º–Ω–∞—Ç –≤ Channex –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'warning');
    }
    
    console.log('–ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ room types:', roomTypes);
    
  } catch (error) {
    addLog(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è room types: ${error.message}`, 'error');
    console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
  }
}}>
  üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏–ø—ã –∫–æ–º–Ω–∞—Ç
</Button>
  {/* Real-time toggle */}
  <div className="flex items-center justify-between p-3 border rounded-lg">
    <div>
      <h4 className="font-medium">Real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è</h4>
      <p className="text-sm text-slate-600">
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç + webhooks
      </p>
    </div>
    <div className="flex items-center gap-3">
      <Badge 
        variant={websocketStatus === 'connected' ? 'default' : 'secondary'}
        className="text-xs"
      >
        {websocketStatus === 'connected' ? 'üîó –ü–æ–¥–∫–ª—é—á–µ–Ω' : 'üîå –û—Ç–∫–ª—é—á–µ–Ω'}
      </Badge>
      <Button
        size="sm"
        variant={realTimeEnabled ? 'destructive' : 'default'}
        onClick={realTimeEnabled ? disableRealTimeSync : enableRealTimeSync}
        disabled={!syncStatus.isConnected}
      >
        {realTimeEnabled ? '–û—Ç–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å'}
      </Button>
    </div>
  </div>
</div>
          </div>
        </div>
      )}
    </div>
  );
}