import channexService from '@/services/channex/ChannexService';
import { supabase } from '@/lib/supabase';

/**
 * Webhook handler –¥–ª—è Channex
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –≤–µ–±—Ö—É–∫–∏ –æ—Ç Channex
 * 
 * URL –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤: https://yourdomain.com/api/channex/webhook
 */
export async function handleChannexWebhook(request) {
  console.log('üîî –ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ –æ—Ç Channex');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å (–≤ production –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!)
    const signature = request.headers.get('X-Channex-Signature');
    if (!verifyWebhookSignature(request.body, signature)) {
      return new Response('Invalid signature', { status: 401 });
    }
    
    const webhookData = await request.json();
    console.log('üì¶ –î–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞:', webhookData);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ–±—Ö—É–∫ –≤ –ë–î –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
    await logWebhook(webhookData);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    const result = await channexService.handleWebhook(webhookData);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç Channex
    return new Response(JSON.stringify({ 
      success: true, 
      message: 'Webhook processed',
      result 
    }), {
      status: 200,
      headers: { 'Content-Type': 'application/json' }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞:', error);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    await logWebhookError(error, request.body);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É (Channex –ø–æ–≤—Ç–æ—Ä–∏—Ç –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ)
    return new Response(JSON.stringify({ 
      success: false, 
      error: error.message 
    }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' }
    });
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –≤–µ–±—Ö—É–∫–∞
function verifyWebhookSignature(payload, signature) {
  // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É HMAC –ø–æ–¥–ø–∏—Å–∏
  // const expectedSignature = crypto
  //   .createHmac('sha256', process.env.CHANNEX_WEBHOOK_SECRET)
  //   .update(payload)
  //   .digest('hex');
  // return signature === expectedSignature;
  
  return true; // –í—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞ –≤ –ë–î
async function logWebhook(webhookData) {
  try {
    await supabase
      .from('channex_webhook_logs')
      .insert({
        event_type: webhookData.event_type,
        payload: webhookData,
        processed_at: new Date().toISOString()
      });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±—Ö—É–∫–∞:', error);
  }
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
async function logWebhookError(error, payload) {
  try {
    await supabase
      .from('channex_webhook_errors')
      .insert({
        error_message: error.message,
        error_stack: error.stack,
        payload: payload,
        occurred_at: new Date().toISOString()
      });
  } catch (logError) {
    console.error('–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏:', logError);
  }
}