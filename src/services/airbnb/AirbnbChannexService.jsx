import { supabase, supabaseAdmin } from '@/lib/supabase';
import airbnbMapping from '@/config/airbnb-mapping.json';

class AirbnbChannexService {
  constructor() {
    this.baseURL = import.meta.env.VITE_CHANNEX_API_URL || 'https://staging.channex.io/api/v1';
    this.apiKey = import.meta.env.VITE_CHANNEX_API_KEY;
    this.propertyId = import.meta.env.VITE_CHANNEX_PROPERTY_ID;
    this.airbnbConfig = airbnbMapping.airbnb_integration;
    
    console.log('üè† AirbnbChannexService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    console.log(`üìç Property ID: ${this.propertyId}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≤—Å–µ—Ö Airbnb –∫–æ–º–Ω–∞—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    const roomTitles = Object.values(this.airbnbConfig.room_mapping).map(room => room.airbnb_room_title);
    console.log(`üåè Airbnb –∫–æ–º–Ω–∞—Ç—ã: ${roomTitles.join(', ')}`);
  }

  /**
   * API –∑–∞–ø—Ä–æ—Å –∫ Channex
   */
  async apiRequest(endpoint, method = 'GET', data = null) {
    const url = `${this.baseURL}${endpoint}`;
    console.log(`üåê Airbnb API –∑–∞–ø—Ä–æ—Å: ${method} ${url}`);

    try {
      const options = {
        method,
        headers: {
          'user-api-key': this.apiKey,
          'Content-Type': 'application/json',
        },
      };

      if (data && ['POST', 'PUT', 'PATCH'].includes(method)) {
        options.body = JSON.stringify(data);
      }

      const response = await fetch(url, options);
      const responseText = await response.text();

      if (!response.ok) {
        console.error('‚ùå Airbnb API –æ—à–∏–±–∫–∞:', responseText);
        throw new Error(`API Error: ${response.status}`);
      }

      return responseText ? JSON.parse(responseText) : { success: true };
    } catch (error) {
      console.error('üí• Airbnb API Request Error:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥ –∫–æ–º–Ω–∞—Ç—ã –ø–æ —Ç–∏–ø—É
   */
  getRoomMapping(roomType) {
    const mapping = this.airbnbConfig.room_mapping[roomType];
    if (!mapping) {
      throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è Airbnb: ${roomType}`);
    }
    return mapping;
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å PMS –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç Channex –¥–ª—è Airbnb
   */
  convertToChannexFormat(pmsBooking) {
    console.log('üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PMS ‚Üí Channex (Airbnb)');
    
    const roomMapping = this.getRoomMapping(pmsBooking.room_type || 'standard_apartment');
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ –¥–Ω—è–º
    const checkIn = new Date(pmsBooking.check_in);
    const checkOut = new Date(pmsBooking.check_out);
    const nights = Math.ceil((checkOut - checkIn) / (1000 * 60 * 60 * 24));
    
    const days = {};
    for (let i = 0; i < nights; i++) {
      const currentDate = new Date(checkIn);
      currentDate.setDate(currentDate.getDate() + i);
      const dateStr = currentDate.toISOString().split('T')[0];
      days[dateStr] = roomMapping.base_price;
    }

    const channexBooking = {
      booking: {
        property_id: this.propertyId,
        ota_reservation_code: `AIRBNB-${pmsBooking.id || Date.now()}`,
        ota_name: 'Airbnb',
        arrival_date: pmsBooking.check_in,
        departure_date: pmsBooking.check_out,
        currency: this.airbnbConfig.base_currency,
        arrival_hour: this.airbnbConfig.airbnb_settings.check_in_time,
        
        customer: {
          name: pmsBooking.guest_first_name || 'Guest',
          surname: pmsBooking.guest_last_name || 'User',
          mail: pmsBooking.guest_email || 'guest@airbnb.com',
          phone: pmsBooking.guest_phone || '+1234567890',
          country: 'US',
          language: 'en'
        },
        
        rooms: [{
          room_type_id: roomMapping.channex_room_type_id,
          rate_plan_id: roomMapping.channex_rate_plan_id,
          days: days,
          occupancy: {
            adults: pmsBooking.adults || 2,
            children: pmsBooking.children || 0,
            infants: 0
          },
          guests: [{
            name: pmsBooking.guest_first_name || 'Guest',
            surname: pmsBooking.guest_last_name || 'User'
          }]
        }],
        
        services: [],
        notes: `Airbnb –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - ${roomMapping.airbnb_room_title}`,
        
        meta: {
          source: 'Airbnb',
          airbnb_room_title: roomMapping.airbnb_room_title,
          pms_room_number: roomMapping.pms_room_number,
          test: pmsBooking.test || false
        }
      }
    };

    console.log('‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', {
      room: roomMapping.airbnb_room_title,
      guest: `${pmsBooking.guest_first_name} ${pmsBooking.guest_last_name}`,
      dates: `${pmsBooking.check_in} - ${pmsBooking.check_out}`,
      total: `$${parseInt(roomMapping.base_price) * nights}`
    });

    return channexBooking;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å room_id –ø–æ –Ω–æ–º–µ—Ä—É –∫–æ–º–Ω–∞—Ç—ã –∏–∑ PMS
   */
  async getRoomIdByNumber(roomNumber) {
    console.log('üè† –ò—â–µ–º room_id –¥–ª—è –Ω–æ–º–µ—Ä–∞:', roomNumber);
    
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é room_number
      const { data: exactMatch, error: exactError } = await supabase
        .from('rooms')
        .select('id, room_number, room_type')
        .eq('room_number', roomNumber)
        .single();
      
      if (!exactError && exactMatch) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:', exactMatch.room_number, 'ID:', exactMatch.id);
        return exactMatch.id;
      }
      
      // –ï—Å–ª–∏ roomNumber —ç—Ç–æ "Standard Room", "Deluxe Room" –∏–ª–∏ "Suite"
      // –ò—â–µ–º –ø–æ room_type
      let roomType = null;
      if (roomNumber === 'Standard Room') {
        roomType = 'Standard';
      } else if (roomNumber === 'Deluxe Room') {
        roomType = 'Deluxe';
      } else if (roomNumber === 'Suite') {
        roomType = 'Suite';
      }
      
      if (roomType) {
        const { data: typeMatch, error: typeError } = await supabase
          .from('rooms')
          .select('id, room_number, room_type')
          .eq('room_type', roomType)
          .single();
        
        if (!typeError && typeMatch) {
          console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ —Ç–∏–ø—É:', typeMatch.room_type, '–ù–æ–º–µ—Ä:', typeMatch.room_number, 'ID:', typeMatch.id);
          return typeMatch.id;
        }
      }
      
      console.log('‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è:', roomNumber);
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç—ã:', error);
      return null;
    }
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å Channex –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç PMS
   */
  async convertToPMSFormat(channexBooking, originalBooking = null) {
    console.log('üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Channex ‚Üí PMS (Airbnb)');
    console.log('üìã Channex –¥–∞–Ω–Ω—ã–µ:', channexBooking);
    
    const attrs = channexBooking.attributes;
    const room = attrs.rooms?.[0];
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    let arrival = attrs.arrival_date || room?.checkin_date || room?.days ? Object.keys(room.days)[0] : null;
    let departure = attrs.departure_date || room?.checkout_date;
    
    // –ï—Å–ª–∏ –Ω–µ—Ç departure, –≤—ã—á–∏—Å–ª—è–µ–º –∏–∑ room.days (–¥–æ–±–∞–≤–ª—è–µ–º –æ–¥–∏–Ω –¥–µ–Ω—å –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–∞—Ç–µ)
    if (!departure && room?.days) {
      const dayKeys = Object.keys(room.days).sort();
      if (dayKeys.length > 0) {
        const lastDay = new Date(dayKeys[dayKeys.length - 1]);
        lastDay.setDate(lastDay.getDate() + 1);
        departure = lastDay.toISOString().split('T')[0];
      }
    }
    
    // Fallback –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –µ—Å–ª–∏ Channex –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –¥–∞—Ç—ã
    if (!arrival && originalBooking?.check_in) {
      arrival = originalBooking.check_in;
      console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã:', arrival);
    }
    if (!departure && originalBooking?.check_out) {
      departure = originalBooking.check_out;
      console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã:', departure);
    }
    
    console.log('üìÖ –î–∞—Ç—ã:', { 
      arrival: arrival, 
      departure: departure,
      from_attrs: { arrival_date: attrs.arrival_date, departure_date: attrs.departure_date },
      from_room: { checkin_date: room?.checkin_date, checkout_date: room?.checkout_date },
      room_days: room?.days ? Object.keys(room.days) : null
    });
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–º–Ω–∞—Ç—ã —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º originalBooking.room_type
    let roomType = originalBooking?.room_type || 'standard_room';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –∫–ª—é—á –≤ –º–∞–ø–ø–∏–Ω–≥–µ
    if (!this.airbnbConfig.room_mapping[roomType]) {
      console.log('‚ö†Ô∏è –¢–∏–ø –∫–æ–º–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞–ø–ø–∏–Ω–≥–µ:', roomType);
      console.log('   –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã:', Object.keys(this.airbnbConfig.room_mapping));
      // Fallback –Ω–∞ standard_room
      roomType = 'standard_room';
    }
    
    let roomMapping = this.airbnbConfig.room_mapping[roomType];
    
    console.log('üè† –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–º–Ω–∞—Ç—ã:', {
      original_room_type: originalBooking?.room_type,
      room_type_id: room?.room_type_id,
      selected_room_type: roomType,
      pms_room_number: roomMapping.pms_room_number,
      channex_room_type_id: roomMapping.channex_room_type_id
    });
    
    // –ï—Å–ª–∏ –Ω–µ—Ç originalBooking.room_type, –∏—â–µ–º –ø–æ room_type_id
    if (!originalBooking?.room_type) {
      for (const [type, mapping] of Object.entries(this.airbnbConfig.room_mapping)) {
        if (room?.room_type_id === mapping.channex_room_type_id) {
          roomType = type;
          roomMapping = mapping;
          break;
        }
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º room_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–æ–º–µ—Ä—É –∫–æ–º–Ω–∞—Ç—ã
    const roomId = await this.getRoomIdByNumber(roomMapping.pms_room_number);

    const pmsBooking = {
      id: channexBooking.id,
      channel: 'airbnb',
      source: 'Airbnb', // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ Airbnb —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
      ota_reservation_code: attrs.ota_reservation_code,
      
      check_in: arrival,
      check_out: departure,
      
      // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Å—Ç—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      guest_first_name: (() => {
        const original = originalBooking?.guest_first_name;
        const channex = attrs.customer?.name;
        const result = original || channex || 'Guest';
        console.log('üë§ guest_first_name:', { original, channex, result });
        return result;
      })(),
      guest_last_name: (() => {
        const original = originalBooking?.guest_last_name; 
        const channex = attrs.customer?.surname;
        const result = original || channex || 'User';
        console.log('üë§ guest_last_name:', { original, channex, result });
        return result;
      })(),
      guest_email: (() => {
        const original = originalBooking?.guest_email;
        const channex = attrs.customer?.mail;
        const result = original || channex || '';
        console.log('üìß guest_email:', { original, channex, result });
        return result;
      })(),
      guest_phone: (() => {
        const original = originalBooking?.guest_phone;
        const channex = attrs.customer?.phone;  
        const result = original || channex || '';
        console.log('üìû guest_phone:', { original, channex, result });
        return result;
      })(),
      
      room_id: roomId, // ‚ú® –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π room_id
      room_type: roomType,
      room_number: roomMapping.pms_room_number,
      room_title: roomMapping.airbnb_room_title,
      
      adults: room?.occupancy?.adults || 2,
      children: room?.occupancy?.children || 0,
      
      // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      total_amount: (() => {
        const roomAmount = room?.amount;
        const attrsAmount = attrs.amount;
        const totalPrice = attrs.total_price; 
        const originalAmount = originalBooking?.total_amount;
        const originalTotalPrice = originalBooking?.total_price;
        
        // –í—ã—á–∏—Å–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –µ—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        const nights = Math.ceil((new Date(departure) - new Date(arrival)) / (1000 * 60 * 60 * 24));
        const calculatedAmount = parseFloat(roomMapping.base_price) * nights;
        
        const result = parseFloat(originalAmount || originalTotalPrice || roomAmount || attrsAmount || totalPrice || calculatedAmount || '0');
        console.log('üí∞ total_amount:', { 
          originalAmount,
          originalTotalPrice,
          roomAmount, 
          attrsAmount, 
          totalPrice,
          calculatedAmount,
          nights,
          base_price: roomMapping.base_price,
          result 
        });
        return result;
      })(),
      currency: (() => {
        const result = attrs.currency || 'USD';
        console.log('üí± currency:', { attrs_currency: attrs.currency, result });
        return result;
      })(),
      status: 'confirmed',
      
      notes: attrs.notes || '',
      airbnb_meta: attrs.meta || {},

      // –î–æ–±–∞–≤–ª—è–µ–º guests –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å UI
      guests: {
        full_name: `${originalBooking?.guest_first_name || attrs.customer?.name || 'Guest'} ${originalBooking?.guest_last_name || attrs.customer?.surname || 'User'}`.trim(),
        email: originalBooking?.guest_email || attrs.customer?.mail || '',
        phone: originalBooking?.guest_phone || attrs.customer?.phone || '',
        address: ''
      }
    };

    // –¢–µ–ø–µ—Ä—å –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å pmsBooking –ø–æ—Å–ª–µ –µ–≥–æ –ø–æ–ª–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    console.log('‚úÖ PMS —Ñ–æ—Ä–º–∞—Ç:', {
      id: pmsBooking.id,
      guest: `${pmsBooking.guest_first_name} ${pmsBooking.guest_last_name}`,
      guests_full_name: pmsBooking.guests.full_name,
      room: pmsBooking.room_title,
      dates: `${pmsBooking.check_in} - ${pmsBooking.check_out}`
    });

    return pmsBooking;
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Airbnb —á–µ—Ä–µ–∑ Channex
   */
  async createAirbnbBooking(pmsBooking) {
    console.log('üè† –°–æ–∑–¥–∞–Ω–∏–µ Airbnb –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
    console.log('üìù –î–∞–Ω–Ω—ã–µ:', pmsBooking);

    try {
      const channexBooking = this.convertToChannexFormat(pmsBooking);
      const result = await this.apiRequest('/bookings', 'POST', channexBooking);
      
      console.log('‚úÖ Airbnb –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ Channex:', result.data?.id);
      
      // üö´ –û–ë–ù–û–í–õ–ï–ù–ò–ï AVAILABILITY –î–õ–Ø –ü–†–ï–î–û–¢–í–†–ê–©–ï–ù–ò–Ø –û–í–ï–†–ë–£–ö–ò–ù–ì–ê
      if (result.data) {
        try {
          // –ü–æ–ª—É—á–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è room_type_id
          const roomMapping = this.getRoomMapping(pmsBooking.room_type || 'standard_room');
          await this.updateAvailabilityAfterBooking(
            roomMapping.channex_room_type_id, 
            pmsBooking.check_in, 
            pmsBooking.check_out
          );
          console.log('‚úÖ Airbnb Availability –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–≤–µ—Ä–±—É–∫–∏–Ω–≥–∞');
        } catch (availabilityError) {
          console.error('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å Airbnb availability (–±—Ä–æ–Ω—å —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –æ–≤–µ—Ä–±—É–∫–∏–Ω–≥ –≤–æ–∑–º–æ–∂–µ–Ω):', availabilityError);
          // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ (—Å–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏) –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–∞—à—É –ë–î
        const pmsFormatted = await this.convertToPMSFormat(result.data, pmsBooking); // –ø–µ—Ä–µ–¥–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await this.saveToPMS(pmsFormatted);
        console.log('üíæ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ PMS –ë–î:', result.data.id);
      }
      
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Airbnb –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      throw error;
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Airbnb —á–µ—Ä–µ–∑ Channex
   */
  async syncWithAirbnb() {
    console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Airbnb');

    try {
      const response = await this.apiRequest(
        `/bookings?filter[property_id]=${this.propertyId}&filter[ota_name]=Airbnb&per_page=50`
      );
      
      const bookings = response.data || [];
      console.log(`üì• –ü–æ–ª—É—á–µ–Ω–æ ${bookings.length} Airbnb –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π`);

      let synced = 0;
      let errors = [];

      for (const booking of bookings) {
        try {
          const pmsBooking = await this.convertToPMSFormat(booking);
          await this.saveToPMS(pmsBooking);
          synced++;
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', booking.id, error);
          errors.push({ booking_id: booking.id, error: error.message });
        }
      }

      console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${synced}/${bookings.length}`);
      return { total: bookings.length, synced, errors };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Airbnb:', error);
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å availability –¥–ª—è Airbnb
   */
  async updateAirbnbAvailability(roomType, dates, count) {
    console.log(`üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Airbnb availability: ${roomType}`);
    
    try {
      const roomMapping = this.getRoomMapping(roomType);
      
      const availabilityData = {
        property_id: this.propertyId,
        room_type_id: roomMapping.channex_room_type_id,
        availability: {}
      };

      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã
      if (Array.isArray(dates)) {
        dates.forEach(date => {
          availabilityData.availability[date] = count;
        });
      } else {
        availabilityData.availability[dates] = count;
      }

      const result = await this.apiRequest('/availability', 'PUT', availabilityData);
      console.log('‚úÖ Airbnb availability –æ–±–Ω–æ–≤–ª–µ–Ω');
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Airbnb availability:', error);
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã –¥–ª—è Airbnb
   */
  async updateAirbnbPrices(roomType, dates, price) {
    console.log(`üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Airbnb —Ü–µ–Ω: ${roomType}`);
    
    try {
      const roomMapping = this.getRoomMapping(roomType);
      
      const rateData = {
        property_id: this.propertyId,
        rate_plan_id: roomMapping.channex_rate_plan_id,
        rates: {}
      };

      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã
      if (Array.isArray(dates)) {
        dates.forEach(date => {
          rateData.rates[date] = { rate: price };
        });
      } else {
        rateData.rates[dates] = { rate: price };
      }

      const result = await this.apiRequest('/rates', 'PUT', rateData);
      console.log('‚úÖ Airbnb —Ü–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Airbnb —Ü–µ–Ω:', error);
      throw error;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ PMS –ë–î
   */
  async saveToPMS(pmsBooking) {
    try {
      // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –≥–æ—Å—Ç—è
      let guestId = pmsBooking.guest_id;
      
      if (!guestId && pmsBooking.guests) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –≥–æ—Å—Ç—è
        const { data: guestData, error: guestError } = await supabase
          .from('guests')
          .upsert({
            full_name: pmsBooking.guests.full_name || `${pmsBooking.guest_first_name} ${pmsBooking.guest_last_name}`.trim(),
            email: pmsBooking.guests.email || pmsBooking.guest_email,
            phone: pmsBooking.guests.phone || pmsBooking.guest_phone,
            address: pmsBooking.guests.address || ''
          }, {
            onConflict: 'email',
            ignoreDuplicates: false
          })
          .select()
          .single();
          
        if (guestError) {
          console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ—Å—Ç—è:', guestError);
          // –ï—Å–ª–∏ –≥–æ—Å—Ç—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –µ–≥–æ –Ω–∞–π—Ç–∏
          const { data: existingGuest } = await supabase
            .from('guests')
            .select('id')
            .eq('email', pmsBooking.guests.email || pmsBooking.guest_email)
            .single();
            
          guestId = existingGuest?.id;
        } else {
          guestId = guestData?.id;
        }
      }
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      const bookingData = {
        ...pmsBooking,
        guest_id: guestId,
        // –£–¥–∞–ª—è–µ–º –ø–æ–ª–µ guests, —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ bookings
        guests: undefined,
        // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–æ–ª—è source –∏ channel —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
        source: pmsBooking.source || 'Airbnb',
        channel: pmsBooking.channel || 'airbnb'
      };
      
      // –£–¥–∞–ª—è–µ–º undefined –ø–æ–ª—è
      Object.keys(bookingData).forEach(key => {
        if (bookingData[key] === undefined) {
          delete bookingData[key];
        }
      });
      
      // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log('üíæ –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î:', {
        id: bookingData.id,
        source: bookingData.source,
        channel: bookingData.channel,
        guest_id: bookingData.guest_id,
        check_in: bookingData.check_in,
        check_out: bookingData.check_out
      });
      
      const { data, error } = await supabase
        .from('bookings')
        .upsert(bookingData, { 
          onConflict: 'id',
          ignoreDuplicates: false 
        })
        .select();

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ PMS –ë–î:', error);
        throw error;
      }

      console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ PMS –ë–î:', bookingData.id);
      return data;
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ ID –∏–∑ Channex –≤ PMS
   */
  async syncBookingById(channexBookingId) {
    console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ Channex:', channexBookingId);

    try {
      const response = await this.apiRequest(`/bookings/${channexBookingId}`);
      const booking = response.data;
      
      if (!booking) {
        throw new Error('–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ Channex');
      }
      
      console.log('üì• –ü–æ–ª—É—á–µ–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ Channex:', booking.id);
      
      const pmsBooking = await this.convertToPMSFormat(booking);
      const result = await this.saveToPMS(pmsBooking);
      
      console.log('‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –≤ PMS:', pmsBooking.id);
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Airbnb –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
   */
  async getAirbnbStats() {
    try {
      const { data, error } = await supabase
        .from('bookings')
        .select('*')
        .eq('channel', 'airbnb');

      if (error) throw error;

      const stats = {
        total: data?.length || 0,
        confirmed: data?.filter(b => b.status === 'confirmed').length || 0,
        cancelled: data?.filter(b => b.status === 'cancelled').length || 0,
        revenue: data?.reduce((sum, b) => sum + (parseFloat(b.total_amount) || 0), 0) || 0
      };

      console.log('üìä Airbnb —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', stats);
      return stats;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å availability –≤ Channex –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è Airbnb –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
   * –£–º–µ–Ω—å—à–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–∞ 1 –¥–ª—è –≤—Å–µ—Ö –¥–∞—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async updateAvailabilityAfterBooking(roomTypeId, checkIn, checkOut) {
    console.log(`üö´ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Airbnb availability –ø–æ—Å–ª–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è`);
    console.log(`üìÖ Room Type ID: ${roomTypeId}`);
    console.log(`üìÖ –î–∞—Ç—ã: ${checkIn} - ${checkOut}`);

    try {
      // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ availability –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
      const startDate = checkIn;
      const endDate = checkOut;
      
      console.log(`üîç –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π Airbnb availability –¥–ª—è ${roomTypeId}`);
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –¥–∞—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      const dates = [];
      const tempDate = new Date(startDate);
      const endDateObj = new Date(endDate);
      
      while (tempDate < endDateObj) {
        dates.push(tempDate.toISOString().split('T')[0]);
        tempDate.setDate(tempDate.getDate() + 1);
      }
      
      // Channex API —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞—Ç –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
      const dateFilter = dates.join(',');
      
      const currentAvailability = await this.apiRequest(
        `/availability?filter[property_id]=${this.propertyId}&filter[room_type_id]=${roomTypeId}&filter[date]=${dateFilter}`
      );
      
      if (!currentAvailability?.data) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π Airbnb availability, –ø—Ä–∏–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
      }
      
      // 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–∞—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–∏—Å–∫–ª—é—á–∞—è –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞)
      const bookingDates = [];
      const start = new Date(checkIn);
      const end = new Date(checkOut);
      
      for (let date = new Date(start); date < end; date.setDate(date.getDate() + 1)) {
        bookingDates.push(date.toISOString().split('T')[0]);
      }
      
      console.log(`üìã –î–∞—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Airbnb availability:`, bookingDates);
      
      // 3. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—É–º–µ–Ω—å—à–∞–µ–º availability –Ω–∞ 1)
      const availabilityUpdates = {};
      
      bookingDates.forEach(date => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ currentAvailability —ç—Ç–æ –º–∞—Å—Å–∏–≤ –∏–ª–∏ –æ–±—ä–µ–∫—Ç —Å data
        let availabilityData = currentAvailability;
        
        // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º data, –∏—Å–ø–æ–ª—å–∑—É–µ–º data
        if (currentAvailability && !Array.isArray(currentAvailability) && currentAvailability.data) {
          availabilityData = currentAvailability.data;
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤, –∏—â–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω—É–∂–Ω–æ–π –¥–∞—Ç—ã
        let currentForDate = null;
        if (Array.isArray(availabilityData)) {
          currentForDate = availabilityData.find(
            av => av.attributes && av.attributes.date === date
          );
        }
        
        // –ë–µ—Ä–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
        const roomMapping = Object.values(this.airbnbConfig.room_mapping).find(
          room => room.channex_room_type_id === roomTypeId
        );
        const defaultCount = roomMapping?.availability_count || 1;
        
        const currentCount = currentForDate?.attributes?.availability || defaultCount;
        const newCount = Math.max(0, currentCount - 1); // –ù–µ –º–µ–Ω—å—à–µ 0
        
        availabilityUpdates[date] = newCount;
        console.log(`üìÖ ${date}: ${currentCount} ‚Üí ${newCount}`);
      });
      
      // 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ Channex
      const updatePayload = {
        property_id: this.propertyId,
        room_type_id: roomTypeId,
        availability: availabilityUpdates
      };
      
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Airbnb availability:`, updatePayload);
      
      const result = await this.apiRequest('/availability', 'PUT', updatePayload);
      
      console.log(`‚úÖ Airbnb Availability —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω. –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω –æ–≤–µ—Ä–±—É–∫–∏–Ω–≥ –¥–ª—è ${bookingDates.length} –¥–∞—Ç`);
      
      return result;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Airbnb availability:', error);
      throw error;
    }
  }
}

export default new AirbnbChannexService();