import { supabase } from '@/lib/supabase';

class ChannexService {
  constructor() {
    this.baseURL = import.meta.env.VITE_CHANNEX_API_URL || 'https://api.channex.io/api/v1';
    this.apiKey = import.meta.env.VITE_CHANNEX_API_KEY || 'your-api-key-here';
    this.propertyId = import.meta.env.VITE_CHANNEX_PROPERTY_ID || 'your-property-id';
    this.useMockData = !this.apiKey || this.apiKey === 'your-api-key-here';
    
    if (this.useMockData) {
      console.log('üé≠ Channex —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ MOCK –¥–∞–Ω–Ω—ã—Ö');
    } else {
      console.log('‚úÖ Channex —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ PRODUCTION');
    }
  }

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ Channex –≤ PMS
async syncBookingToPMS(channexBooking) {
  console.log('üì• –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ Channex –≤ PMS:', channexBooking.id);
  
  // –ú–∞–ø–ø–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Channex –≤ —Ñ–æ—Ä–º–∞—Ç –≤–∞—à–µ–π –ë–î
  const pmsBooking = this.mapChannexToPMSBooking(channexBooking);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
  const { data: existingBooking } = await supabase
    .from('bookings')
    .select('id')
    .eq('external_booking_id', channexBooking.id)
    .single();

  if (existingBooking) {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ
    const { data, error } = await supabase
      .from('bookings')
      .update(pmsBooking)
      .eq('id', existingBooking.id)
      .select()
      .single();
      
    return { data, error, action: 'updated' };
  } else {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
    const { data, error } = await supabase
      .from('bookings')
      .insert(pmsBooking)
      .select()
      .single();
      
    return { data, error, action: 'created' };
  }
}

// –ú–∞–ø–ø–∏–Ω–≥ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ Channex –≤ —Ñ–æ—Ä–º–∞—Ç PMS
mapChannexToPMSBooking(channexBooking) {
  return {
    external_booking_id: channexBooking.id,
    source: this.getBookingSource(channexBooking.ota_name),
    check_in: channexBooking.arrival_date,
    check_out: channexBooking.departure_date,
    guest_name: channexBooking.customer?.name || 'Guest',
    guest_email: channexBooking.customer?.email || '',
    guest_phone: channexBooking.customer?.phone || '',
    total_amount: channexBooking.total_price || 0,
    status: this.mapBookingStatus(channexBooking.status),
    guests_count: (channexBooking.occupancy?.adults || 0) + (channexBooking.occupancy?.children || 0),
    notes: channexBooking.notes || '',
    channex_data: channexBooking // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  };
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞
getBookingSource(otaName) {
  const mapping = {
    'Booking.com': 'booking',
    'Airbnb': 'airbnb',
    'Expedia': 'expedia',
    'Direct': 'direct'
  };
  return mapping[otaName] || 'other';
}

mapBookingStatus(channexStatus) {
  const mapping = {
    'new': 'pending',
    'confirmed': 'confirmed',
    'cancelled': 'cancelled',
    'modified': 'confirmed'
  };
  return mapping[channexStatus] || 'pending';
}

getRoomKind(roomType) {
  // –í–ê–ñ–ù–û: Channex API –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ 'room' –∏–ª–∏ 'dorm'
  // –í—Å–µ —Ç–∏–ø—ã –∫–æ–º–Ω–∞—Ç –º–∞–ø–ø–∏–º –Ω–∞ 'room', –∫—Ä–æ–º–µ –æ–±—â–∏—Ö —Å–ø–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç (hostel)
  
  const mapping = {
    'single': 'room',
    'double': 'room', 
    'suite': 'room',        // ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ 'suite', —Å—Ç–∞–ª–æ 'room'
    'apartment': 'room',    // ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ 'apartment', —Å—Ç–∞–ª–æ 'room'
    'standard': 'room',
    'deluxe': 'room',
    'family': 'room',
    'luxe': 'room',         // ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ 'suite', —Å—Ç–∞–ª–æ 'room'
    'premium': 'room',
    'dorm': 'dorm',         // –¢–æ–ª—å–∫–æ –¥–ª—è —Ö–æ—Å—Ç–µ–ª–æ–≤
    'hostel': 'dorm'
  };
  
  const result = mapping[roomType?.toLowerCase()] || 'room';
  
  console.log(`üîß –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–∞ –∫–æ–º–Ω–∞—Ç—ã: "${roomType}" ‚Üí "${result}"`);
  
  // –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  if (result !== 'room' && result !== 'dorm') {
    console.warn('‚ö†Ô∏è –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π room_kind, –∏—Å–ø–æ–ª—å–∑—É–µ–º "room"');
    return 'room';
  }
  
  return result;
}
  // --- –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ ---

  mockDelay() {
    return new Promise(resolve => setTimeout(resolve, 500));
  }

  async apiRequest(endpoint, options = {}) {
  if (this.useMockData) {
    console.log('üé≠ Mock —Ä–µ–∂–∏–º - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è:', endpoint);
    return this.getMockResponse(endpoint, options);
  }

  const url = `${this.baseURL}${endpoint}`;
  
  console.log(`üåê API –∑–∞–ø—Ä–æ—Å: ${options.method || 'GET'} ${url}`);
  
  try {
    const response = await fetch(url, {
      ...options,
      headers: {
        'user-api-key': this.apiKey,
        'Content-Type': 'application/json',
        ...options.headers
      }
    });

    console.log(`üì° –û—Ç–≤–µ—Ç API: ${response.status} ${response.statusText}`);

    if (!response.ok) {
      let errorText;
      try {
        errorText = await response.text();
        console.error('üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—à–∏–±–∫–∏:', errorText);
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å JSON –æ—à–∏–±–∫—É
        let errorData;
        try {
          errorData = JSON.parse(errorText);
          console.error('üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', errorData);
        } catch (jsonError) {
          // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ JSON, —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—à–∏–±–∫–∏
          console.warn('‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ, —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—à–∏–±–∫–∏');
          errorData = {
            errors: {
              code: 'api_error',
              title: `HTTP ${response.status}`,
              details: { message: errorText }
            }
          };
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
        let detailedError = `${response.status} ${response.statusText}`;
        
        if (errorData.errors) {
          if (errorData.errors.details) {
            const details = Object.entries(errorData.errors.details)
              .map(([field, errors]) => {
                if (Array.isArray(errors)) {
                  return `${field}: ${errors.join(', ')}`;
                } else {
                  return `${field}: ${errors}`;
                }
              })
              .join('; ');
            detailedError += ` - ${details}`;
          } else if (errorData.errors.title) {
            detailedError += ` - ${errorData.errors.title}`;
          }
        }
        
        throw new Error(`Channex API Error: ${detailedError}`);
        
      } catch (parseError) {
        // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞
        if (parseError.message.includes('Channex API Error:')) {
          throw parseError; // –≠—Ç–æ –Ω–∞—à–∞ –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–ª—å—à–µ
        } else {
          console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞:', parseError);
          throw new Error(`Channex API Error: ${response.status} ${response.statusText}`);
        }
      }
    }

    const data = await response.json();
    console.log('üìä –î–∞–Ω–Ω—ã–µ –æ—Ç API:', data);
    return data;
    
  } catch (error) {
    console.error('Channex API Request Error:', error);
    throw error;
  }
}

// –£–õ–£–ß–®–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ createRoomType
async createRoomType(roomData) {
    console.log('üè† –°–æ–∑–¥–∞–µ–º —Ç–∏–ø –∫–æ–º–Ω–∞—Ç—ã –≤ Channex:', roomData);
  
  // –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
  const cleanTitle = this.cleanRoomTitle(roomData.room_number || roomData.name);
  
  const channexRoomData = {
    room_type: {
      title: cleanTitle,
      room_kind: this.getRoomKind(roomData.room_type || 'room'),
      occ_adults: Math.min(roomData.capacity || 2, 8), // –ú–∞–∫—Å–∏–º—É–º 8
      occ_children: 0,
      occ_infants: 0,
      default_occupancy: Math.min(roomData.capacity || 2, 8),
      count_of_rooms: 1,
      property_id: this.propertyId,
      facilities: []
    }
  };
  
  console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º room_type –≤ Channex:', channexRoomData);
  
  return this.apiRequest('/room_types', {
    method: 'POST',
    body: JSON.stringify(channexRoomData)
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
cleanRoomTitle(title) {
  if (!title) return 'Room';
  
  // –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
  const translitMap = {
    '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–ï': 'E', '–Å': 'E',
    '–ñ': 'Zh', '–ó': 'Z', '–ò': 'I', '–ô': 'Y', '–ö': 'K', '–õ': 'L', '–ú': 'M',
    '–ù': 'N', '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U',
    '–§': 'F', '–•': 'Kh', '–¶': 'Ts', '–ß': 'Ch', '–®': 'Sh', '–©': 'Shch',
    '–™': '', '–´': 'Y', '–¨': '', '–≠': 'E', '–Æ': 'Yu', '–Ø': 'Ya',
    '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'e',
    '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
    '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
    '—Ñ': 'f', '—Ö': 'kh', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'shch',
    '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
  };
  
  // –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä—É–µ–º —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
  let cleaned = title.split('').map(char => translitMap[char] || char).join('');
  
  // –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã
  cleaned = cleaned.replace(/[^a-zA-Z0-9\s\-]/g, '');
  
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤
  cleaned = cleaned.substring(0, 50);
  
  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
  cleaned = cleaned.trim().replace(/\s+/g, ' ');
  
  console.log(`üßπ –û—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è: "${title}" ‚Üí "${cleaned}"`);
  
  return cleaned || 'Room';
}

// –¢–∞–∫–∂–µ –¥–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è room types (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç):
async getRoomTypes(propertyId = null) {
  const propId = propertyId || this.propertyId;
  console.log('üè† –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã –∫–æ–º–Ω–∞—Ç –¥–ª—è property:', propId);
  
  // –ü–†–ê–í–ò–õ–¨–ù–´–ô endpoint —Å —Ñ–∏–ª—å—Ç—Ä–æ–º
  return this.apiRequest(`/room_types?filter[property_id]=${propId}`);
}

async createRatePlan(roomTypeId, rateData) {
  console.log('üí∞ –°–æ–∑–¥–∞–µ–º —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –≤ Channex:', rateData);
  console.log('üè† –î–ª—è room type ID:', roomTypeId);
  
  // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Channex API
  const channexRateData = {
    rate_plan: {
      title: rateData.name || 'Standard Rate',
      room_type_id: roomTypeId,
      currency: 'USD',
      sell_mode: 'per_room', // per_room –∏–ª–∏ per_person
      rate_mode: 'manual', // Manual - —Ü–µ–Ω–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ options.rate
      property_id: this.propertyId, // –í–ê–ñ–ù–û: –¥–æ–±–∞–≤–ª—è–µ–º property_id
      
      // –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ï –ø–æ–ª–µ options —Å occupancy options
      options: [
        {
          occupancy: 2, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è per_room —Ç–∞—Ä–∏—Ñ–∞
          is_primary: true, // –û—Å–Ω–æ–≤–Ω–∞—è –æ–ø—Ü–∏—è
          rate: parseFloat(rateData.price || 5000) // –¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö
        }
      ],
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      children_fee: 0,
      infant_fee: 0,
      min_stay_arrival: 1,
      min_stay_through: 1,
      max_stay: 365,
      closed_to_arrival: false,
      closed_to_departure: false,
      stop_sell: false
    }
  };
  
  console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º rate_plan –≤ Channex:', channexRateData);
  
  // –ü–†–ê–í–ò–õ–¨–ù–´–ô endpoint - –ø—Ä–æ—Å—Ç–æ /rate_plans (–±–µ–∑ property –≤ –ø—É—Ç–∏)
  const endpoint = `/rate_plans`;
  console.log('üåê Endpoint:', endpoint);
  
  return this.apiRequest(endpoint, {
    method: 'POST',
    body: JSON.stringify(channexRateData)
  });
}

// –¢–∞–∫–∂–µ –¥–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è rate plans:
async getRatePlans(propertyId = null) {
  const propId = propertyId || this.propertyId;
  console.log('üí∞ –ü–æ–ª—É—á–∞–µ–º —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã –¥–ª—è property:', propId);
  
  // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint —Å —Ñ–∏–ª—å—Ç—Ä–æ–º
  return this.apiRequest(`/rate_plans?filter[property_id]=${propId}`);
}
// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã property
async updatePropertyCurrency(newCurrency = 'USD') {
  console.log('üè® –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞–ª—é—Ç—É property –Ω–∞:', newCurrency);
  
  const updateData = {
    property: {
      currency: newCurrency
    }
  };
  
  return this.apiRequest(`/properties/${this.propertyId}`, {
    method: 'PUT',
    body: JSON.stringify(updateData)
  });
}

// –£–¥–∞–ª–µ–Ω–∏–µ rate plan
async deleteRatePlan(ratePlanId) {
  console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º rate plan:', ratePlanId);
  
  return this.apiRequest(`/rate_plans/${ratePlanId}`, {
    method: 'DELETE'
  });
}
// –ú–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω (Availability & Rates API)
async setRates(ratePlanId, dateFrom, dateTo, rates) {
  console.log('üíµ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è rate plan:', ratePlanId);
  console.log('üìÖ –ü–µ—Ä–∏–æ–¥:', dateFrom, '–¥–æ', dateTo);
  console.log('üí∞ –¶–µ–Ω—ã:', rates);
  
  // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Channex Restrictions API
  const ratesData = {
    values: [
      {
        property_id: this.propertyId,
        rate_plan_id: ratePlanId,
        date_from: dateFrom,
        date_to: dateTo,
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –≤ —Ü–µ–Ω—Ç—ã –¥–ª—è USD (150.00 -> 15000)
        rate: Math.round(rates[0].rate * 100) // Channex —Ç—Ä–µ–±—É–µ—Ç —Ü–µ–Ω—É –≤ —Ü–µ–Ω—Ç–∞—Ö
      }
    ]
  };
  
  console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ü–µ–Ω—ã –≤ Channex:', ratesData);
  
  // –ü–†–ê–í–ò–õ–¨–ù–´–ô endpoint: /restrictions, –ù–ï /rates
  return this.apiRequest('/restrictions', {
    method: 'POST',
    body: JSON.stringify(ratesData)
  });
}

// –ú–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ availability
async setAvailability(roomTypeId, dateFrom, dateTo, availability) {
  console.log('üè† –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º availability –¥–ª—è room type:', roomTypeId);
  
  const availabilityData = {
    values: [
      {
        property_id: this.propertyId,
        room_type_id: roomTypeId,
        date_from: dateFrom,
        date_to: dateTo,
        availability: availability
      }
    ]
  };
  
  return this.apiRequest('/availability', {
    method: 'POST',
    body: JSON.stringify(availabilityData)
  });
}

// –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö rate plans
async updateRatePlanCurrency(ratePlanId, newCurrency = 'USD') {
  console.log('üí± –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞–ª—é—Ç—É rate plan:', ratePlanId, '–Ω–∞', newCurrency);
  
  const updateData = {
    rate_plan: {
      currency: newCurrency
    }
  };
  
  return this.apiRequest(`/rate_plans/${ratePlanId}`, {
    method: 'PUT',
    body: JSON.stringify(updateData)
  });
}

// –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±—Ö—É–∫–∞
async createWebhook() {
  console.log('üîî –°–æ–∑–¥–∞–µ–º webhook –¥–ª—è real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
  
  const webhookData = {
    webhook: {
      url: `${window.location.origin}/api/channex/webhook`,
      event: 'booking', // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö
      active: true,
      headers: {
        'Authorization': 'Bearer your-webhook-secret'
      }
    }
  };
  
  return this.apiRequest(`/properties/${this.propertyId}/webhooks`, {
    method: 'POST',
    body: JSON.stringify(webhookData)
  });
}

// –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ property
async setupProperty() {
  console.log('üè® –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç–µ–ª—å –≤ Channex...');
  
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–µ–ª—è –∏–∑ –≤–∞—à–µ–π –ë–î
    const { data: hotelData } = await supabase
      .from('hotel_settings')
      .select('*')
      .single();
    
    if (!hotelData) {
      throw new Error('–î–∞–Ω–Ω—ã–µ –æ—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î');
    }
    
    // 2. –û–±–Ω–æ–≤–ª—è–µ–º property –≤ Channex
    const propertyUpdate = {
      property: {
        title: hotelData.name,
        timezone: 'Europe/Moscow',
        currency: 'RUB',
        email: hotelData.email,
        phone: hotelData.phone
      }
    };
    
    await this.apiRequest(`/properties/${this.propertyId}`, {
      method: 'PUT',
      body: JSON.stringify(propertyUpdate)
    });
    
    // 3. –°–æ–∑–¥–∞–µ–º —Ç–∏–ø—ã –∫–æ–º–Ω–∞—Ç
    const { data: rooms } = await supabase
      .from('rooms')
      .select('*');
    
    if (rooms) {
      for (const room of rooms) {
        try {
          const roomType = await this.createRoomType(room);
          
          // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π rate plan –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–Ω–∞—Ç—ã
          await this.createRatePlan(roomType.data.id, {
            name: `${room.name || room.room_number} - Standard Rate`,
            price: room.price_per_night
          });
          
          console.log(`‚úÖ –ö–æ–º–Ω–∞—Ç–∞ ${room.name} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≤ Channex`);
          
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–Ω–∞—Ç—ã ${room.name}:`, error);
        }
      }
    }
    
    // 4. –°–æ–∑–¥–∞–µ–º webhook
    try {
      await this.createWebhook();
      console.log('‚úÖ Webhook —Å–æ–∑–¥–∞–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è webhook:', error);
    }
    
    return { success: true, message: '–û—Ç–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ Channex' };
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ property:', error);
    throw error;
  }
}

  // --- PROPERTIES ---
  async getProperties() { return this.apiRequest('/properties'); }
  async getProperty(propertyId) { return this.apiRequest(`/properties/${propertyId}`); }
  async createProperty(propertyData) {
    return this.apiRequest('/properties', {
      method: 'POST',
      body: JSON.stringify(propertyData),
    });
  }
  async updateProperty(propertyId, propertyData) {
  console.log('üè® –û–±–Ω–æ–≤–ª—è–µ–º property –≤ Channex:', propertyId, propertyData);
  
  // –ü–†–ê–í–ò–õ–¨–ù–´–ô –ø–ª–æ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Channex API (–±–µ–∑ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ address –æ–±—ä–µ–∫—Ç–∞)
  const channexData = {
    property: {
      title: propertyData.name || propertyData.title,
      timezone: 'Europe/Moscow',
      currency: 'RUB',
      email: propertyData.email,
      phone: propertyData.phone,
      // –ü–ª–æ—Å–∫–∏–µ –ø–æ–ª—è –∞–¥—Ä–µ—Å–∞ (–ù–ï –≤–ª–æ–∂–µ–Ω–Ω—ã–µ!)
      country: 'RU',
      state: propertyData.state || 'Moscow',
      city: propertyData.city || 'Moscow', 
      address: propertyData.address,
      zip_code: propertyData.zip || '101000'
    }
  };
  
  console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Channex API (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç):', channexData);
  
  return this.apiRequest(`/properties/${propertyId}`, {
    method: 'PUT',
    body: JSON.stringify(channexData)
  });
}
  
   // --- ROOMS ---
  async getRooms(propertyId) { return this.apiRequest(`/properties/${propertyId}/room_types`); }
  async syncRooms() {
    console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–º–Ω–∞—Ç —Å Channex...');
    if (this.useMockData) {
      const scenarios = [{ synced: 5, errors: 0 }, { synced: 3, errors: 2 }];
      const result = scenarios[Math.floor(Math.random() * scenarios.length)];
      console.log('üé≠ Mock —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', result);
      return { success: true, ...result };
    }
    // ... —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ ...
    return { success: true, synced: 0, errors: 0 };
  }
  
  // --- BOOKINGS ---
  async getBookings(params = {}) { return this.apiRequest('/bookings', { params }); }
  async getBooking(bookingId) { return this.apiRequest(`/bookings/${bookingId}`); }
  async confirmBooking(bookingId) { return this.apiRequest(`/bookings/${bookingId}/confirm`, { method: 'POST' }); }
  async cancelBooking(bookingId, reason = '') {
    return this.apiRequest(`/bookings/${bookingId}/cancel`, {
      method: 'POST',
      body: JSON.stringify({ reason }),
    });
  }
  
  // ... –î—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã API ...
  
  // --- MOCK DATA (—Ä–∞–∑–¥–µ–ª —Å –º–æ–∫–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏) ---

  getMockResponse(endpoint) {
    console.log('üé≠ Mock —Ä–µ–∂–∏–º - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è:', endpoint);
    if (endpoint.includes('/properties')) return this.getMockProperties();
    if (endpoint.includes('/bookings')) return this.getMockBookings();
    if (endpoint.includes('/room_types')) return this.getMockRooms(); // –≠—Ç–æ—Ç –≤—ã–∑–æ–≤ —Ç–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
    return { data: [] };
  }

  getMockProperties() {
    return {
      data: [{ id: 'prop-1', title: 'Voda Hotel', status: 'active' }],
    };
  }

  getMockBookings() {
    return {
      data: [
        /* ... –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π ... */
      ],
    };
  }
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞
  getMockRooms() {
    return {
      data: [{
        id: 'room-type-1',
        title: 'Standard Double Room',
        room_kind: 'room',
        capacity: 2,
        base_rate: 5000,
        currency: 'RUB'
      }, {
        id: 'room-type-2',
        title: 'Deluxe Suite',
        room_kind: 'suite',
        capacity: 4,
        base_rate: 10000,
        currency: 'RUB'
      }]
    };
  }
}

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const channexService = new ChannexService();
export default channexService;