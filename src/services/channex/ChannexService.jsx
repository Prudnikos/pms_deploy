import { supabase } from '@/lib/supabase';

class ChannexService {
  constructor() {
    this.baseURL = import.meta.env.VITE_CHANNEX_API_URL || 'https://staging.channex.io/api/v1';
    this.apiKey = import.meta.env.VITE_CHANNEX_API_KEY;
    this.propertyId = import.meta.env.VITE_CHANNEX_PROPERTY_ID;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–π API –∫–ª—é—á
    this.useMockData = !this.apiKey;
    
    if (this.useMockData) {
      console.warn('üé≠ Channex —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ MOCK –¥–∞–Ω–Ω—ã—Ö. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ VITE_CHANNEX_API_KEY –≤ .env');
    } else {
      console.log('‚úÖ Channex —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ PRODUCTION');
      console.log(`üè® Property ID: ${this.propertyId}`);
    }
    
    // Booking CRS App —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ UI
    console.log('‚úÖ Booking CRS App —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ UI');
  }

  // --- –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î –î–õ–Ø API –ó–ê–ü–†–û–°–û–í (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô) ---
  async apiRequest(endpoint, method = 'GET', data = null) {
    if (this.useMockData) {
      console.log(`üé≠ Mock API Request: ${method} ${endpoint}`);
      return { data: {}, success: true };
    }

    const url = `${this.baseURL}${endpoint}`;
    console.log(`üåê API –∑–∞–ø—Ä–æ—Å: ${method} ${url}`);
    
    try {
      const options = {
        method: method,
        headers: {
          'user-api-key': this.apiKey,
          'Content-Type': 'application/json',
        },
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º body —Ç–æ–ª—å–∫–æ –¥–ª—è POST/PUT/PATCH –∑–∞–ø—Ä–æ—Å–æ–≤
      if (data && ['POST', 'PUT', 'PATCH'].includes(method)) {
        options.body = JSON.stringify(data);
      }
      
      const response = await fetch(url, options);
      const responseText = await response.text();
      console.log(`üì° –û—Ç–≤–µ—Ç API: ${response.status}`);

      if (!response.ok) {
        console.error('üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—à–∏–±–∫–∏:', responseText);
        let errorData;
        try { 
          errorData = JSON.parse(responseText); 
        } catch (e) { 
          errorData = { message: responseText };
        }
        const errorMessage = errorData?.errors?.title || errorData?.errors?.details || responseText;
        throw new Error(`Channex API Error: ${errorMessage}`);
      }

      // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º success: true
      if (!responseText) return { success: true };
      
      const responseData = JSON.parse(responseText);
      console.log('üìä –î–∞–Ω–Ω—ã–µ –æ—Ç API:', responseData);
      return responseData;

    } catch (error) {
      console.error('üí• Channex API Request Error:', error);
      throw error;
    }
  }

  // --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø BOOKING CRS APP ---
  async initializeBookingCRS() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      const apps = await this.checkInstalledApps();
      
      if (!apps || apps.length === 0) {
        console.log('‚ö†Ô∏è –ù–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Booking CRS App...');
        await this.installBookingCRSApp();
      } else {
        const hasCRS = apps.some(app => 
          app.attributes?.application_code?.includes('booking') || 
          app.attributes?.application_code?.includes('crs')
        );
        
        if (!hasCRS) {
          console.log('‚ö†Ô∏è Booking CRS App –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...');
          await this.installBookingCRSApp();
        } else {
          console.log('‚úÖ Booking CRS App —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Booking CRS:', error);
    }
  }

  // --- –£–°–¢–ê–ù–û–í–ö–ê BOOKING CRS APP ---
  async installBookingCRSApp() {
    console.log('üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Booking CRS App...');
    
    const appCodes = ['booking_crs', 'channex_booking_crs', 'crs', 'bookings'];
    
    for (const code of appCodes) {
      try {
        const response = await this.apiRequest('/applications', 'POST', {
          application_installation: {
            property_id: this.propertyId,
            application_code: code
          }
        });
        
        if (response?.data?.[0]?.id) {
          console.log(`‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º: ${code}`, response);
          return response.data[0].id;
        }
      } catch (error) {
        console.log(`‚ùå –ö–æ–¥ ${code} –Ω–µ –ø–æ–¥–æ—à–µ–ª:`, error.message);
      }
    }
    
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Booking CRS App –Ω–∏ —Å –æ–¥–Ω–∏–º –∏–∑ –∫–æ–¥–æ–≤');
    throw new Error('Failed to install Booking CRS App');
  }

  // --- –ü–†–û–í–ï–†–ö–ê –£–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–• –ü–†–ò–õ–û–ñ–ï–ù–ò–ô ---
  async checkInstalledApps() {
    try {
      const response = await this.apiRequest(
        `/applications?filter[property_id]=${this.propertyId}`,
        'GET'
      );
      console.log('üìã –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', response?.data || []);
      return response?.data || [];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π:', error);
      return [];
    }
  }

  // --- –°–û–ó–î–ê–ù–ò–ï –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø –í CHANNEX (–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï) ---
  async createBookingInChannex(pmsBooking) {
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Channex:', pmsBooking.id);
    
    try {
      // 1. –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ PMS
      const { data: pmsRooms, error: pmsRoomsError } = await supabase
        .from('rooms')
        .select('*');
      if (pmsRoomsError) throw pmsRoomsError;

      // 3. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Channex
      const channexRoomTypesResponse = await this.apiRequest(
        `/room_types?filter[property_id]=${this.propertyId}`,
        'GET'
      );
      const channexRoomTypes = channexRoomTypesResponse?.data || [];

      const ratePlansResponse = await this.apiRequest(
        `/rate_plans?filter[property_id]=${this.propertyId}`,
        'GET'
      );
      const ratePlans = ratePlansResponse?.data || [];
      
      console.log(`... –ø–æ–ª—É—á–µ–Ω–æ ${channexRoomTypes.length} —Ç–∏–ø–æ–≤ –∫–æ–º–Ω–∞—Ç –∏ ${ratePlans.length} —Ç–∞—Ä–∏—Ñ–æ–≤ –∏–∑ Channex`);
      
      // –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø –û–¢–õ–ê–î–ö–ò
      console.log('üè† –í–°–ï –¢–ò–ü–´ –ö–û–ú–ù–ê–¢ –ò–ó CHANNEX:');
      channexRoomTypes.forEach((rt, index) => {
        console.log(`  ${index + 1}. ID: ${rt.id}`);
        console.log(`     Title: "${rt.attributes?.title}"`);
        console.log(`     Kind: ${rt.attributes?.room_kind}`);
        console.log(`     Count: ${rt.attributes?.count_of_rooms}`);
        console.log('     ---');
      });
      
      console.log('üí∞ –í–°–ï –¢–ê–†–ò–§–ù–´–ï –ü–õ–ê–ù–´ –ò–ó CHANNEX:');
      ratePlans.forEach((rp, index) => {
        console.log(`  ${index + 1}. ID: ${rp.id}`);
        console.log(`     Title: "${rp.attributes?.title}"`);
        console.log(`     Room Type ID: ${rp.relationships?.room_type?.data?.id}`);
        console.log(`     Currency: ${rp.attributes?.currency}`);
        console.log('     ---');
      });
      
      console.log('üîç PMS –ö–û–ú–ù–ê–¢–ê:');
      console.log(`  ID: ${pmsBooking.room_id}`);
      console.log(`  –ò—â–µ–º –∫–æ–º–Ω–∞—Ç—É –≤ PMS...`);
      
      console.log('üè† –í–°–ï –ö–û–ú–ù–ê–¢–´ –ò–ó PMS:');
      pmsRooms.forEach((room, index) => {
        console.log(`  ${index + 1}. ID: ${room.id}`);
        console.log(`     Number: "${room.room_number}"`);
        console.log(`     Name: "${room.name}"`);
        console.log(`     Type: "${room.room_type}"`);
        console.log(`     Channex Room Type ID: ${room.channex_room_type_id || '–ù–ï–¢'}`);
        console.log('     ---');
      });

      // 3. –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
      const pmsRoom = pmsRooms.find(r => r.id === pmsBooking.room_id);
      if (!pmsRoom) {
        console.error(`‚ùå –ö–æ–º–Ω–∞—Ç–∞ —Å ID ${pmsBooking.room_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ PMS.`);
        console.error(`üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã:`, pmsRooms.map(r => ({id: r.id, number: r.room_number})));
        throw new Error(`–ö–æ–º–Ω–∞—Ç–∞ —Å ID ${pmsBooking.room_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ PMS. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ room_id –≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.`);
      }
      
      console.log('üéØ –ù–ê–ô–î–ï–ù–ù–ê–Ø PMS –ö–û–ú–ù–ê–¢–ê:');
      console.log(`  ID: ${pmsRoom.id}`);
      console.log(`  Number: "${pmsRoom.room_number}"`);  
      console.log(`  Name: "${pmsRoom.name}"`);
      console.log(`  Channex Room Type ID: ${pmsRoom.channex_room_type_id || '–ù–ï–¢'}`);
      
      // –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –ù–û–í–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´ CHANNEX
      let channexRoomType;
      
      console.log(`üîç –ü–û–ò–°–ö CHANNEX ROOM TYPE –î–õ–Ø PMS –ö–û–ú–ù–ê–¢–´ "${pmsRoom.room_number}"`);
      
      // 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ channex_room_type_id –∏–∑ –±–∞–∑—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
      if (pmsRoom.channex_room_type_id) {
        channexRoomType = channexRoomTypes.find(crt => crt.id === pmsRoom.channex_room_type_id);
        console.log(`  üéØ –ü–æ ID –∏–∑ –±–∞–∑—ã (${pmsRoom.channex_room_type_id}): ${channexRoomType ? '–ù–ê–ô–î–ï–ù' : '–ù–ï –ù–ê–ô–î–ï–ù'}`);
      }
      
      // 2. –õ–æ–≥–∏–∫–∞ –º–∞–ø–ø–∏–Ω–≥–∞ –Ω–æ–º–µ—Ä ‚Üí —Ç–∏–ø –∫–æ–º–Ω–∞—Ç—ã (–ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê)
      if (!channexRoomType) {
        let targetRoomType = 'Standard Room'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ –Ω–æ–º–µ—Ä—É –∫–æ–º–Ω–∞—Ç—ã
        const roomNumber = pmsRoom.room_number;
        if (roomNumber) {
          if (roomNumber.startsWith('1')) {
            targetRoomType = 'Standard Room'; // 101, 102, 103, etc.
          } else if (roomNumber.startsWith('2')) {
            targetRoomType = 'Deluxe Room'; // 201, 202, 203, etc.
          } else if (roomNumber.startsWith('3')) {
            targetRoomType = 'Suite'; // 301, 302, 303, etc.
          }
        }
        
        console.log(`  üè† –ú–∞–ø–ø–∏–Ω–≥ –Ω–æ–º–µ—Ä–∞ "${roomNumber}" ‚Üí —Ç–∏–ø "${targetRoomType}"`);
        
        // –ò—â–µ–º –ø–æ —Ç–∏–ø—É –∫–æ–º–Ω–∞—Ç—ã
        channexRoomType = channexRoomTypes.find(crt => 
          crt.attributes.title === targetRoomType
        );
        console.log(`  üîç –ü–æ–∏—Å–∫ —Ç–∏–ø–∞ "${targetRoomType}": ${channexRoomType ? '–ù–ê–ô–î–ï–ù' : '–ù–ï –ù–ê–ô–î–ï–ù'}`);
      }
      
      // 3. –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω - –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
      if (!channexRoomType) {
        channexRoomType = channexRoomTypes[0];
        console.warn(`  ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π: ${channexRoomType?.attributes?.title}`);
      }
      
      if (!channexRoomType) {
        throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω —Ç–∏–ø –∫–æ–º–Ω–∞—Ç—ã –≤ Channex –¥–ª—è "${pmsRoom.room_number}"`);
      }

      console.log(`‚úÖ –í–´–ë–†–ê–ù–ù–´–ô CHANNEX ROOM TYPE:`);
      console.log(`  ID: ${channexRoomType.id}`);
      console.log(`  Title: "${channexRoomType.attributes?.title}"`);
      console.log(`  Kind: ${channexRoomType.attributes?.room_kind}`);

      // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –ü–û–ò–°–ö–ê RATE PLAN
      const channexRatePlan = ratePlans.find(rp => 
        rp.relationships?.room_type?.data?.id === channexRoomType.id
      );
      
      console.log(`üîç –ü–æ–∏—Å–∫ rate plan –¥–ª—è room_type_id: ${channexRoomType.id}`);
      console.log(`  –ù–∞–π–¥–µ–Ω rate plan: ${channexRatePlan ? '–î–ê' : '–ù–ï–¢'}`);
      
      if (!channexRatePlan) {
        throw new Error(`–¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è —Ç–∏–ø–∞ –∫–æ–º–Ω–∞—Ç—ã "${channexRoomType.attributes.title}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Channex.`);
      }
      
      console.log(`‚úÖ –í–´–ë–†–ê–ù–ù–´–ô RATE PLAN:`);
      console.log(`  ID: ${channexRatePlan.id}`);
      console.log(`  Title: "${channexRatePlan.attributes?.title}"`);
      console.log(`  Currency: ${channexRatePlan.attributes?.currency}`);
      
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å–≤—è–∑–∫–∞: PMS Room "${pmsRoom.room_number}" -> Channex Room Type "${channexRoomType.attributes.title}" -> Channex Rate Plan "${channexRatePlan.attributes.title}"`);

      // 4. –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Channex (—Ü–µ–Ω—ã —Ö–∞—Ä–¥–∫–æ–¥–∏–º: 101=100, 201=200)
      const channexBookingPayload = this.mapPMSToChannexBooking(
        pmsBooking, 
        channexRatePlan, 
        channexRoomType,
        pmsRoom  // ‚Üê –î–û–ë–ê–í–õ–Ø–ï–ú pmsRoom –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä
      );
      
      console.log('üìã –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', JSON.stringify(channexBookingPayload, null, 2));

      // 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      const response = await this.apiRequest('/bookings', 'POST', channexBookingPayload);

      if (response?.data) {
        console.log('‚úÖ –ë—Ä–æ–Ω—å —Å–æ–∑–¥–∞–Ω–∞ –≤ Channex:', response.data.id);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const updateData = { 
          external_booking_id: response.data.id,
          sync_status: 'synced',
          last_sync_at: new Date().toISOString(),
          channex_data: JSON.stringify(response.data)
        };
        
        // –ï—Å–ª–∏ room_id –±—ã–ª null, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ
        if (!pmsBooking.room_id) {
          updateData.room_id = pmsRoom.id;
          console.log(`üîó –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ: ${pmsRoom.room_number} (${pmsRoom.id})`);
        }
        
        await supabase
          .from('bookings')
          .update(updateData)
          .eq('id', pmsBooking.id);
          
        return response.data;
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±—Ä–æ–Ω–∏ ${pmsBooking.id} –≤ Channex:`, error);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await supabase
        .from('sync_errors')
        .insert({
          booking_id: pmsBooking.id,
          service: 'channex',
          error_message: error.message,
          error_details: error.stack,
          occurred_at: new Date().toISOString()
        });
        
      throw error;
    }
  }

  // --- –ú–ê–ü–ü–ò–ù–ì –î–ê–ù–ù–´–• –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø (–ü–û –û–§–ò–¶–ò–ê–õ–¨–ù–û–ô –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò) ---
  mapPMSToChannexBooking(pmsBooking, channexRatePlan, channexRoomType, pmsRoom) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –≥–æ—Å—Ç—è
    const guestName = pmsBooking.guests?.full_name || 'Guest';
    const nameParts = guestName.trim().split(' ').filter(Boolean);
    
    const firstName = nameParts[0] || 'Guest';
    const lastName = nameParts.length > 1 ? nameParts.slice(1).join(' ') : 'Guest';
    
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π
    const adultsCount = pmsBooking.guests_count || 1;
    
    // –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –¶–ï–ù –ü–û –¢–ò–ü–ê–ú –ö–û–ú–ù–ê–¢
    const checkIn = new Date(pmsBooking.check_in);
    const checkOut = new Date(pmsBooking.check_out);
    const nightsCount = Math.ceil((checkOut - checkIn) / (1000 * 60 * 60 * 24));
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É –ø–æ —Ç–∏–ø—É –∫–æ–º–Ω–∞—Ç—ã (–∫–∞–∫ –≤ Channex)
    let pricePerNight = "100.00"; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const roomType = channexRoomType?.attributes?.title || '';
    
    if (roomType === 'Standard Room') {
      pricePerNight = "100.00";
    } else if (roomType === 'Deluxe Room') {
      pricePerNight = "200.00";  
    } else if (roomType === 'Suite') {
      pricePerNight = "300.00";
    }
    
    console.log('üí∞ –û–ë–†–ê–ë–û–¢–ö–ê –¶–ï–ù (–ü–û –¢–ò–ü–ê–ú –ö–û–ú–ù–ê–¢):');
    console.log(`  –¢–∏–ø –∫–æ–º–Ω–∞—Ç—ã: "${roomType}"`);
    console.log(`  –¶–µ–Ω–∞ –∑–∞ –Ω–æ—á—å: ${pricePerNight}`);
    console.log(`  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π: ${nightsCount}`);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º days –æ–±—ä–µ–∫—Ç
    const days = {};
    for (let i = 0; i < nightsCount; i++) {
      const currentDate = new Date(checkIn);
      currentDate.setDate(currentDate.getDate() + i);
      const dateString = currentDate.toISOString().split('T')[0]; // YYYY-MM-DD
      days[dateString] = pricePerNight;
      console.log(`    ${dateString}: ${pricePerNight}`);
    }
    
    // –¢–û–ß–ù–ê–Ø —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Channex
    return {
      booking: {
        // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        property_id: this.propertyId,
        ota_reservation_code: `PMS-${pmsBooking.id}`, // ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–æ
        ota_name: this.mapSourceToOtaName(pmsBooking.source), // ‚Üê –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ô –º–∞–ø–ø–∏–Ω–≥
        arrival_date: pmsBooking.check_in,
        departure_date: pmsBooking.check_out,
        currency: 'GBP', // ‚Üê –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ï –ü–û–õ–ï (–ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        arrival_hour: "15:00", // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–µ–∑–¥–∞
        
        // –î–∞–Ω–Ω—ã–µ –≥–æ—Å—Ç—è (–¢–û–ß–ù–û –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
        customer: {
          name: firstName,
          surname: lastName,
          mail: pmsBooking.guests?.email || 'guest@example.com', // ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: mail, –Ω–µ email!
          phone: pmsBooking.guests?.phone || '',
          address: pmsBooking.guests?.address || '',
          city: pmsBooking.guests?.city || '',
          country: pmsBooking.guests?.country || 'GB',
          zip: pmsBooking.guests?.zip || ''
        },
        
        // –î–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç (–¢–û–ß–ù–û –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
        rooms: [{
          room_type_id: channexRoomType.id,
          rate_plan_id: channexRatePlan.id,
          days: days, // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: —Ü–µ–Ω—ã –ø–æ –¥–Ω—è–º
          guests: [{ // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: –º–∞—Å—Å–∏–≤ –≥–æ—Å—Ç–µ–π
            name: firstName,
            surname: lastName
          }],
          occupancy: { 
            adults: adultsCount,
            children: 0,
            infants: 0,
            ages: [] // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: –º–∞—Å—Å–∏–≤ –≤–æ–∑—Ä–∞—Å—Ç–æ–≤ –¥–µ—Ç–µ–π
          }
        }],
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        notes: pmsBooking.notes || `PMS Room: ${pmsRoom.room_number}`, // ‚Üê –£–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã –≤ –∑–∞–º–µ—Ç–∫–∞—Ö
        meta: {
          pms_room_id: pmsBooking.room_id,
          pms_room_number: pmsRoom.room_number,
          source: 'PMS'
        }
      }
    };
  }

  // --- –ú–ê–ü–ü–ò–ù–ì –ò–°–¢–û–ß–ù–ò–ö–ê –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø ---
  mapSourceToOtaName(source) {
    // –¢–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const sourceMapping = {
      'Open Channel': 'Booking.com', // Open Channel –Ω–µ –≤–∞–ª–∏–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º Booking.com
      'booking': 'Booking.com',
      'airbnb': 'Airbnb',
      'expedia': 'Expedia', 
      'agoda': 'Agoda',
      'direct': 'Booking.com', // Direct –Ω–µ –≤–∞–ª–∏–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º Booking.com
      'phone': 'Booking.com',
      'email': 'Booking.com', 
      'walk-in': 'Booking.com'
    };
    
    console.log(`üè∑Ô∏è –ú–∞–ø–ø–∏–Ω–≥ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: "${source}" ‚Üí "${sourceMapping[source] || 'Booking.com'}"`);
    return sourceMapping[source] || 'Booking.com'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Booking.com
  }

  // --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ---
  cleanRoomTitle(title) {
    if (!title) return 'Room';
    // –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã
    return title.replace(/[^a-zA-Z0-9\s\-]/g, '').trim();
  }
  
  // --- –û–ë–ù–û–í–õ–ï–ù–ò–ï –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø ---
  async updateBookingInChannex(bookingId, updateData) {
    console.log('üìù –û–±–Ω–æ–≤–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Channex:', bookingId);
    
    try {
      const response = await this.apiRequest(
        `/bookings/${bookingId}`,
        'PUT',
        { booking: updateData }
      );
      
      console.log('‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ Channex');
      return response.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      throw error;
    }
  }
  
  // --- –û–¢–ú–ï–ù–ê –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø ---
  async cancelBookingInChannex(bookingId) {
    console.log('üö´ –û—Ç–º–µ–Ω—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Channex:', bookingId);
    
    try {
      const response = await this.apiRequest(
        `/bookings/${bookingId}`,
        'PUT',
        { booking: { status: 'cancelled' } }
      );
      
      console.log('‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –≤ Channex');
      return response.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      throw error;
    }
  }

  // --- –ü–û–õ–£–ß–ï–ù–ò–ï –í–°–ï–• –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ô –ò–ó CHANNEX ---
  async getBookingsFromChannex() {
    console.log('üì• –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ Channex...');
    
    try {
      const response = await this.apiRequest(
        `/bookings?filter[property_id]=${this.propertyId}`,
        'GET'
      );
      
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${response.data?.length || 0} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∏–∑ Channex`);
      return response.data || [];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', error);
      throw error;
    }
  }

  // --- –ò–ú–ü–û–†–¢ –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ô –í PMS ---
  async importBookingsToPMS() {
    console.log('üìã –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ Channex –≤ PMS...');
    
    try {
      // 1. –ü–æ–ª—É—á–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ Channex
      const channexBookings = await this.getBookingsFromChannex();
      
      if (!channexBookings || channexBookings.length === 0) {
        console.log('‚ÑπÔ∏è –ù–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞');
        return { imported: 0, skipped: 0, errors: 0 };
      }

      // 2. –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ PMS
      const { data: existingBookings, error: selectError } = await supabase
        .from('bookings')
        .select('external_booking_id');
      
      if (selectError) throw selectError;

      const existingIds = new Set(existingBookings.map(b => b.external_booking_id));
      
      let imported = 0, skipped = 0, errors = 0;

      // 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      for (const channexBooking of channexBookings) {
        try {
          const bookingId = channexBooking.id;
          
          if (existingIds.has(bookingId)) {
            console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: ${bookingId}`);
            skipped++;
            continue;
          }

          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ Channex –≤ —Ñ–æ—Ä–º–∞—Ç PMS
          const pmsBooking = this.convertChannexToPMSBooking(channexBooking);
          
          // –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö PMS
          const { error: insertError } = await supabase
            .from('bookings')
            .insert([pmsBooking]);
          
          if (insertError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ${bookingId}:`, insertError);
            errors++;
          } else {
            console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: ${bookingId}`);
            imported++;
          }
          
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
          errors++;
        }
      }

      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–ø–æ—Ä—Ç–∞: ${imported} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ, ${skipped} –ø—Ä–æ–ø—É—â–µ–Ω–æ, ${errors} –æ—à–∏–±–æ–∫`);
      return { imported, skipped, errors };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', error);
      throw error;
    }
  }

  // --- –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø CHANNEX ‚Üí PMS ---
  convertChannexToPMSBooking(channexBooking) {
    const attrs = channexBooking.attributes;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–Ω–∞—Ç–µ –∏–∑ –ø–µ—Ä–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
    const firstRoom = attrs.rooms?.[0] || {};
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã –∏–∑ meta –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º
    let roomNumber = '101'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (attrs.meta?.pms_room_number) {
      roomNumber = attrs.meta.pms_room_number;
    } else {
      // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ —Ç–∏–ø—É –∫–æ–º–Ω–∞—Ç—ã
      const roomTypeName = firstRoom.room_type?.title || '';
      if (roomTypeName.includes('Deluxe')) {
        roomNumber = '201';
      } else if (roomTypeName.includes('Suite')) {
        roomNumber = '301';
      }
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –∏–∑ days
    let totalAmount = 0;
    if (firstRoom.days) {
      totalAmount = Object.values(firstRoom.days).reduce((sum, price) => sum + parseFloat(price || 0), 0);
    }

    return {
      id: `channex-${channexBooking.id}`,
      external_booking_id: channexBooking.id,
      room_id: `room-${roomNumber}`,
      
      // –î–∞—Ç—ã
      check_in: attrs.arrival_date,
      check_out: attrs.departure_date,
      
      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Å—Ç–µ
      guests: {
        full_name: `${attrs.customer?.name || ''} ${attrs.customer?.surname || ''}`.trim(),
        email: attrs.customer?.mail || attrs.customer?.email,
        phone: attrs.customer?.phone || '',
        address: attrs.customer?.address || '',
        city: attrs.customer?.city || '',
        country: attrs.customer?.country || 'GB'
      },
      
      // –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      guests_count: firstRoom.occupancy?.adults || 1,
      total_amount: totalAmount,
      currency: attrs.currency || 'GBP',
      
      // –ú–µ—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      status: this.mapChannexStatusToPMS(attrs.status),
      source: this.mapOtaNameToSource(attrs.ota_name),
      notes: attrs.notes || `–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ Channex (${attrs.ota_name})`,
      
      // –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      sync_status: 'synced',
      last_sync_at: new Date().toISOString(),
      channex_data: JSON.stringify(channexBooking),
      
      // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };
  }

  // --- –ú–ê–ü–ü–ò–ù–ì –°–¢–ê–¢–£–°–û–í CHANNEX ‚Üí PMS ---
  mapChannexStatusToPMS(channexStatus) {
    const statusMapping = {
      'new': 'pending',
      'confirmed': 'confirmed',
      'checked_in': 'checked_in', 
      'checked_out': 'checked_out',
      'cancelled': 'cancelled'
    };
    
    return statusMapping[channexStatus] || 'pending';
  }

  // --- –û–ë–†–ê–¢–ù–´–ô –ú–ê–ü–ü–ò–ù–ì OTA_NAME ‚Üí SOURCE ---
  mapOtaNameToSource(otaName) {
    const reverseMapping = {
      'Booking.com': 'booking',
      'Airbnb': 'airbnb',
      'Expedia': 'expedia',
      'Agoda': 'agoda'
    };
    
    return reverseMapping[otaName] || 'direct';
  }
}

const channexService = new ChannexService();
export default channexService;