// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –° –≤–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –í Channex
import { channexApiRequest } from './ChannexService.js';
import { supabase } from '@/lib/supabase';

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Channex
 */
export async function createBookingInChannex(booking) {
  console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Channex:', booking.id);
  
  try {
    // –ú–∞–ø–ø–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ PMS –≤ —Ñ–æ—Ä–º–∞—Ç Channex
    const channexBooking = mapPMSToChannexBooking(booking);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Channex API
    const response = await channexApiRequest('POST', '/booking_revisions', {
      booking_revision: channexBooking
    });
    
    if (response && response.data) {
      console.log('‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Channex:', response.data.id);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏–∑ Channex –≤ –Ω–∞—à—É –ë–î
      await supabase
        .from('bookings')
        .update({ 
          external_booking_id: response.data.id,
          channex_data: response.data
        })
        .eq('id', booking.id);
        
      return response.data;
    }
    
    throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç Channex');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Channex:', error);
    throw error;
  }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Channex
 */
export async function updateBookingInChannex(booking) {
  if (!booking.external_booking_id) {
    throw new Error('–ù–µ—Ç external_booking_id –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ Channex');
  }
  
  console.log('üìù –û–±–Ω–æ–≤–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Channex:', booking.external_booking_id);
  
  try {
    const channexBooking = mapPMSToChannexBooking(booking);
    
    const response = await channexApiRequest('PUT', `/booking_revisions/${booking.external_booking_id}`, {
      booking_revision: channexBooking
    });
    
    if (response && response.data) {
      console.log('‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ Channex');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
      await supabase
        .from('bookings')
        .update({ 
          channex_data: response.data
        })
        .eq('id', booking.id);
        
      return response.data;
    }
    
    throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç Channex');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Channex:', error);
    throw error;
  }
}

/**
 * –û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Channex
 */
export async function cancelBookingInChannex(booking) {
  if (!booking.external_booking_id) {
    throw new Error('–ù–µ—Ç external_booking_id –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤ Channex');
  }
  
  console.log('‚ùå –û—Ç–º–µ–Ω—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Channex:', booking.external_booking_id);
  
  try {
    const response = await channexApiRequest('PUT', `/booking_revisions/${booking.external_booking_id}`, {
      booking_revision: {
        status: 'cancelled'
      }
    });
    
    if (response) {
      console.log('‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –≤ Channex');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
      await supabase
        .from('bookings')
        .update({ 
          status: 'cancelled',
          channex_data: response.data
        })
        .eq('id', booking.id);
        
      return response.data;
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Channex:', error);
    throw error;
  }
}

/**
 * –ú–∞–ø–ø–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∏–∑ PMS –≤ —Ñ–æ—Ä–º–∞—Ç Channex
 */
function mapPMSToChannexBooking(booking) {
  return {
    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    arrival_date: booking.check_in,
    departure_date: booking.check_out,
    status: mapPMSStatusToChannex(booking.status),
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Å—Ç–µ
    customer: {
      name: booking.guest_name || booking.guest?.full_name,
      email: booking.guest_email || booking.guest?.email,
      phone: booking.guest_phone || booking.guest?.phone
    },
    
    // –§–∏–Ω–∞–Ω—Å—ã
    total_price: booking.total_amount || 0,
    currency: 'RUB',
    
    // –†–∞–∑–º–µ—â–µ–Ω–∏–µ
    occupancy: {
      adults: booking.guests_count || 1,
      children: 0
    },
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
    notes: booking.notes,
    
    // –ö–æ–º–Ω–∞—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –º–∞–ø–ø–∏–Ω–≥)
    room_type_id: booking.room?.channex_room_id || null,
    
    // –ò—Å—Ç–æ—á–Ω–∏–∫
    ota_name: 'Direct'
  };
}

/**
 * –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–∑ PMS –≤ Channex
 */
function mapPMSStatusToChannex(pmsStatus) {
  const mapping = {
    'pending': 'new',
    'confirmed': 'confirmed', 
    'checked_in': 'confirmed',
    'checked_out': 'confirmed',
    'cancelled': 'cancelled'
  };
  
  return mapping[pmsStatus] || 'new';
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ –∫–æ–º–Ω–∞—Ç –∏–∑ Channex
 */
export async function getRoomMapping() {
  try {
    const { data, error } = await supabase
      .from('channex_room_mapping')
      .select('room_id, channex_room_id');
      
    if (error) throw error;
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const mapping = {};
    data.forEach(item => {
      mapping[item.room_id] = item.channex_room_id;
    });
    
    return mapping;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–ø–ø–∏–Ω–≥–∞ –∫–æ–º–Ω–∞—Ç:', error);
    return {};
  }
}