import React, { useState, useEffect } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { Calendar, Users, MapPin, Star, Heart, Share, Wifi, Car, Tv, AirVent, Utensils, ArrowLeft, CreditCard, Shield, Clock, Info } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Separator } from '@/components/ui/separator';
import { Checkbox } from '@/components/ui/checkbox';
import { format } from 'date-fns';
import { ru } from 'date-fns/locale';
import airbnbChannexService from '@/services/airbnb/AirbnbChannexService';

// –î–∞–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–æ–≤ (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å airbnb-mapping.json)
const roomsData = {
  'standard_room': {
    title: 'Standard Room',
    type: '–ö–æ–º–Ω–∞—Ç–∞ —Ü–µ–ª–∏–∫–æ–º',
    location: '–£–Ω–∞–≤–∞—Ç—É–Ω–∞, –®—Ä–∏-–õ–∞–Ω–∫–∞',
    guests: 2,
    bedrooms: 1,
    bathrooms: 1,
    rating: 4.95,
    reviewsCount: 47,
    amenities: [
      { icon: Wifi, label: 'Wi-Fi' },
      { icon: Car, label: '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞' },
      { icon: Tv, label: '–¢–í' },
      { icon: AirVent, label: '–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä' },
      { icon: Utensils, label: '–ö—É—Ö–Ω—è' }
    ],
    host: {
      name: '–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω',
      avatar: 'üë®‚Äçüíº',
      yearsHosting: 4
    }
  },
  'deluxe_room': {
    title: 'Deluxe Room',
    type: '–ö–æ–º–Ω–∞—Ç–∞ –ª—é–∫—Å',
    location: '–£–Ω–∞–≤–∞—Ç—É–Ω–∞, –®—Ä–∏-–õ–∞–Ω–∫–∞',
    guests: 2,
    bedrooms: 1,
    bathrooms: 1,
    rating: 4.89,
    reviewsCount: 23,
    amenities: [
      { icon: Wifi, label: 'Wi-Fi' },
      { icon: Car, label: '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞' },
      { icon: Tv, label: '–¢–í' },
      { icon: AirVent, label: '–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä' },
      { icon: Utensils, label: '–ö—É—Ö–Ω—è' }
    ],
    host: {
      name: '–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω',
      avatar: 'üë®‚Äçüíº',
      yearsHosting: 4
    }
  },
  'suite': {
    title: 'Suite',
    type: '–õ—é–∫—Å —Ü–µ–ª–∏–∫–æ–º',
    location: '–£–Ω–∞–≤–∞—Ç—É–Ω–∞, –®—Ä–∏-–õ–∞–Ω–∫–∞',
    guests: 4,
    bedrooms: 2,
    bathrooms: 2,
    rating: 4.92,
    reviewsCount: 31,
    amenities: [
      { icon: Wifi, label: 'Wi-Fi' },
      { icon: Car, label: '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞' },
      { icon: Tv, label: '–¢–í' },
      { icon: AirVent, label: '–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä' },
      { icon: Utensils, label: '–ö—É—Ö–Ω—è' }
    ],
    host: {
      name: '–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω',
      avatar: 'üë®‚Äçüíº',
      yearsHosting: 4
    }
  }
};

export default function AirbnbBooking() {
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  
  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const roomId = searchParams.get('roomId');
  const checkIn = searchParams.get('checkin');
  const checkOut = searchParams.get('checkout');
  const guestsCount = parseInt(searchParams.get('guests'));
  const nights = parseInt(searchParams.get('nights'));
  const pricePerNight = parseInt(searchParams.get('totalPrice')) / nights;
  
  const room = roomsData[roomId];
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã
  const [guestInfo, setGuestInfo] = useState({
    firstName: '',
    lastName: '',
    email: '',
    phone: '',
    message: ''
  });
  
  const [paymentInfo, setPaymentInfo] = useState({
    cardNumber: '',
    expiryDate: '',
    cvv: '',
    nameOnCard: '',
    country: '–†–æ—Å—Å–∏—è',
    postalCode: ''
  });
  
  const [loading, setLoading] = useState(false);
  const [agreeToTerms, setAgreeToTerms] = useState(false);
  
  // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
  const subtotal = pricePerNight * nights;
  const serviceFee = Math.round(subtotal * 0.14); // 14% –∫–æ–º–∏—Å—Å–∏–∏ Airbnb
  const taxes = Math.round(subtotal * 0.05); // 5% –Ω–∞–ª–æ–≥–∏
  const total = subtotal + serviceFee + taxes;
  
  const handleBooking = async () => {
    if (!agreeToTerms) {
      alert('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏');
      return;
    }
    
    if (!guestInfo.firstName || !guestInfo.lastName || !guestInfo.email) {
      alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
      return;
    }
    
    setLoading(true);
    
    try {
      console.log('üè† –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Airbnb');
      console.log('üìã –î–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', {
        roomId,
        room: room.title,
        checkIn,
        checkOut,
        nights,
        guests: guestsCount,
        total,
        guest: `${guestInfo.firstName} ${guestInfo.lastName}`
      });
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ PMS —á–µ—Ä–µ–∑ AirbnbChannexService
      const bookingData = {
        room_type: roomId,
        check_in: checkIn,
        check_out: checkOut,
        guest_first_name: guestInfo.firstName,
        guest_last_name: guestInfo.lastName,
        guest_email: guestInfo.email,
        guest_phone: guestInfo.phone,
        adults: guestsCount,
        children: 0,
        notes: guestInfo.message,
        total_amount: total,  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
        total_price: total,   // –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        price_per_night: pricePerNight,  // –¶–µ–Ω–∞ –∑–∞ –Ω–æ—á—å
        nights: nights,  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π
        test: true // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Ç–µ—Å—Ç–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      };
      
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ AirbnbChannexService...');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–∞—à —Å–µ—Ä–≤–∏—Å
      const result = await airbnbChannexService.createAirbnbBooking(bookingData);
      
      console.log('‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ:', result);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º availability –≤ Channex —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –æ–≤–µ—Ä–±—É–∫–∏–Ω–≥
      try {
        const dates = [];
        const currentDate = new Date(checkIn);
        while (currentDate < new Date(checkOut)) {
          dates.push(currentDate.toISOString().split('T')[0]);
          currentDate.setDate(currentDate.getDate() + 1);
        }
        
        // –£–º–µ–Ω—å—à–∞–µ–º availability –Ω–∞ 1 –¥–ª—è –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞—Ç
        const currentAvailability = room.availability_count || 1;
        const newAvailability = Math.max(0, currentAvailability - 1);
        
        console.log(`üìâ –û–±–Ω–æ–≤–ª—è–µ–º availability: ${room.id} —Å ${currentAvailability} –¥–æ ${newAvailability}`);
        await airbnbChannexService.updateAirbnbAvailability(room.id, dates, newAvailability);
        
      } catch (availabilityError) {
        console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è availability:', availabilityError);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ availability –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      navigate('/airbnb-confirmation', {
        state: {
          booking: {
            id: result.data?.id,
            room: room.title,
            checkIn,
            checkOut,
            nights,
            guests: guestsCount,
            total,
            guest: `${guestInfo.firstName} ${guestInfo.lastName}`,
            email: guestInfo.email
          }
        }
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setLoading(false);
    }
  };
  
  if (!room) {
    return (
      <div className="min-h-screen bg-white flex items-center justify-center">
        <div className="text-center">
          <p className="text-xl text-gray-600 mb-4">–ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω</p>
          <Button onClick={() => navigate('/airbnb')}>
            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∏—Å–∫—É
          </Button>
        </div>
      </div>
    );
  }
  
  return (
    <div className="min-h-screen bg-gray-50">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="bg-white border-b">
        <div className="max-w-7xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <Button
                variant="ghost"
                size="sm"
                onClick={() => navigate('/airbnb')}
                className="p-2"
              >
                <ArrowLeft className="h-4 w-4" />
              </Button>
              <div className="flex items-center space-x-2">
                <div className="w-8 h-8 bg-red-500 rounded text-white flex items-center justify-center font-bold">
                  A
                </div>
                <span className="text-xl font-semibold text-red-500">airbnb</span>
              </div>
            </div>
            <span className="text-sm text-gray-500">üß™ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞</span>
          </div>
        </div>
      </div>
      
      <div className="max-w-7xl mx-auto px-6 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∂–∏–ª—å–µ */}
          <div>
            <h1 className="text-3xl font-semibold mb-6">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ</h1>
            
            {/* –ö–∞—Ä—Ç–æ—á–∫–∞ –∂–∏–ª—å—è */}
            <Card className="mb-6">
              <CardContent className="p-6">
                <div className="flex space-x-4">
                  <div className="w-24 h-24 bg-gradient-to-r from-gray-200 to-gray-300 rounded-lg flex items-center justify-center">
                    <span className="text-2xl">üè†</span>
                  </div>
                  <div className="flex-1">
                    <div className="flex items-center space-x-2 text-sm text-gray-600 mb-1">
                      <span>{room.type}</span>
                      <span>‚Ä¢</span>
                      <div className="flex items-center">
                        <Star className="h-4 w-4 fill-current mr-1" />
                        <span>{room.rating} ({room.reviewsCount})</span>
                      </div>
                    </div>
                    <h3 className="font-semibold text-lg mb-1">{room.title}</h3>
                    <p className="text-sm text-gray-600 mb-2">
                      {room.guests} –≥–æ—Å—Ç–µ–π ¬∑ {room.bedrooms} —Å–ø–∞–ª—å–Ω–∏ ¬∑ {room.bathrooms} –≤–∞–Ω–Ω–∞—è
                    </p>
                    <div className="flex flex-wrap gap-1">
                      {room.amenities.slice(0, 4).map((amenity, index) => (
                        <Badge key={index} variant="secondary" className="text-xs">
                          <amenity.icon className="h-3 w-3 mr-1" />
                          {amenity.label}
                        </Badge>
                      ))}
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
            
            {/* –î–µ—Ç–∞–ª–∏ –ø–æ–µ–∑–¥–∫–∏ */}
            <Card className="mb-6">
              <CardHeader>
                <CardTitle className="text-lg">–í–∞—à–∞ –ø–æ–µ–∑–¥–∫–∞</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex justify-between items-center">
                  <div>
                    <div className="font-medium">–î–∞—Ç—ã</div>
                    <div className="text-sm text-gray-600">
                      {checkIn && format(new Date(checkIn), 'd MMM', { locale: ru })} - {checkOut && format(new Date(checkOut), 'd MMM yyyy', { locale: ru })}
                    </div>
                  </div>
                  <Button variant="ghost" size="sm" className="text-sm underline">
                    –ò–∑–º–µ–Ω–∏—Ç—å
                  </Button>
                </div>
                <Separator />
                <div className="flex justify-between items-center">
                  <div>
                    <div className="font-medium">–ì–æ—Å—Ç–∏</div>
                    <div className="text-sm text-gray-600">{guestsCount} –≥–æ—Å—Ç–µ–π</div>
                  </div>
                  <Button variant="ghost" size="sm" className="text-sm underline">
                    –ò–∑–º–µ–Ω–∏—Ç—å
                  </Button>
                </div>
              </CardContent>
            </Card>
            
            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö–æ–∑—è–∏–Ω–µ */}
            <Card>
              <CardContent className="p-6">
                <div className="flex items-center space-x-4 mb-4">
                  <div className="w-12 h-12 bg-gray-200 rounded-full flex items-center justify-center text-xl">
                    {room.host.avatar}
                  </div>
                  <div>
                    <div className="font-medium">–•–æ–∑—è–∏–Ω: {room.host.name}</div>
                    <div className="text-sm text-gray-600">{room.host.yearsHosting} –≥–æ–¥–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≥–æ—Å—Ç–µ–π</div>
                  </div>
                </div>
                <div className="space-y-2 text-sm">
                  <div className="flex items-center space-x-2">
                    <Shield className="h-4 w-4 text-green-500" />
                    <span>–õ–∏—á–Ω–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Star className="h-4 w-4 text-yellow-500" />
                    <span>–í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —Ö–æ–∑—è–∏–Ω–∞</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Clock className="h-4 w-4 text-blue-500" />
                    <span>–ë—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞–µ—Ç</span>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
          
          {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —Ñ–æ—Ä–º–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è */}
          <div>
            <Card className="sticky top-6">
              <CardContent className="p-6">
                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Å—Ç—è—Ö */}
                <div className="mb-6">
                  <h3 className="text-xl font-semibold mb-4">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Å—Ç—è—Ö</h3>
                  <div className="space-y-4">
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="firstName">–ò–º—è *</Label>
                        <Input
                          id="firstName"
                          value={guestInfo.firstName}
                          onChange={(e) => setGuestInfo({...guestInfo, firstName: e.target.value})}
                          placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è"
                        />
                      </div>
                      <div>
                        <Label htmlFor="lastName">–§–∞–º–∏–ª–∏—è *</Label>
                        <Input
                          id="lastName"
                          value={guestInfo.lastName}
                          onChange={(e) => setGuestInfo({...guestInfo, lastName: e.target.value})}
                          placeholder="–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é"
                        />
                      </div>
                    </div>
                    <div>
                      <Label htmlFor="email">–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ *</Label>
                      <Input
                        id="email"
                        type="email"
                        value={guestInfo.email}
                        onChange={(e) => setGuestInfo({...guestInfo, email: e.target.value})}
                        placeholder="example@email.com"
                      />
                    </div>
                    <div>
                      <Label htmlFor="phone">–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</Label>
                      <Input
                        id="phone"
                        type="tel"
                        value={guestInfo.phone}
                        onChange={(e) => setGuestInfo({...guestInfo, phone: e.target.value})}
                        placeholder="+7 (900) 000-00-00"
                      />
                    </div>
                    <div>
                      <Label htmlFor="message">–°–æ–æ–±—â–µ–Ω–∏–µ —Ö–æ–∑—è–∏–Ω—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</Label>
                      <Textarea
                        id="message"
                        value={guestInfo.message}
                        onChange={(e) => setGuestInfo({...guestInfo, message: e.target.value})}
                        placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ —Ö–æ–∑—è–∏–Ω—É –æ —Ü–µ–ª–∏ –ø–æ–µ–∑–¥–∫–∏"
                        rows={3}
                      />
                    </div>
                  </div>
                </div>
                
                <Separator className="my-6" />
                
                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ */}
                <div className="mb-6">
                  <h3 className="text-xl font-semibold mb-4">–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</h3>
                  <div className="space-y-4">
                    <div>
                      <Label htmlFor="cardNumber">–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã *</Label>
                      <div className="relative">
                        <Input
                          id="cardNumber"
                          value={paymentInfo.cardNumber}
                          onChange={(e) => setPaymentInfo({...paymentInfo, cardNumber: e.target.value})}
                          placeholder="1234 5678 9012 3456"
                          className="pl-10"
                        />
                        <CreditCard className="h-4 w-4 absolute left-3 top-3 text-gray-400" />
                      </div>
                      <p className="text-xs text-gray-500 mt-1">üí≥ –¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞: 4242 4242 4242 4242</p>
                    </div>
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="expiryDate">–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è</Label>
                        <Input
                          id="expiryDate"
                          value={paymentInfo.expiryDate}
                          onChange={(e) => setPaymentInfo({...paymentInfo, expiryDate: e.target.value})}
                          placeholder="MM/YY"
                        />
                      </div>
                      <div>
                        <Label htmlFor="cvv">CVV</Label>
                        <Input
                          id="cvv"
                          value={paymentInfo.cvv}
                          onChange={(e) => setPaymentInfo({...paymentInfo, cvv: e.target.value})}
                          placeholder="123"
                          maxLength={4}
                        />
                      </div>
                    </div>
                    <div>
                      <Label htmlFor="nameOnCard">–ò–º—è –Ω–∞ –∫–∞—Ä—Ç–µ</Label>
                      <Input
                        id="nameOnCard"
                        value={paymentInfo.nameOnCard}
                        onChange={(e) => setPaymentInfo({...paymentInfo, nameOnCard: e.target.value})}
                        placeholder="IVAN PETROV"
                      />
                    </div>
                  </div>
                </div>
                
                <Separator className="my-6" />
                
                {/* –î–µ—Ç–∞–ª–∏ —Ü–µ–Ω—ã */}
                <div className="mb-6">
                  <h3 className="text-xl font-semibold mb-4">–î–µ—Ç–∞–ª–∏ —Ü–µ–Ω—ã</h3>
                  <div className="space-y-3 text-sm">
                    <div className="flex justify-between">
                      <span>${pricePerNight} √ó {nights} –Ω–æ—á.</span>
                      <span>${subtotal}</span>
                    </div>
                    <div className="flex justify-between">
                      <span>–°–µ—Ä–≤–∏—Å–Ω—ã–π —Å–±–æ—Ä Airbnb</span>
                      <span>${serviceFee}</span>
                    </div>
                    <div className="flex justify-between">
                      <span>–ù–∞–ª–æ–≥–∏</span>
                      <span>${taxes}</span>
                    </div>
                    <Separator />
                    <div className="flex justify-between font-semibold text-base">
                      <span>–ò—Ç–æ–≥–æ (USD)</span>
                      <span>${total}</span>
                    </div>
                  </div>
                </div>
                
                {/* –°–æ–≥–ª–∞—Å–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏ */}
                <div className="flex items-start space-x-2 mb-6">
                  <Checkbox
                    id="terms"
                    checked={agreeToTerms}
                    onCheckedChange={setAgreeToTerms}
                    className="mt-1"
                  />
                  <label htmlFor="terms" className="text-sm text-gray-600 cursor-pointer">
                    –Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å{' '}
                    <Button variant="link" className="p-0 h-auto text-sm underline">
                      –ø—Ä–∞–≤–∏–ª–∞–º–∏ —Å–µ—Ä–≤–∏—Å–∞
                    </Button>
                    {' '}–∏{' '}
                    <Button variant="link" className="p-0 h-auto text-sm underline">
                      –ø–æ–ª–∏—Ç–∏–∫–æ–π –æ—Ç–º–µ–Ω—ã
                    </Button>
                    , –∞ —Ç–∞–∫–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é, —á—Ç–æ –ø–æ–Ω–∏–º–∞—é, –∫–∞–∫ —Ö–æ–∑—è–∏–Ω –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º–æ–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
                  </label>
                </div>
                
                {/* –ö–Ω–æ–ø–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è */}
                <Button
                  onClick={handleBooking}
                  disabled={loading || !agreeToTerms}
                  className="w-full bg-red-500 hover:bg-red-600 text-white py-3 text-lg font-semibold"
                >
                  {loading ? (
                    <div className="flex items-center space-x-2">
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                      <span>–û–±—Ä–∞–±–æ—Ç–∫–∞...</span>
                    </div>
                  ) : (
                    `–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞ $${total}`
                  )}
                </Button>
                
                <div className="flex items-center justify-center mt-4 text-xs text-gray-500">
                  <Info className="h-4 w-4 mr-1" />
                  <span>üß™ –¢–µ—Å—Ç–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - —Ä–µ–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç—Å—è</span>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
}