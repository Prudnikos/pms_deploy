import React, { useState, useEffect } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { Calendar, Users, MapPin, Star, Heart, Share, Wifi, Car, Tv, AirVent, Utensils } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Separator } from '@/components/ui/separator';
import { format } from 'date-fns';
import { ru } from 'date-fns/locale';
import { supabase } from '@/lib/supabase';
import airbnbMapping from '@/config/airbnb-mapping.json';

// Channex API configuration
const CHANNEX_API_URL = import.meta.env.VITE_CHANNEX_API_URL || 'https://staging.channex.io/api/v1';
const CHANNEX_API_KEY = import.meta.env.VITE_CHANNEX_API_KEY;
const CHANNEX_PROPERTY_ID = import.meta.env.VITE_CHANNEX_PROPERTY_ID;

/**
 * API –∑–∞–ø—Ä–æ—Å –∫ Channex
 */
async function channexApiRequest(endpoint, method = 'GET') {
  const url = `${CHANNEX_API_URL}${endpoint}`;
  console.log(`üåê Channex API –∑–∞–ø—Ä–æ—Å: ${method} ${url}`);

  try {
    const options = {
      method,
      headers: {
        'user-api-key': CHANNEX_API_KEY,
        'Content-Type': 'application/json',
      },
    };

    const response = await fetch(url, options);
    const responseText = await response.text();

    if (!response.ok) {
      console.error('‚ùå Channex API –æ—à–∏–±–∫–∞:', responseText);
      throw new Error(`API Error: ${response.status}`);
    }

    return responseText ? JSON.parse(responseText) : { success: true };
  } catch (error) {
    console.error('üí• Channex API Request Error:', error);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å Room Types –∏–∑ Channex
 */
async function getChannexRoomTypes() {
  console.log('üè® –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã –Ω–æ–º–µ—Ä–æ–≤ –∏–∑ Channex...');
  try {
    const response = await channexApiRequest(`/room_types?property_id=${CHANNEX_PROPERTY_ID}`);
    console.log('üìã –¢–∏–ø—ã –Ω–æ–º–µ—Ä–æ–≤ –∏–∑ Channex:', response.data?.length || 0);
    return response.data || [];
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –Ω–æ–º–µ—Ä–æ–≤:', error);
    return [];
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å Rate Plans –∏–∑ Channex
 */
async function getChannexRatePlans() {
  console.log('üí∞ –ü–æ–ª—É—á–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã –∏–∑ Channex...');
  try {
    const response = await channexApiRequest(`/rate_plans?property_id=${CHANNEX_PROPERTY_ID}`);
    console.log('üìã –¢–∞—Ä–∏—Ñ—ã –∏–∑ Channex:', response.data?.length || 0);
    return response.data || [];
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤:', error);
    return [];
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å Availability (–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å) –∏–∑ Channex –¥–ª—è –¥–∞—Ç
 */
async function getChannexAvailability(checkInDate, checkOutDate) {
  console.log('üìä –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑ Channex –¥–ª—è –¥–∞—Ç:', { checkInDate, checkOutDate });
  
  try {
    // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    const endpoint = `/restrictions?filter[property_id]=${CHANNEX_PROPERTY_ID}&filter[date][gte]=${checkInDate}&filter[date][lte]=${checkOutDate}&filter[restrictions]=availability`;
    
    console.log('üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º availability endpoint:', endpoint);
    const response = await channexApiRequest(endpoint);
    console.log('‚úÖ Availability –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', response.data);
    
    // –ü–∞—Ä—Å–∏–º availability –¥–∞–Ω–Ω—ã–µ –ø–æ rate_plan_id
    const availabilityData = {};
    if (response.data) {
      for (const [ratePlanId, dates] of Object.entries(response.data)) {
        availabilityData[ratePlanId] = dates;
        console.log(`üìã Rate Plan ${ratePlanId}: ${Object.keys(dates).length} –¥–∞—Ç —Å availability`);
      }
    }
    
    return { success: true, data: availabilityData };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è availability:', error);
    return { success: false, data: {} };
  }
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å Channex –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Airbnb
 */
function convertChannexToAirbnbRooms(roomTypes, ratePlans, availabilityData, useAvailabilityData) {
  console.log('üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Channex ‚Üí Airbnb —Ñ–æ—Ä–º–∞—Ç...');
  console.log('üìä –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', { roomTypes: roomTypes.length, ratePlans: ratePlans.length, availability: Object.keys(availabilityData).length });
  
  const airbnbRooms = [];
  const mapping = airbnbMapping.airbnb_integration.room_mapping;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
  const useConfigFallback = !useAvailabilityData;
  console.log(useConfigFallback ? 'üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ (availability API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)' : 'üìà –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ availability API');
  
  // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –º–∞–ø–ø–∏–Ω–≥—É Airbnb
  for (const [airbnbId, config] of Object.entries(mapping)) {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä ${airbnbId}...`);
    
    const roomType = roomTypes.find(rt => rt.id === config.channex_room_type_id);
    const ratePlan = ratePlans.find(rp => rp.id === config.channex_rate_plan_id);
    
    if (!roomType) {
      console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${airbnbId}: –Ω–µ—Ç room_type —Å ID ${config.channex_room_type_id}`);
      continue;
    }
    
    if (!ratePlan) {
      console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${airbnbId}: –Ω–µ—Ç rate_plan —Å ID ${config.channex_rate_plan_id}`);
      continue;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑ Channex API
    let minAvailability = Number.MAX_SAFE_INTEGER;
    let hasAvailability = false;
    
    if (useConfigFallback) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ (fallback)
      minAvailability = config.availability_count || 1;
      hasAvailability = minAvailability > 0;
      console.log(`üìä ${airbnbId}: –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å = ${minAvailability}`);
    } else {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º availability –¥–∞–Ω–Ω—ã–µ –∏–∑ API –ø–æ rate_plan_id
      const ratePlanAvailability = availabilityData[config.channex_rate_plan_id];
      if (ratePlanAvailability) {
        // –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∑–∞ –ø–µ—Ä–∏–æ–¥
        for (const [date, restrictions] of Object.entries(ratePlanAvailability)) {
          const availability = parseInt(restrictions.availability || 0);
          if (availability < minAvailability) {
            minAvailability = availability;
          }
          hasAvailability = true;
        }
        console.log(`üìä ${airbnbId}: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è availability –∑–∞ –ø–µ—Ä–∏–æ–¥ = ${minAvailability}`);
      } else {
        console.log(`‚ö†Ô∏è ${airbnbId}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö availability –¥–ª—è rate_plan ${config.channex_rate_plan_id}`);
        // Fallback –Ω–∞ config availability_count –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ API
        if (config.availability_count && config.availability_count > 0) {
          minAvailability = config.availability_count;
          hasAvailability = true;
          console.log(`   üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞: ${config.availability_count}`);
        } else {
          minAvailability = 0;
        }
      }
    }
    
    if (!hasAvailability || minAvailability <= 0) {
      console.log(`‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${airbnbId}: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (min=${minAvailability})`);
      continue;
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É
    const basePrice = parseFloat(config.base_price);
    
    console.log(`‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä ${airbnbId}: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å=${minAvailability}, —Ü–µ–Ω–∞=${basePrice}`);
    
    airbnbRooms.push({
      id: airbnbId,
      title: config.airbnb_room_title,
      type: getAirbnbRoomType(airbnbId),
      location: '–£–Ω–∞–≤–∞—Ç—É–Ω–∞, –®—Ä–∏-–õ–∞–Ω–∫–∞',
      guests: config.max_occupancy || 2,
      bedrooms: getBedrooms(airbnbId),
      bathrooms: getBathrooms(airbnbId),
      price: basePrice,
      rating: getRating(airbnbId),
      reviewsCount: getReviewsCount(airbnbId),
      images: getImages(airbnbId),
      amenities: getAmenities(),
      channex_room_type_id: config.channex_room_type_id,
      channex_rate_plan_id: config.channex_rate_plan_id,
      available: true,
      availability_count: minAvailability
    });
  }
  
  console.log(`üéØ –ò—Ç–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è Airbnb: ${airbnbRooms.length}`);
  return airbnbRooms;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ mock –¥–∞–Ω–Ω—ã—Ö
function getAirbnbRoomType(airbnbId) {
  const types = {
    'standard_apartment': '–ö–≤–∞—Ä—Ç–∏—Ä–∞ —Ü–µ–ª–∏–∫–æ–º',
    'deluxe_suite': '–ö–≤–∞—Ä—Ç–∏—Ä–∞ —Ü–µ–ª–∏–∫–æ–º',
    'bungalow': '–ë—É–Ω–≥–∞–ª–æ —Ü–µ–ª–∏–∫–æ–º',
    'villa': '–í–∏–ª–ª–∞ —Ü–µ–ª–∏–∫–æ–º'
  };
  return types[airbnbId] || '–ù–æ–º–µ—Ä —Ü–µ–ª–∏–∫–æ–º';
}

function getBedrooms(airbnbId) {
  const bedrooms = {
    'standard_apartment': 1,
    'deluxe_suite': 2,
    'bungalow': 1,
    'villa': 3
  };
  return bedrooms[airbnbId] || 1;
}

function getBathrooms(airbnbId) {
  const bathrooms = {
    'standard_apartment': 1,
    'deluxe_suite': 2,
    'bungalow': 1,
    'villa': 2
  };
  return bathrooms[airbnbId] || 1;
}

function getRating(airbnbId) {
  const ratings = {
    'standard_apartment': 4.95,
    'deluxe_suite': 4.89,
    'bungalow': 4.92,
    'villa': 4.97
  };
  return ratings[airbnbId] || 4.8;
}

function getReviewsCount(airbnbId) {
  const reviews = {
    'standard_apartment': 47,
    'deluxe_suite': 23,
    'bungalow': 31,
    'villa': 18
  };
  return reviews[airbnbId] || 25;
}

function getImages(airbnbId) {
  return [
    `/airbnb-mock/${airbnbId}-1.jpg`,
    `/airbnb-mock/${airbnbId}-2.jpg`,
    `/airbnb-mock/${airbnbId}-3.jpg`,
    `/airbnb-mock/${airbnbId}-4.jpg`
  ];
}

function getAmenities() {
  return [
    { icon: Wifi, label: 'Wi-Fi' },
    { icon: Car, label: '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞' },
    { icon: Tv, label: '–¢–í' },
    { icon: AirVent, label: '–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä' },
    { icon: Utensils, label: '–ö—É—Ö–Ω—è' }
  ];
}

export default function AirbnbSimulator() {
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const [checkIn, setCheckIn] = useState(searchParams.get('checkin') || '');
  const [checkOut, setCheckOut] = useState(searchParams.get('checkout') || '');
  const [guestsCount, setGuestsCount] = useState(parseInt(searchParams.get('guests')) || 2);
  const [availableRooms, setAvailableRooms] = useState([]);
  const [loading, setLoading] = useState(false);

  // –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–æ–≤ –∏–∑ Channex Inventory API
  const checkAvailability = async () => {
    if (!checkIn || !checkOut) return;
    
    setLoading(true);
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Channex –¥–ª—è –¥–∞—Ç:', { checkIn, checkOut, guestsCount });
    
    try {
      // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Channex
      console.log('üöÄ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Channex API...');
      const [roomTypes, ratePlans, availabilityResponse] = await Promise.all([
        getChannexRoomTypes(),
        getChannexRatePlans(), 
        getChannexAvailability(checkIn, checkOut)
      ]);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º
      const availabilityData = availabilityResponse.data || {};
      const useAvailabilityData = availabilityResponse.success;

      console.log('üìä Channex –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', {
        roomTypes: roomTypes.length,
        ratePlans: ratePlans.length,
        availability: Object.keys(availabilityData).length,
        availabilityMode: useAvailabilityData ? 'API' : 'Config'
      });

      // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ Suite ID
      console.log('üîç –î–ï–¢–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï CHANNEX:');
      console.log('üìã Room Types:', roomTypes.map(rt => ({
        id: rt.id,
        title: rt.attributes.title,
        count: rt.attributes.count
      })));
      console.log('üí∞ Rate Plans:', ratePlans.map(rp => ({
        id: rp.id, 
        title: rp.attributes.title,
        room_type_id: rp.attributes.room_type_id
      })));
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ window –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      window.lastRatePlansData = ratePlans;
      window.lastRoomTypesData = roomTypes;

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Channex –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç Airbnb
      const airbnbRooms = convertChannexToAirbnbRooms(roomTypes, ratePlans, availabilityData, useAvailabilityData);
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≥–æ—Å—Ç–µ–π
      const filteredRooms = airbnbRooms.filter(room => {
        const hasEnoughCapacity = room.guests >= guestsCount;
        console.log(`üè† ${room.title}: –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å=${room.guests}‚â•${guestsCount}=${hasEnoughCapacity}`);
        return hasEnoughCapacity;
      });

      setAvailableRooms(filteredRooms);
      console.log(`‚úÖ –ò—Ç–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: ${filteredRooms.length} –∏–∑ ${airbnbRooms.length} (–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ø–æ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Channex:', error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
      setAvailableRooms([]);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (checkIn && checkOut) {
      checkAvailability();
    }
  }, [checkIn, checkOut, guestsCount]);

  const calculateNights = () => {
    if (!checkIn || !checkOut) return 0;
    const start = new Date(checkIn);
    const end = new Date(checkOut);
    return Math.ceil((end - start) / (1000 * 60 * 60 * 24));
  };

  const handleBookRoom = (room) => {
    const bookingParams = new URLSearchParams({
      roomId: room.id,
      checkin: checkIn,
      checkout: checkOut,
      guests: guestsCount.toString(),
      nights: calculateNights().toString(),
      totalPrice: (room.price * calculateNights()).toString()
    });

    navigate(`/airbnb-booking?${bookingParams.toString()}`);
  };

  const nights = calculateNights();

  return (
    <div className="min-h-screen bg-white">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤ —Å—Ç–∏–ª–µ Airbnb */}
      <div className="border-b">
        <div className="max-w-7xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <div className="w-8 h-8 bg-red-500 rounded text-white flex items-center justify-center font-bold">
                A
              </div>
              <span className="text-xl font-semibold text-red-500">airbnb</span>
              <span className="text-sm text-gray-500 ml-4">üß™ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ PMS</span>
            </div>
            <Button
              variant="outline"
              onClick={() => navigate('/dashboard')}
              className="text-sm"
            >
              ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ PMS
            </Button>
          </div>
        </div>
      </div>

      {/* –ü–æ–∏—Å–∫ */}
      <div className="max-w-7xl mx-auto px-6 py-8">
        <div className="mb-8">
          <h1 className="text-3xl font-semibold mb-2">–û—Ç–µ–ª–∏ –≤ –£–Ω–∞–≤–∞—Ç—É–Ω–µ</h1>
          <p className="text-gray-600">–ë–æ–ª–µ–µ {availableRooms.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è</p>
        </div>

        {/* –§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞ */}
        <Card className="mb-8">
          <CardContent className="p-6">
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –ü—Ä–∏–±—ã—Ç–∏–µ
                </label>
                <Input
                  type="date"
                  value={checkIn}
                  onChange={(e) => setCheckIn(e.target.value)}
                  min={format(new Date(), 'yyyy-MM-dd')}
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –í—ã–µ–∑–¥
                </label>
                <Input
                  type="date"
                  value={checkOut}
                  onChange={(e) => setCheckOut(e.target.value)}
                  min={checkIn || format(new Date(), 'yyyy-MM-dd')}
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –ì–æ—Å—Ç–∏
                </label>
                <Input
                  type="number"
                  value={guestsCount}
                  onChange={(e) => setGuestsCount(parseInt(e.target.value))}
                  min="1"
                  max="10"
                />
              </div>
              <div className="flex items-end">
                <Button
                  onClick={checkAvailability}
                  disabled={!checkIn || !checkOut || loading}
                  className="w-full bg-red-500 hover:bg-red-600 text-white"
                >
                  {loading ? '–ü–æ–∏—Å–∫...' : '–ù–∞–π—Ç–∏ –∂–∏–ª—å–µ'}
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ */}
        {loading ? (
          <div className="flex justify-center py-8">
            <div className="text-center">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-red-500 mx-auto mb-4"></div>
              <p className="text-gray-600">–ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã...</p>
            </div>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            {availableRooms.map((room) => (
              <Card key={room.id} className="overflow-hidden hover:shadow-lg transition-shadow cursor-pointer">
                <div
                  className="relative"
                  onClick={() => handleBookRoom(room)}
                >
                  {/* –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
                  <div className="h-64 bg-gradient-to-r from-gray-200 to-gray-300 relative">
                    <div className="absolute inset-0 flex items-center justify-center">
                      <div className="text-center">
                        <div className="text-4xl mb-2">üè†</div>
                        <p className="text-gray-600 font-medium">{room.title}</p>
                      </div>
                    </div>
                    
                    {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
                    <div className="absolute top-3 right-3 flex space-x-2">
                      <Button size="sm" variant="outline" className="bg-white/90 backdrop-blur-sm">
                        <Heart className="h-4 w-4" />
                      </Button>
                      <Button size="sm" variant="outline" className="bg-white/90 backdrop-blur-sm">
                        <Share className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>

                  <CardContent className="p-4">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-sm text-gray-600">{room.type}</span>
                      <div className="flex items-center space-x-1">
                        <Star className="h-4 w-4 fill-current" />
                        <span className="text-sm font-medium">{room.rating}</span>
                        <span className="text-sm text-gray-500">({room.reviewsCount})</span>
                      </div>
                    </div>

                    <h3 className="font-semibold text-gray-900 mb-1">{room.title}</h3>
                    
                    <div className="flex items-center text-sm text-gray-600 mb-2">
                      <MapPin className="h-4 w-4 mr-1" />
                      {room.location}
                    </div>

                    <div className="flex items-center text-sm text-gray-600 mb-3">
                      <Users className="h-4 w-4 mr-1" />
                      {room.guests} –≥–æ—Å—Ç–µ–π ¬∑ {room.bedrooms} —Å–ø–∞–ª—å–Ω–∏ ¬∑ {room.bathrooms} –≤–∞–Ω–Ω–∞—è
                    </div>

                    {/* –£–¥–æ–±—Å—Ç–≤–∞ */}
                    <div className="flex flex-wrap gap-1 mb-3">
                      {room.amenities.slice(0, 3).map((amenity, index) => (
                        <Badge key={index} variant="secondary" className="text-xs">
                          <amenity.icon className="h-3 w-3 mr-1" />
                          {amenity.label}
                        </Badge>
                      ))}
                      {room.amenities.length > 3 && (
                        <Badge variant="outline" className="text-xs">
                          +{room.amenities.length - 3}
                        </Badge>
                      )}
                    </div>

                    <Separator className="my-3" />

                    <div className="flex items-center justify-between">
                      <div>
                        <span className="text-xl font-semibold">${room.price}</span>
                        <span className="text-gray-600"> / –Ω–æ—á—å</span>
                        {nights > 0 && (
                          <div className="text-sm text-gray-600">
                            ${room.price * nights} –∑–∞ {nights} –Ω–æ—á.
                          </div>
                        )}
                      </div>
                      <Badge variant={room.available ? "default" : "destructive"}>
                        {room.available ? "–î–æ—Å—Ç—É–ø–Ω–æ" : "–ó–∞–Ω—è—Ç–æ"}
                      </Badge>
                    </div>
                  </CardContent>
                </div>
              </Card>
            ))}
          </div>
        )}

        {availableRooms.length === 0 && !loading && (
          <div className="text-center py-12">
            <div className="text-6xl mb-4">üòî</div>
            <h3 className="text-xl font-medium text-gray-900 mb-2">
              –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            </h3>
            <p className="text-gray-600 mb-4">
              –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è {guestsCount} –≥–æ—Å—Ç–µ–π
            </p>
            <Button
              variant="outline"
              onClick={() => {
                setCheckIn('');
                setCheckOut('');
                setGuestsCount(2);
                setAvailableRooms(mockRooms);
              }}
            >
              –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
            </Button>
          </div>
        )}
      </div>
    </div>
  );
}