import React, { useState, useEffect, useCallback } from 'react';
import { format, startOfMonth, endOfMonth, eachDayOfInterval, addMonths, subMonths } from 'date-fns';
import { enUS, ru } from 'date-fns/locale';
import { useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Skeleton } from '@/components/ui/skeleton';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { ChevronLeft, ChevronRight, Plus, LogOut, Globe, FileText } from 'lucide-react';
import BookingGrid from '../components/dashboard/BookingGrid';
import NewBookingModal from '../components/dashboard/NewBookingModal';
import DashboardStatistics from '../components/dashboard/DashboardStatistics';
import ReportsModal from '../components/dashboard/ReportsModal';
import { getBookingsForRange, getRooms, getServices } from '@/components/integrations/Supabase';
import { useAuth } from '@/components/auth/AuthProvider';
import { useTranslation } from '@/hooks/useTranslation';
import LanguageSwitcher from '@/components/common/LanguageSwitcher';
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Channex —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω
import channexService from '@/services/channex/ChannexService.jsx';

export default function Dashboard() {
  const [bookings, setBookings] = useState([]);
  const [rooms, setRooms] = useState([]);
  const [services, setServices] = useState([]);
  const [currentMonth, setCurrentMonth] = useState(startOfMonth(new Date()));
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [showNewBookingModal, setShowNewBookingModal] = useState(false);
  const [selectedCell, setSelectedCell] = useState(null);
  const [editingBooking, setEditingBooking] = useState(null);
  const [showReportsModal, setShowReportsModal] = useState(false);
  
  const { signOut } = useAuth();
  const { t, i18n, currentLanguage } = useTranslation('dashboard');
  const navigate = useNavigate(); // –•—É–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–∫–∞–ª—å –¥–ª—è date-fns
  const dateLocale = currentLanguage === 'ru' ? ru : enUS;

  const handleSignOut = async () => {
    try {
      await signOut();
    } catch (error) {
      console.error('Error signing out:', error);
    }
  };

  const fetchDataForRange = useCallback(async (startDate, endDate) => {
    setLoading(true);
    setError('');
    try {
      console.log('üîÑ Fetching bookings for range:', { startDate, endDate });
      
      // –ü–æ–ª—É—á–∞–µ–º –±—Ä–æ–Ω–∏ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥–æ—Å—Ç—è—Ö –∏ —É—Å–ª—É–≥–∞—Ö
      const bookingsResult = await getBookingsForRange(startDate, endDate);
      if (bookingsResult.error) throw bookingsResult.error;
      
      // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–æ–Ω—è—Ö
      const bookingsWithFullData = bookingsResult.data || [];
      console.log('üìä Loaded bookings with services:', bookingsWithFullData.map(b => ({
        id: b.id.substring(0, 8),
        guest: b.guests?.full_name,
        services: b.booking_services?.length || 0
      })));
      
      setBookings(bookingsWithFullData);
    } catch (err) {
      console.error('‚ùå Error loading bookings:', err);
      setError(t('errors.loadingBookings', { error: err.message }));
    } finally {
      setLoading(false);
    }
  }, [t]);
  
  useEffect(() => {
    const monthStart = startOfMonth(currentMonth);
    const monthEnd = endOfMonth(currentMonth);
    fetchDataForRange(monthStart, monthEnd);
  }, [currentMonth, fetchDataForRange]);

  useEffect(() => {
    const fetchStaticData = async () => {
      try {
        const [roomsResult, servicesResult] = await Promise.all([getRooms(), getServices()]);
        
        if (roomsResult.error) throw roomsResult.error;
        if (servicesResult.error) throw servicesResult.error;
        
        const roomsData = roomsResult.data || [];
        const servicesData = servicesResult.data || [];
        
        console.log('üè® Loaded rooms:', roomsData);
        console.log('üõéÔ∏è Loaded services:', servicesData);
        
        setRooms(roomsData);
        setServices(servicesData);
      } catch (err) {
        console.error('Error loading static data:', err);
        setError(t('errors.loadingData', { error: err.message }));
      }
    };
    fetchStaticData();
  }, [t]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ Channex
  const handlePriceChange = async (roomId, date, newPrice) => {
    try {
      console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É: –∫–æ–º–Ω–∞—Ç–∞ ${roomId}, –¥–∞—Ç–∞ ${date}, —Ü–µ–Ω–∞ $${newPrice}`);
      
      // –ù–∞–π–¥–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π rate plan –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã
      const room = rooms.find(r => r.id === roomId);
      
      if (!room) {
        throw new Error(`Room with id ${roomId} not found`);
      }
      
      // –ü–æ–ª—É—á–∞–µ–º rate plans –¥–ª—è —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã
      const ratePlans = await channexService.getRatePlans();
      
      if (!ratePlans.data || ratePlans.data.length === 0) {
        console.warn('‚ö†Ô∏è No rate plans found in Channex, updating local price only');
        return; // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
      }
      
      // –ù–∞—Ö–æ–¥–∏–º rate plan –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–º–Ω–∞—Ç—ã –∏–ª–∏ ID
      const ratePlan = ratePlans.data.find(rp => {
        const title = rp.attributes?.title || rp.title || '';
        const roomName = room.room_number || room.name || '';
        const roomType = room.room_type || '';
        
        // –ò—â–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–º–Ω–∞—Ç—ã, —Ç–∏–ø—É –∏–ª–∏ ID
        return title.includes(roomName) || 
               title.includes(roomType) || 
               (rp.attributes?.room_type_id && rp.attributes.room_type_id === room.channex_room_type_id);
      });
      
      if (!ratePlan) {
        console.warn(`‚ö†Ô∏è Rate plan not found for room ${room.room_number}, updating local price only`);
        return; // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
      }
      
      const ratePlanId = ratePlan.attributes?.id || ratePlan.id;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ Channex –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
      await channexService.setRates(ratePlanId, date, date, [
        { occupancy: 1, rate: newPrice }, // –î–ª—è 1 –≥–æ—Å—Ç—è
        { occupancy: 2, rate: newPrice }  // –î–ª—è 2 –≥–æ—Å—Ç–µ–π
      ]);
      
      console.log(`‚úÖ –¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ Channex –¥–ª—è rate plan ${ratePlanId}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã –≤ Channex:', error);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      const errorMessage = error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      console.warn(`‚ö†Ô∏è Channex update failed: ${errorMessage}. Price updated locally only.`);
      
      // –ù–µ –ø–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –ª–æ–∫–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å—Ä–∞–±–æ—Ç–∞–ª–æ
    }
  };

  const handleBookingSaved = useCallback(() => {
    console.log('üìù Booking saved, refreshing data...');
    setShowNewBookingModal(false);
    setSelectedCell(null);
    setEditingBooking(null);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±—Ä–æ–Ω–∏
    const monthStart = startOfMonth(currentMonth);
    const monthEnd = endOfMonth(currentMonth);
    fetchDataForRange(monthStart, monthEnd);
  }, [currentMonth, fetchDataForRange]);
  
  const handleCellClick = useCallback((roomId, date) => {
    console.log('üéØ Cell clicked:', { roomId, date });
    setSelectedCell({ roomId, checkIn: date, checkOut: addMonths(date, 1) });
    setEditingBooking(null); // –û—á–∏—â–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—É—é –±—Ä–æ–Ω—å
    setShowNewBookingModal(true);
  }, []);
  
  const handleBookingClick = useCallback((booking) => {
    console.log('üìã Booking clicked:', booking);
    setEditingBooking(booking);
    setSelectedCell(null); // –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —è—á–µ–π–∫—É
    setShowNewBookingModal(true);
  }, []);
  
  const handleSelectionEnd = useCallback((roomId, checkIn, checkOut) => {
    console.log('üéØ Selection ended:', { roomId, checkIn, checkOut });
    setSelectedCell({ roomId, checkIn, checkOut });
    setEditingBooking(null); // –û—á–∏—â–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—É—é –±—Ä–æ–Ω—å
    setShowNewBookingModal(true);
  }, []);

  const navigateMonth = (direction) => {
    setCurrentMonth(current => addMonths(current, direction));
  };

  // –§—É–Ω–∫—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫ —Å–ø–∏—Å–∫–∞–º
  const handleStatisticsNavigation = (route) => {
    console.log('üìä Statistics navigation to:', route);
    navigate(route);
  };
  
  const days = eachDayOfInterval({ 
    start: startOfMonth(currentMonth), 
    end: endOfMonth(currentMonth) 
  });

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–µ–ª–µ—Ç–æ–Ω –ø–æ–∫–∞ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ
  if (loading && rooms.length === 0) {
    return (
      <div className="p-6 space-y-6">
        <div className="flex items-center justify-between">
          <Skeleton className="h-8 w-32" />
          <div className="flex items-center space-x-2">
            <Skeleton className="h-10 w-10" />
            <Skeleton className="h-10 w-32" />
            <Skeleton className="h-10 w-10" />
          </div>
        </div>
        <Card className="p-6">
          <Skeleton className="h-[60vh] w-full" />
        </Card>
      </div>
    );
  }

  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-slate-800">{t('title')}</h1>
          <p className="text-slate-600 mt-1">{t('subtitle')}</p>
        </div>
        
        {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —è–∑—ã–∫–∞ —Å–ø—Ä–∞–≤–∞ */}
        <LanguageSwitcher />
      </div>

      {/* –ü–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ */}
      <div className="flex items-center justify-between">
        {/* –õ–µ–≤–∞—è –≥—Ä—É–ø–ø–∞ - –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∏ –Ω–æ–≤–∞—è –±—Ä–æ–Ω—å */}
        <div className="flex items-center space-x-4">
          {/* Month Navigation */}
          <div className="flex items-center space-x-2">
            <Button 
              variant="outline" 
              size="icon" 
              onClick={() => navigateMonth(-1)}
              title={t('navigation.previousMonth')}
            >
              <ChevronLeft className="h-4 w-4" />
            </Button>
            <div className="min-w-[160px] text-center">
              <span className="text-lg font-semibold text-slate-800">
                {format(currentMonth, 'LLLL yyyy', { locale: dateLocale })}
              </span>
            </div>
            <Button 
              variant="outline" 
              size="icon" 
              onClick={() => navigateMonth(1)}
              title={t('navigation.nextMonth')}
            >
              <ChevronRight className="h-4 w-4" />
            </Button>
          </div>
          
          {/* New Booking Button */}
          <Button onClick={() => {
            setEditingBooking(null);
            setSelectedCell(null);
            setShowNewBookingModal(true);
          }}>
            <Plus className="h-4 w-4 mr-2" />
            {t('actions.newReservation')}
          </Button>
          
          {/* Reports Button */}
          <Button 
            variant="outline"
            onClick={() => setShowReportsModal(true)}
          >
            <FileText className="h-4 w-4 mr-2" />
            –û—Ç—á–µ—Ç
          </Button>
        </div>

        {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –±–ª–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ */}
        <DashboardStatistics 
          bookings={bookings} 
          onNavigate={handleStatisticsNavigation}
        />

        {/* –ü—Ä–∞–≤–∞—è –≥—Ä—É–ø–ø–∞ - —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ */}
        <div className="flex items-center space-x-2">
          {/* Sign Out Button */}
          <Button 
            variant="outline" 
            size="icon" 
            onClick={handleSignOut} 
            title={t('actions.signOut')}
          >
            <LogOut className="h-4 w-4 text-slate-600" />
          </Button>
        </div>
      </div>
      
      {error && (
        <Alert variant="destructive">
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}
      
      <Card className="booking-grid overflow-hidden">
        {rooms.length > 0 ? (
          <BookingGrid 
            rooms={rooms} 
            bookings={bookings} 
            days={days} 
            onCellClick={handleCellClick} 
            onBookingClick={handleBookingClick} 
            onSelectionEnd={handleSelectionEnd}
            onPriceChange={handlePriceChange}
          />
        ) : (
          <div className="p-8 text-center text-slate-500">
            {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç'}
          </div>
        )}
      </Card>
      
      {showNewBookingModal && (
        <NewBookingModal 
          bookingToEdit={editingBooking} 
          selectedCell={selectedCell} 
          allBookings={bookings}
          rooms={rooms} 
          services={services} 
          onClose={() => { 
            setShowNewBookingModal(false); 
            setSelectedCell(null); 
            setEditingBooking(null); 
          }} 
          onBookingSaved={handleBookingSaved} 
        />
      )}
      
      {showReportsModal && (
        <ReportsModal 
          isOpen={showReportsModal}
          onClose={() => setShowReportsModal(false)}
          bookings={bookings}
        />
      )}
    </div>
  );
}