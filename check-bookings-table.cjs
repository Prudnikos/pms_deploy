const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://otlvihqfngfcsjwqfnty.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im90bHZpaHFmbmdmY3Nqd3FmbnR5Iiwicm9sZSI6InNlcnZpY2UiLCJpYXQiOjE3MjA0MjY1MDgsImV4cCI6MjAzNjAwMjUwOH0.cLGC6bG5lpz3-DkQ0Tw8QEQ_KHXy3cLhKBMIQzlDidk';

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkBookingsTable() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã bookings...\n');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    const { data, error } = await supabase
      .from('bookings')
      .select('*')
      .limit(1);
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error);
      return;
    }
    
    if (data && data.length > 0) {
      console.log('üìä –ü–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã bookings:');
      console.log('------------------------');
      const fields = Object.keys(data[0]);
      fields.forEach(field => {
        console.log(`  ‚Ä¢ ${field}: ${typeof data[0][field]}`);
      });
      
      console.log('\nüîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π source –∏ channel:');
      console.log(`  source: ${fields.includes('source') ? '‚úÖ EXISTS' : '‚ùå NOT FOUND'}`);
      console.log(`  channel: ${fields.includes('channel') ? '‚úÖ EXISTS' : '‚ùå NOT FOUND'}`);
      
      if (data[0].source !== undefined) {
        console.log(`  –ó–Ω–∞—á–µ–Ω–∏–µ source: "${data[0].source}"`);
      }
      if (data[0].channel !== undefined) {
        console.log(`  –ó–Ω–∞—á–µ–Ω–∏–µ channel: "${data[0].channel}"`);
      }
    } else {
      console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ bookings –ø—É—Å—Ç–∞');
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–µ–π
      console.log('\nüß™ –ü—Ä–æ–±—É–µ–º –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å –ø–æ–ª—è–º–∏ source –∏ channel...');
      
      const testBooking = {
        check_in: '2025-12-01',
        check_out: '2025-12-02',
        guest_first_name: 'Test',
        guest_last_name: 'User',
        source: 'test',
        channel: 'test',
        status: 'pending',
        room_id: 1,
        total_amount: 100
      };
      
      const { data: insertData, error: insertError } = await supabase
        .from('bookings')
        .insert([testBooking])
        .select();
      
      if (insertError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏:', insertError);
        console.log('\nüí° –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—è source/channel –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ');
      } else {
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');
        console.log('–ü–æ–ª—è –∑–∞–ø–∏—Å–∏:', Object.keys(insertData[0]));
        
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
        await supabase
          .from('bookings')
          .delete()
          .eq('id', insertData[0].id);
        
        console.log('üóëÔ∏è –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞');
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:');
    const { data: recent } = await supabase
      .from('bookings')
      .select('id, source, channel, guest_first_name, check_in')
      .order('created_at', { ascending: false })
      .limit(3);
    
    if (recent && recent.length > 0) {
      recent.forEach(booking => {
        console.log(`  ID: ${booking.id}`);
        console.log(`    Guest: ${booking.guest_first_name}`);
        console.log(`    Check-in: ${booking.check_in}`);
        console.log(`    Source: ${booking.source || 'NULL'}`);
        console.log(`    Channel: ${booking.channel || 'NULL'}`);
        console.log('');
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

checkBookingsTable();