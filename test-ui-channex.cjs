const { chromium } = require('playwright');
const path = require('path');

async function testChannexUI() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º UI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Channex –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π');
  
  const browser = await chromium.launch({ 
    headless: false,
    slowMo: 500
  });
  
  const context = await browser.newContext({
    viewport: { width: 1280, height: 720 }
  });
  
  const page = await context.newPage();

  try {
    console.log('1Ô∏è‚É£ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞...');
    await page.goto('http://localhost:5174/', { 
      waitUntil: 'networkidle',
      timeout: 30000 
    });
    
    console.log('2Ô∏è‚É£ –í–≤–æ–¥–∏–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
    await page.fill('input[type="email"], input[placeholder*="email"], input[placeholder*="Enter your email"]', 'admin@test.com');
    await page.fill('input[type="password"], input[placeholder*="password"], input[placeholder*="Enter your password"]', 'password123');
    await page.click('button:has-text("Sign In"), button[type="submit"], .btn:has-text("Sign In")');
    
    console.log('3Ô∏è‚É£ –û–∂–∏–¥–∞–µ–º —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞...');
    await page.waitForTimeout(3000);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ (–∏—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–∞—à–±–æ—Ä–¥–∞)
    try {
      await page.waitForSelector('text=Dashboard', { timeout: 5000 });
      console.log('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (e) {
      console.log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç Dashboard, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
    }
    
    console.log('4Ô∏è‚É£ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Channex...');
    await page.goto('http://localhost:5174/channexintegration', { 
      waitUntil: 'networkidle',
      timeout: 30000 
    });
    
    console.log('5Ô∏è‚É£ –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...');
    const screenshot1Path = path.join(__dirname, 'channex-ui-test-page.png');
    await page.screenshot({ 
      path: screenshot1Path, 
      fullPage: true 
    });
    console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', screenshot1Path);
    
    console.log('6Ô∏è‚É£ –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π...');
    
    // –ò—â–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–Ω–æ–ø–æ–∫
    const buttonSelectors = [
      'button:has-text("–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ")',
      'button:has-text("Test")', 
      'button:has-text("–¢–µ—Å—Ç")',
      'button[class*="test"]',
      'button:has-text("101")',
      'button:has-text("201")',
      '[data-testid*="test"]',
      'text=101',
      'text=201'
    ];
    
    let foundButtons = [];
    for (const selector of buttonSelectors) {
      try {
        const elements = await page.locator(selector).all();
        if (elements.length > 0) {
          console.log(`   –ù–∞–π–¥–µ–Ω–æ ${elements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è: ${selector}`);
          foundButtons.push({ selector, count: elements.length });
        }
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–∏—Å–∫–∞
      }
    }
    
    if (foundButtons.length > 0) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', foundButtons);
    } else {
      console.log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç...');
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const pageText = await page.textContent('body');
      console.log('üìÑ –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', pageText.substring(0, 500));
      
      // –ò—â–µ–º –ª—é–±—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      const allButtons = await page.locator('button').all();
      console.log(`üîç –í—Å–µ–≥–æ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${allButtons.length}`);
      
      for (let i = 0; i < Math.min(allButtons.length, 10); i++) {
        try {
          const buttonText = await allButtons[i].textContent();
          console.log(`   –ö–Ω–æ–ø–∫–∞ ${i + 1}: "${buttonText}"`);
        } catch (e) {
          console.log(`   –ö–Ω–æ–ø–∫–∞ ${i + 1}: [–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç]`);
        }
      }
    }
    
    console.log('7Ô∏è‚É£ –û–∂–∏–¥–∞–µ–º 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
    await page.waitForTimeout(5000);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è UI:', error.message);
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏
    try {
      const errorScreenshotPath = path.join(__dirname, 'channex-ui-error.png');
      await page.screenshot({ 
        path: errorScreenshotPath, 
        fullPage: true 
      });
      console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', errorScreenshotPath);
    } catch (screenshotError) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏:', screenshotError);
    }
  }

  await browser.close();
  console.log('\nüèÅ –¢–µ—Å—Ç UI –∑–∞–≤–µ—Ä—à–µ–Ω');
}

testChannexUI().catch(console.error);