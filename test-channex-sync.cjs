/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ Channex –≤ PMS
 */

const { config } = require('dotenv');
const { createClient } = require('@supabase/supabase-js');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config({ path: '.env.local' });

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Supabase (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ credentials, —á—Ç–æ –∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏)
const supabaseUrl = 'https://zbhvwxpvlxqxadqzshfc.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpiaHZ3eHB2bHhxeGFkcXpzaGZjIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MTkyNTM3NCwiZXhwIjoyMDY3NTAxMzc0fQ.0kO3vG1OXNS05NPgm7MmcbkdMuLSG49GKwkCP4979tc';

const supabase = createClient(supabaseUrl, supabaseServiceKey);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Channex API
const CHANNEX_API_URL = 'https://staging.channex.io/api/v1';
const CHANNEX_API_KEY = process.env.VITE_CHANNEX_API_KEY;
const CHANNEX_PROPERTY_ID = process.env.VITE_CHANNEX_PROPERTY_ID;

// ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –º—ã —Å–æ–∑–¥–∞–ª–∏ —á–µ—Ä–µ–∑ Airbnb —Å–∏–º—É–ª—è—Ç–æ—Ä
const BOOKING_ID = '00be50a6-ef60-4d18-bcf5-9cf046603141';

/**
 * API –∑–∞–ø—Ä–æ—Å –∫ Channex
 */
async function channexApiRequest(endpoint, method = 'GET') {
  const url = `${CHANNEX_API_URL}${endpoint}`;
  console.log(`üåê Channex API –∑–∞–ø—Ä–æ—Å: ${method} ${url}`);

  try {
    const options = {
      method,
      headers: {
        'user-api-key': CHANNEX_API_KEY,
        'Content-Type': 'application/json',
      },
    };

    const response = await fetch(url, options);
    const responseText = await response.text();

    if (!response.ok) {
      console.error('‚ùå Channex API –æ—à–∏–±–∫–∞:', responseText);
      throw new Error(`API Error: ${response.status}`);
    }

    return responseText ? JSON.parse(responseText) : { success: true };
  } catch (error) {
    console.error('üí• Channex API Request Error:', error);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ Channex
 */
async function getChannexBooking(bookingId) {
  console.log('üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ Channex:', bookingId);
  const response = await channexApiRequest(`/bookings/${bookingId}`);
  return response.data;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å room_id –ø–æ –Ω–æ–º–µ—Ä—É –∫–æ–º–Ω–∞—Ç—ã –∏–∑ PMS
 */
async function getRoomIdByNumber(roomNumber) {
  console.log('üè† –ò—â–µ–º room_id –¥–ª—è –Ω–æ–º–µ—Ä–∞:', roomNumber);
  
  try {
    const { data: rooms, error } = await supabase
      .from('rooms')
      .select('id, room_number')
      .eq('room_number', roomNumber)
      .single();

    if (error || !rooms) {
      console.log('‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é');
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ—á–Ω–æ –ø–æ –Ω–æ–º–µ—Ä—É, –≤–æ–∑—å–º–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
      const { data: firstRoom } = await supabase
        .from('rooms')
        .select('id, room_number')
        .limit(1)
        .single();
      
      return firstRoom?.id || null;
    }

    console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞:', rooms.room_number, 'ID:', rooms.id);
    return rooms.id;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç—ã:', error);
    return null;
  }
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å Channex –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç PMS
 */
async function convertToPMSFormat(channexBooking) {
  console.log('üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Channex ‚Üí PMS');
  console.log('üìã Channex –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(channexBooking, null, 2));
  
  const attrs = channexBooking.attributes;
  const room = attrs.rooms?.[0];
  
  console.log('üìÖ –î–∞—Ç—ã:', { arrival: attrs.arrival_date, departure: attrs.departure_date });
  console.log('üè† –ö–æ–º–Ω–∞—Ç–∞:', room);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã –∏–∑ meta –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
  const roomNumber = attrs.meta?.pms_room_number || 'A1';
  const roomId = await getRoomIdByNumber(roomNumber);
  
  // –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  const pmsBooking = {
    id: channexBooking.id,
    channel: 'airbnb',
    source: 'airbnb', 
    ota_reservation_code: attrs.ota_reservation_code,
    
    check_in: attrs.arrival_date || attrs.checkin_date || null,
    check_out: attrs.departure_date || attrs.checkout_date || null,
    
    guest_first_name: attrs.customer?.name || 'Guest',
    guest_last_name: attrs.customer?.surname || 'User', 
    guest_email: attrs.customer?.mail || '',
    guest_phone: attrs.customer?.phone || '',
    
    status: 'confirmed',
    
    room_id: roomId, // ‚ú® –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π room_id
    room_number: roomNumber,
    room_type: 'Standard Room',
    
    adults: room?.occupancy?.adults || 2,
    children: room?.occupancy?.children || 0,
    
    total_amount: room?.total_price || attrs.total_price || 300,
    currency: attrs.currency || 'USD',
    
    external_booking_id: channexBooking.id,
    ota_reservation_code: attrs.ota_reservation_code
  };

  console.log('‚úÖ PMS —Ñ–æ—Ä–º–∞—Ç:', JSON.stringify(pmsBooking, null, 2));
  return pmsBooking;
}

/**
 * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ PMS –ë–î
 */
async function saveToPMS(pmsBooking) {
  console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ PMS –ë–î...');
  
  try {
    const { data, error } = await supabase
      .from('bookings')
      .upsert(pmsBooking, { 
        onConflict: 'id',
        ignoreDuplicates: false 
      })
      .select();

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ PMS –ë–î:', error);
      throw error;
    }

    console.log('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ PMS –ë–î:', pmsBooking.id);
    return data;
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
    throw error;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function testChannexToPMSSync() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Channex ‚Üí PMS');
  console.log('üìã Booking ID:', BOOKING_ID);
  
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ Channex
    const channexBooking = await getChannexBooking(BOOKING_ID);
    console.log('üì• –ü–æ–ª—É—á–µ–Ω–æ –∏–∑ Channex:', channexBooking?.id);
    
    // 2. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç PMS
    const pmsBooking = convertToPMSFormat(channexBooking);
    
    // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ PMS –ë–î
    const result = await saveToPMS(pmsBooking);
    
    console.log('üéâ –£—Å–ø–µ—à–Ω–æ! –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –≤ PMS:');
    console.log('- ID:', result[0]?.id);
    console.log('- –ì–æ—Å—Ç—å:', `${result[0]?.guest_first_name} ${result[0]?.guest_last_name}`);
    console.log('- –î–∞—Ç—ã:', `${result[0]?.check_in} - ${result[0]?.check_out}`);
    console.log('- –°—Ç–æ–∏–º–æ—Å—Ç—å:', `${result[0]?.total_amount} ${result[0]?.currency}`);
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testChannexToPMSSync();