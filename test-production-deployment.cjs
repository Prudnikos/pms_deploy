// –¢–µ—Å—Ç production –¥–µ–ø–ª–æ—è –Ω–∞ https://pms.voda.center
const { chromium } = require('playwright');
const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));

async function testProductionDeployment() {
  console.log('üåç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PRODUCTION –î–ï–ü–õ–û–Ø');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('üîó URL: https://pms.voda.center');
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞
  console.log('\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞...');
  try {
    const response = await fetch('https://pms.voda.center/', {
      method: 'GET',
      timeout: 10000
    });
    
    if (response.ok) {
      console.log('‚úÖ –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, —Å—Ç–∞—Ç—É—Å:', response.status);
    } else {
      console.log('‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:', error.message);
  }
  
  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∑–¥–æ—Ä–æ–≤—å–µ
  console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º API endpoints...');
  try {
    const healthResponse = await fetch('https://pms.voda.center/api/health', {
      timeout: 5000
    });
    
    if (healthResponse.ok) {
      const healthData = await healthResponse.json();
      console.log('‚úÖ Health endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç:', healthData);
    } else {
      console.log('‚ö†Ô∏è Health endpoint —Å—Ç–∞—Ç—É—Å:', healthResponse.status);
    }
  } catch (error) {
    console.log('‚ùå Health endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
  }
  
  // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º UI —Å –±—Ä–∞—É–∑–µ—Ä–æ–º
  console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º UI —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä...');
  const browser = await chromium.launch({ 
    headless: false,
    slowMo: 1000
  });
  
  const context = await browser.newContext({
    viewport: { width: 1400, height: 800 }
  });
  
  const page = await context.newPage();

  try {
    console.log('üì± –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ production —Å–∞–π—Ç...');
    await page.goto('https://pms.voda.center/', { 
      waitUntil: 'networkidle',
      timeout: 30000 
    });
    
    console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–∏–¥–∏–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
    const loginForm = await page.locator('input[type="email"]').first();
    if (await loginForm.isVisible()) {
      console.log('‚úÖ –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è');
    }
    
    console.log('üîë –ü—Ä–æ–±—É–µ–º –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É...');
    await page.fill('input[type="email"]', 'admin@test.com');
    await page.fill('input[type="password"]', 'password123');
    await page.click('button:has-text("Sign In")');
    
    await page.waitForTimeout(5000);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
    const currentUrl = page.url();
    console.log('üìç –¢–µ–∫—É—â–∏–π URL:', currentUrl);
    
    if (currentUrl.includes('pms.voda.center') && !currentUrl.includes('login')) {
      console.log('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ Channex –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
      console.log('üîó –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ Channex –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...');
      await page.goto('https://pms.voda.center/channexintegration', { 
        waitUntil: 'networkidle',
        timeout: 20000 
      });
      
      // –ò—â–µ–º –≤–∫–ª–∞–¥–∫—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
      try {
        await page.waitForSelector('text=–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', { timeout: 10000 });
        await page.click('text=–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
        console.log('‚úÖ –í–∫–ª–∞–¥–∫–∞ "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è" –Ω–∞–π–¥–µ–Ω–∞ –∏ –æ—Ç–∫—Ä—ã—Ç–∞');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
        const guestNameInput = await page.locator('input[id="guestName"]').first();
        if (await guestNameInput.isVisible()) {
          console.log('‚úÖ –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–∞');
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É –∏–º–ø–æ—Ä—Ç–∞
          const importButton = await page.locator('button:has-text("–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")').first();
          if (await importButton.isVisible()) {
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–∞');
          }
        }
        
      } catch (e) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã Channex –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏');
      }
      
    } else {
      console.log('‚ö†Ô∏è –í—Ö–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –∏–ª–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ');
    }
    
    console.log('üì∏ –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç production –≤–µ—Ä—Å–∏–∏...');
    await page.screenshot({ 
      path: 'production-test-screenshot.png', 
      fullPage: true 
    });
    console.log('‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: production-test-screenshot.png');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞:', error.message);
    
    await page.screenshot({ 
      path: 'production-error-screenshot.png', 
      fullPage: true 
    });
    console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: production-error-screenshot.png');
  }

  await browser.close();
  
  // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ production
  console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º Channex API —Å production...');
  try {
    const testBooking = {
      booking: {
        property_id: '6ae9708a-cbaa-4134-bf04-29314e842709',
        ota_reservation_code: 'PROD-TEST-' + Date.now(),
        ota_name: 'Booking.com',
        arrival_date: '2025-09-01',
        departure_date: '2025-09-03',
        currency: 'GBP',
        
        customer: {
          name: 'Production',
          surname: 'Test',
          mail: 'production.test@voda.center',
          country: 'GB'
        },
        
        rooms: [{
          room_type_id: '8df610ce-cabb-429d-98d0-90c33f451d97', // Standard Room
          rate_plan_id: '8212ad16-0057-496b-8b0b-54d741841852',
          days: {
            '2025-09-01': '100.00',
            '2025-09-02': '100.00'
          },
          occupancy: { adults: 1, children: 0 }
        }]
      }
    };
    
    const channexResponse = await fetch('https://staging.channex.io/api/v1/bookings', {
      method: 'POST',
      headers: {
        'user-api-key': 'uUdBtyJdPAYoP0m0qrEStPh2WJcXCBBBLMngnPxygFWpw0GyDE/nmvN/6wN7gXV+',
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(testBooking)
    });
    
    if (channexResponse.ok) {
      const channexData = await channexResponse.json();
      console.log('‚úÖ Production —Ç–µ—Å—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–µ–Ω!');
      console.log('üìã ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', channexData.data?.id);
    } else {
      const errorText = await channexResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', errorText);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ API —Ç–µ—Å—Ç–∞:', error.message);
  }
  
  console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ production –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
  console.log('üåç URL: https://pms.voda.center');
  console.log('üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: vercel.json –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');  
  console.log('üîë –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ Vercel');
  console.log('‚ö° API endpoints: –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  console.log('üéØ Channex –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
}

testProductionDeployment().catch(console.error);