// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://zbhvwxpvlxqxadqzshfc.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpiaHZ3eHB2bHhxeGFkcXpzaGZjIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTczNTMwOTQyMCwiZXhwIjoyMDUwODg1NDIwfQ.R_vS_6SfOp46jSL3nL8ZgxAqPWjLYrmA8uPu1E-c8CM';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testConnection() {
  try {
    console.log('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...');
    
    // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –æ–¥–Ω—É –∑–∞–ø–∏—Å—å
    const { data, error } = await supabase
      .from('bookings')
      .select('*')
      .limit(1);
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é –∑–∞–ø–∏—Å—å –¥–ª—è —Ç–µ—Å—Ç–∞
      console.log('üîß –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å...');
      
      const testBooking = {
        id: 'test-' + Date.now(),
        check_in: '2025-08-30',
        check_out: '2025-08-31',
        guest_name: 'Test User',
        room: 'Test Room',
        adults: 2,
        children: 0,
        channel: 'direct',
        status: 'test'
      };
      
      const { data: insertData, error: insertError } = await supabase
        .from('bookings')
        .insert(testBooking)
        .select();
      
      if (insertError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏:', insertError.message);
        console.log('üí° –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ');
        return false;
      } else {
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞:', insertData);
        
        // –£–¥–∞–ª–∏–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
        await supabase.from('bookings').delete().eq('id', testBooking.id);
        console.log('üóëÔ∏è –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞');
        return true;
      }
      
    } else {
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
      console.log('üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏:', data.length > 0 ? Object.keys(data[0]) : '–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞');
      return true;
    }
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    return false;
  }
}

testConnection().then(success => {
  if (success) {
    console.log('üéâ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!');
  } else {
    console.log('‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª - –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ö–µ–º—É –ë–î');
  }
}).catch(console.error);