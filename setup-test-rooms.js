// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–º–Ω–∞—Ç –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤ 101 –∏ 201
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://rkqphmifpbdkllyqkkdg.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJrcXBobWlmcGJka2xseXFra2RnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzU4MzkxNzYsImV4cCI6MjA1MTQxNTE3Nn0.7h7YV1KNk9mBU6W4K-sPCfPHWJkpUnEUBxW-9L4uVdU';

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function setupTestRooms() {
  console.log('üè† –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–Ω–∞—Ç—ã...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–Ω–∞—Ç—ã
    const { data: existingRooms, error: selectError } = await supabase
      .from('rooms')
      .select('*')
      .in('room_number', ['101', '201']);
    
    if (selectError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–Ω–∞—Ç:', selectError);
      return;
    }
    
    console.log('üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–Ω–∞—Ç—ã:', existingRooms);
    
    const testRooms = [
      {
        id: 'room-101',
        room_number: '101',
        name: 'Standard Room 101',
        room_type: 'Standard Room',
        floor: 1,
        capacity: 2,
        description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞ –ø–µ—Ä–≤–æ–º —ç—Ç–∞–∂–µ',
        amenities: ['WiFi', 'TV', 'Air conditioning'],
        status: 'available',
        price_per_night: 100.00,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      },
      {
        id: 'room-201',
        room_number: '201',
        name: 'Deluxe Room 201',
        room_type: 'Deluxe Room',
        floor: 2,
        capacity: 2,
        description: '–î–µ–ª—é–∫—Å –Ω–æ–º–µ—Ä –Ω–∞ –≤—Ç–æ—Ä–æ–º —ç—Ç–∞–∂–µ',
        amenities: ['WiFi', 'TV', 'Air conditioning', 'Mini bar', 'Balcony'],
        status: 'available',
        price_per_night: 200.00,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }
    ];
    
    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—ã
    for (const room of testRooms) {
      const existingRoom = existingRooms.find(r => r.room_number === room.room_number);
      
      if (existingRoom) {
        console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É ${room.room_number}...`);
        const { error } = await supabase
          .from('rooms')
          .update(room)
          .eq('id', existingRoom.id);
          
        if (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã ${room.room_number}:`, error);
        } else {
          console.log(`‚úÖ –ö–æ–º–Ω–∞—Ç–∞ ${room.room_number} –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
        }
      } else {
        console.log(`‚ûï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É ${room.room_number}...`);
        const { error } = await supabase
          .from('rooms')
          .insert([room]);
          
        if (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã ${room.room_number}:`, error);
        } else {
          console.log(`‚úÖ –ö–æ–º–Ω–∞—Ç–∞ ${room.room_number} —Å–æ–∑–¥–∞–Ω–∞`);
        }
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const { data: finalRooms, error: finalError } = await supabase
      .from('rooms')
      .select('*')
      .in('room_number', ['101', '201']);
    
    if (finalError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç:', finalError);
      return;
    }
    
    console.log('üèÅ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç:');
    finalRooms.forEach(room => {
      console.log(`   ${room.room_number}: ${room.name} (${room.room_type}) - ${room.price_per_night}$`);
    });
    
  } catch (error) {
    console.error('üí• –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
setupTestRooms();