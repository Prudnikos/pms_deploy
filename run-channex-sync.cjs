const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));

const API_KEY = 'uUdBtyJdPAYoP0m0qrEStPh2WJcXCBBBLMngnPxygFWpw0GyDE/nmvN/6wN7gXV+';
const BASE_URL = 'https://staging.channex.io/api/v1';
const PROPERTY_ID = '6ae9708a-cbaa-4134-bf04-29314e842709';

async function syncChannexData() {
  console.log('üîÑ –ó–ê–ü–£–°–ö –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò CHANNEX\n');
  console.log('='.repeat(50));
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    console.log('\nüìã –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
    const testUrl = `${BASE_URL}/room_types?property_id=${PROPERTY_ID}`;
    const testResponse = await fetch(testUrl, {
      headers: {
        'user-api-key': API_KEY,
        'Content-Type': 'application/json'
      }
    });
    
    if (!testResponse.ok) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Channex API');
      console.log(`–°—Ç–∞—Ç—É—Å: ${testResponse.status}`);
      return;
    }
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // 2. –ü–æ–ª—É—á–∞–µ–º Room Types
    console.log('\nüìã –®–∞–≥ 2: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Room Types...');
    const rtData = await testResponse.json();
    console.log(`–ù–∞–π–¥–µ–Ω–æ room types: ${rtData.data?.length || 0}`);
    
    if (rtData.data) {
      rtData.data.forEach(rt => {
        console.log(`  - ${rt.attributes.title} (${rt.id})`);
      });
    }
    
    // 3. –ü–æ–ª—É—á–∞–µ–º Rate Plans
    console.log('\nüìã –®–∞–≥ 3: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Rate Plans...');
    const rpUrl = `${BASE_URL}/rate_plans?property_id=${PROPERTY_ID}`;
    const rpResponse = await fetch(rpUrl, {
      headers: {
        'user-api-key': API_KEY,
        'Content-Type': 'application/json'
      }
    });
    
    const rpData = await rpResponse.json();
    console.log(`–ù–∞–π–¥–µ–Ω–æ rate plans: ${rpData.data?.length || 0}`);
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
    console.log('\nüìã –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤...');
    
    const problematicRooms = {
      'Deluxe suite apartment': {
        room_type_id: 'e243d5aa-eff3-43a7-8bf8-87352b62fdc3',
        expected_rate_plan_id: '45195f3e-fb59-4ddf-9e29-b667dbe2ab58'
      },
      'Villa First Floor': {
        room_type_id: 'c14d8272-5406-40d0-b7d9-726513a13b5c',
        expected_rate_plan_id: 'aa96a05e-f1a5-4e78-a9cb-0638ee1140f2'
      }
    };
    
    for (const [roomName, config] of Object.entries(problematicRooms)) {
      console.log(`\nüè† ${roomName}:`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º Room Type
      const roomType = rtData.data?.find(rt => rt.id === config.room_type_id);
      if (roomType) {
        console.log(`  ‚úÖ Room Type –Ω–∞–π–¥–µ–Ω`);
      } else {
        console.log(`  ‚ùå Room Type –ù–ï –Ω–∞–π–¥–µ–Ω`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º Rate Plan
      const ratePlan = rpData.data?.find(rp => rp.id === config.expected_rate_plan_id);
      if (ratePlan) {
        console.log(`  ‚úÖ Rate Plan –Ω–∞–π–¥–µ–Ω`);
      } else {
        console.log(`  ‚ùå Rate Plan –ù–ï –Ω–∞–π–¥–µ–Ω`);
        
        // –ò—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ Rate Plans
        const altRatePlans = rpData.data?.filter(rp => 
          rp.relationships?.room_type?.data?.id === config.room_type_id
        );
        
        if (altRatePlans && altRatePlans.length > 0) {
          console.log(`  ‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω—ã –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ Rate Plans:`);
          altRatePlans.forEach(rp => {
            console.log(`     - ${rp.id}: ${rp.attributes.title}`);
          });
        } else {
          console.log(`  ‚ö†Ô∏è –ù–µ—Ç Rate Plans –¥–ª—è —ç—Ç–æ–≥–æ Room Type`);
        }
      }
    }
    
    // 5. –ò—Ç–æ–≥–∏
    console.log('\n' + '='.repeat(50));
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò:');
    console.log('============================');
    console.log(`‚úÖ Room Types: ${rtData.data?.length || 0}`);
    console.log(`‚úÖ Rate Plans: ${rpData.data?.length || 0}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å Rate Plans
    const needsRatePlans = [];
    
    if (!rpData.data?.find(rp => rp.relationships?.room_type?.data?.id === 'e243d5aa-eff3-43a7-8bf8-87352b62fdc3')) {
      needsRatePlans.push('Deluxe suite apartment');
    }
    
    if (!rpData.data?.find(rp => rp.relationships?.room_type?.data?.id === 'c14d8272-5406-40d0-b7d9-726513a13b5c')) {
      needsRatePlans.push('Villa First Floor');
    }
    
    if (needsRatePlans.length > 0) {
      console.log('\n‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–ï–ô–°–¢–í–ò–ï:');
      console.log('–°–æ–∑–¥–∞–π—Ç–µ Rate Plans –≤ Channex UI –¥–ª—è:');
      needsRatePlans.forEach(room => {
        console.log(`  - ${room}`);
      });
      console.log('\n–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ Rate Plans —Å –¥—Ä—É–≥–∏–º–∏ ID');
    } else {
      console.log('\n‚úÖ –í—Å–µ –Ω–æ–º–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ!');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error.message);
  }
}

syncChannexData();