const fetch = require('node-fetch');

const API_KEY = process.env.VITE_CHANNEX_API_KEY || 'nWxt87XOKhF7HslqSxJW8y0t';
const BASE_URL = 'https://staging.channex.io/api/v1';
const PROPERTY_ID = '6ae9708a-cbaa-4134-bf04-29314e842709';

async function checkChannexListings() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å Room Types —Å Airbnb –ª–∏—Å—Ç–∏–Ω–≥–∞–º–∏...\n');
  
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º Room Types
    console.log('üìã Room Types –≤ Channex:');
    console.log('========================');
    const roomTypesUrl = `${BASE_URL}/room_types?property_id=${PROPERTY_ID}`;
    const roomTypesResponse = await fetch(roomTypesUrl, {
      headers: {
        'user-api-key': API_KEY,
        'Content-Type': 'application/json'
      }
    });
    
    const roomTypesData = await roomTypesResponse.json();
    
    if (roomTypesData.data) {
      roomTypesData.data.forEach(rt => {
        console.log(`\n${rt.attributes.title}:`);
        console.log(`  ID: ${rt.id}`);
        console.log(`  OTA Room Type ID: ${rt.attributes.ota_room_type_id || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
      });
    }
    
    // 2. –ü–æ–ª—É—á–∞–µ–º Rate Plans
    console.log('\n\nüìã Rate Plans –≤ Channex:');
    console.log('========================');
    const ratePlansUrl = `${BASE_URL}/rate_plans?property_id=${PROPERTY_ID}`;
    const ratePlansResponse = await fetch(ratePlansUrl, {
      headers: {
        'user-api-key': API_KEY,
        'Content-Type': 'application/json'
      }
    });
    
    const ratePlansData = await ratePlansResponse.json();
    
    if (ratePlansData.data) {
      ratePlansData.data.forEach(rp => {
        const roomTypeId = rp.relationships?.room_type?.data?.id;
        const roomType = roomTypesData.data?.find(rt => rt.id === roomTypeId);
        console.log(`\n${rp.attributes.title}:`);
        console.log(`  ID: ${rp.id}`);
        console.log(`  Room Type: ${roomType?.attributes?.title || '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
        console.log(`  OTA Rate Plan ID: ${rp.attributes.ota_rate_plan_id || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
      });
    }
    
    // 3. –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –Ω–∞—à–∏–º –∫–æ–Ω—Ñ–∏–≥–æ–º
    console.log('\n\nüìä –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–ï –° –ù–ê–®–ò–ú –ö–û–ù–§–ò–ì–û–ú:');
    console.log('====================================');
    
    const mapping = {
      'Standard Room': {
        channex_room_type_id: '8df610ce-cabb-429d-98d0-90c33f451d97',
        channex_rate_plan_id: '8212ad16-0057-496b-8b0b-54d741841852'
      },
      'Deluxe Room': {
        channex_room_type_id: '734d5d86-1fe6-44d8-b6c5-4ac9349c4410',
        channex_rate_plan_id: '0661e606-18e5-4ad3-bda0-ade13d29b76b'
      },
      'Suite': {
        channex_room_type_id: 'e243d5aa-eff3-43a7-8bf8-87352b62fdc3',
        channex_rate_plan_id: '45195f3e-fb59-4ddf-9e29-b667dbe2ab58'
      }
    };
    
    for (const [roomName, config] of Object.entries(mapping)) {
      console.log(`\n${roomName}:`);
      
      const roomType = roomTypesData.data?.find(rt => rt.id === config.channex_room_type_id);
      const ratePlan = ratePlansData.data?.find(rp => rp.id === config.channex_rate_plan_id);
      
      if (roomType) {
        console.log(`  ‚úÖ Room Type –Ω–∞–π–¥–µ–Ω: ${roomType.attributes.title}`);
      } else {
        console.log(`  ‚ùå Room Type –ù–ï –ù–ê–ô–î–ï–ù!`);
      }
      
      if (ratePlan) {
        console.log(`  ‚úÖ Rate Plan –Ω–∞–π–¥–µ–Ω: ${ratePlan.attributes.title}`);
      } else {
        console.log(`  ‚ùå Rate Plan –ù–ï –ù–ê–ô–î–ï–ù!`);
      }
    }
    
    console.log('\n\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('================');
    console.log('–ò–∑ —Å–ø–∏—Å–∫–∞ Airbnb –ª–∏—Å—Ç–∏–Ω–≥–æ–≤ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ:');
    console.log('');
    console.log('–î–ª—è Standard Room:');
    console.log('  ‚Ä¢ A 11 ¬∑ One-bedroom apartment (–±–∞–∑–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)');
    console.log('  ‚Ä¢ A 1 ¬∑ Deluxe apartment (–µ—Å–ª–∏ —ç—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç)');
    console.log('');
    console.log('–î–ª—è Deluxe Room:');
    console.log('  ‚Ä¢ A 4 ¬∑ Deluxe family apartment (—Å–µ–º–µ–π–Ω—ã–π = –±–æ–ª—å—à–µ)');
    console.log('  ‚Ä¢ A6 ¬∑ Two bed rooms Deluxe Suite (–¥–≤—É—Ö–∫–æ–º–Ω–∞—Ç–Ω—ã–π)');
    console.log('');
    console.log('–î–ª—è Suite:');
    console.log('  ‚Ä¢ A 5 ¬∑ Deluxe suite apartment (–ø—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ!)');
    console.log('  ‚Ä¢ V 1 ¬∑ Villa ground floor (–≤–∏–ª–ª–∞ = –ª—é–∫—Å)');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

checkChannexListings();