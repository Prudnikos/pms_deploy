const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));

const API_KEY = 'uUdBtyJdPAYoP0m0qrEStPh2WJcXCBBBLMngnPxygFWpw0GyDE/nmvN/6wN7gXV+';
const BASE_URL = 'https://staging.channex.io/api/v1';
const PROPERTY_ID = '6ae9708a-cbaa-4134-bf04-29314e842709';

async function createMissingRatePlans() {
  console.log('üîß –°–û–ó–î–ê–ù–ò–ï RATE PLANS –î–õ–Ø SUITE –ò VILLA\n');
  console.log('='.repeat(50));
  
  const roomsToCreate = [
    {
      name: 'Suite Rate',
      room_type_id: 'e243d5aa-eff3-43a7-8bf8-87352b62fdc3',
      room_name: 'Deluxe suite apartment'
    },
    {
      name: 'Villa First Floor Rate',
      room_type_id: 'c14d8272-5406-40d0-b7d9-726513a13b5c',
      room_name: 'Villa First Floor'
    }
  ];
  
  const createdRatePlans = {};
  
  for (const room of roomsToCreate) {
    console.log(`\nüì§ –°–æ–∑–¥–∞–µ–º Rate Plan –¥–ª—è ${room.room_name}...`);
    
    try {
      // –§–æ—Ä–º–∞—Ç —Å–æ–≥–ª–∞—Å–Ω–æ Channex API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
      const ratePlanData = {
        data: {
          type: 'rate_plans',
          attributes: {
            title: room.name,
            currency: 'USD',
            sell_mode: 'per_room',
            rate_mode: 'manual'
          },
          relationships: {
            property: {
              data: {
                type: 'properties',
                id: PROPERTY_ID
              }
            },
            room_type: {
              data: {
                type: 'room_types',
                id: room.room_type_id
              }
            }
          }
        }
      };
      
      const createUrl = `${BASE_URL}/rate_plans`;
      const createResponse = await fetch(createUrl, {
        method: 'POST',
        headers: {
          'user-api-key': API_KEY,
          'Content-Type': 'application/vnd.api+json'
        },
        body: JSON.stringify(ratePlanData)
      });
      
      console.log(`–°—Ç–∞—Ç—É—Å: ${createResponse.status}`);
      
      if (createResponse.ok) {
        const responseData = await createResponse.json();
        console.log(`‚úÖ –°–û–ó–î–ê–ù Rate Plan!`);
        console.log(`   ID: ${responseData.data?.id}`);
        console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${responseData.data?.attributes?.title}`);
        
        createdRatePlans[room.room_name] = responseData.data?.id;
      } else {
        const errorText = await createResponse.text();
        console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Rate Plan`);
        
        // –ü–∞—Ä—Å–∏–º –æ—à–∏–±–∫—É
        try {
          const errorData = JSON.parse(errorText);
          if (errorData.errors) {
            console.log(`   –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: ${JSON.stringify(errorData.errors, null, 2)}`);
          }
        } catch {
          console.log(`   –û—Ç–≤–µ—Ç: ${errorText}`);
        }
        
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∏–∑-–∑–∞ —Ç–æ–≥–æ —á—Ç–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
        if (errorText.includes('already exists') || createResponse.status === 422) {
          console.log('\n   ‚ÑπÔ∏è –í–æ–∑–º–æ–∂–Ω–æ Rate Plan —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ —Ñ–∏–ª—å—Ç—Ä');
          console.log('   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ Channex UI –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –¥–ª—è property');
        }
      }
      
    } catch (error) {
      console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    }
  }
  
  // –ò—Ç–æ–≥–∏
  console.log('\n' + '='.repeat(50));
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
  console.log('=============\n');
  
  if (Object.keys(createdRatePlans).length > 0) {
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–Ω—ã–µ Rate Plans:\n');
    for (const [roomName, ratePlanId] of Object.entries(createdRatePlans)) {
      console.log(`${roomName}:`);
      console.log(`  "channex_rate_plan_id": "${ratePlanId}"`);
      console.log('');
    }
    
    console.log('üìù –û–ë–ù–û–í–ò–¢–ï airbnb-mapping.json —Å –Ω–æ–≤—ã–º–∏ ID!');
  } else {
    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Rate Plans —á–µ—Ä–µ–∑ API\n');
    console.log('–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ Channex UI, —á—Ç–æ Rate Plans —Å–æ–∑–¥–∞–Ω—ã');
    console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è property');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –æ–Ω–∏ —Å–≤—è–∑–∞–Ω—ã —Å Airbnb –∫–∞–Ω–∞–ª–æ–º');
    console.log('4. –ï—Å–ª–∏ Rate Plans –µ—Å—Ç—å –≤ UI, –Ω–æ –Ω–µ –≤ API - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É Channex');
  }
  
  console.log('\nüí° –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–û–ï –†–ï–®–ï–ù–ò–ï:');
  console.log('===========================');
  console.log('–ï—Å–ª–∏ Rate Plans –≤–∏–¥–Ω—ã –≤ Channex UI (–∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ),');
  console.log('–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ API, –º–æ–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å');
  console.log('—Ä–µ–∂–∏–º fallback - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–æ–º–µ—Ä–∞ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ API.');
}

createMissingRatePlans();