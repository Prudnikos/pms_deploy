const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));

const API_KEY = process.env.VITE_CHANNEX_API_KEY || 'nWxt87XOKhF7HslqSxJW8y0t';
const BASE_URL = 'https://staging.channex.io/api/v1';
const PROPERTY_ID = '6ae9708a-cbaa-4134-bf04-29314e842709';

async function testAPIAccess() {
  console.log('üîç –¢–ï–°–¢ API –î–û–°–¢–£–ü–ê –ö CHANNEX\n');
  console.log('='.repeat(50));
  
  console.log('API Key:', API_KEY);
  console.log('Property ID:', PROPERTY_ID);
  console.log('Base URL:', BASE_URL);
  
  try {
    // 1. –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ - Properties
    console.log('\nüìã –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–∞–µ–º Properties...');
    const propertiesUrl = `${BASE_URL}/properties`;
    const propResponse = await fetch(propertiesUrl, {
      headers: {
        'user-api-key': API_KEY,
        'Content-Type': 'application/json'
      }
    });
    
    console.log(`–°—Ç–∞—Ç—É—Å: ${propResponse.status} ${propResponse.statusText}`);
    
    if (propResponse.ok) {
      const propData = await propResponse.json();
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ properties: ${propData.data?.length || 0}`);
      
      propData.data?.forEach(prop => {
        console.log(`\n   ${prop.attributes.title}:`);
        console.log(`     ID: ${prop.id}`);
        console.log(`     Content API Key: ${prop.attributes.content_api_key}`);
        
        if (prop.id === PROPERTY_ID) {
          console.log('     ‚úÖ –≠–¢–û –ù–ê–®–ï PROPERTY!');
        }
      });
    } else {
      const errorText = await propResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞:', errorText);
    }
    
    // 2. –¢–µ—Å—Ç —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º property
    console.log('\nüìã –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ Property...');
    const propertyUrl = `${BASE_URL}/properties/${PROPERTY_ID}`;
    const singlePropResponse = await fetch(propertyUrl, {
      headers: {
        'user-api-key': API_KEY,
        'Content-Type': 'application/json'
      }
    });
    
    console.log(`–°—Ç–∞—Ç—É—Å: ${singlePropResponse.status} ${singlePropResponse.statusText}`);
    
    if (singlePropResponse.ok) {
      const singlePropData = await singlePropResponse.json();
      console.log('‚úÖ Property –Ω–∞–π–¥–µ–Ω:');
      console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${singlePropData.data?.attributes?.title}`);
      console.log(`   Content API Key: ${singlePropData.data?.attributes?.content_api_key}`);
    } else {
      const errorText = await singlePropResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞:', errorText);
    }
    
    // 3. –¢–µ—Å—Ç Room Types —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    console.log('\nüìã –¢–µ—Å—Ç 3: Room Types —Å filter[property_id]...');
    const roomTypesUrl1 = `${BASE_URL}/room_types?filter[property_id]=${PROPERTY_ID}`;
    const rt1Response = await fetch(roomTypesUrl1, {
      headers: {
        'user-api-key': API_KEY,
        'Content-Type': 'application/json'
      }
    });
    
    console.log(`–°—Ç–∞—Ç—É—Å: ${rt1Response.status} ${rt1Response.statusText}`);
    
    if (rt1Response.ok) {
      const rt1Data = await rt1Response.json();
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ room types: ${rt1Data.data?.length || 0}`);
    } else {
      const errorText = await rt1Response.text();
      console.log('‚ùå –û—à–∏–±–∫–∞:', errorText);
    }
    
    // 4. –¢–µ—Å—Ç Room Types —Å property_id
    console.log('\nüìã –¢–µ—Å—Ç 4: Room Types —Å property_id (–±–µ–∑ filter)...');
    const roomTypesUrl2 = `${BASE_URL}/room_types?property_id=${PROPERTY_ID}`;
    const rt2Response = await fetch(roomTypesUrl2, {
      headers: {
        'user-api-key': API_KEY,
        'Content-Type': 'application/json'
      }
    });
    
    console.log(`–°—Ç–∞—Ç—É—Å: ${rt2Response.status} ${rt2Response.statusText}`);
    
    if (rt2Response.ok) {
      const rt2Data = await rt2Response.json();
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ room types: ${rt2Data.data?.length || 0}`);
      
      rt2Data.data?.forEach(rt => {
        console.log(`\n   ${rt.attributes.title}:`);
        console.log(`     ID: ${rt.id}`);
        console.log(`     Occupancy: ${rt.attributes.occ_adults} adults`);
      });
    } else {
      const errorText = await rt2Response.text();
      console.log('‚ùå –û—à–∏–±–∫–∞:', errorText);
    }
    
    console.log('\n' + '='.repeat(50));
    console.log('üí° –í–´–í–û–î–´:');
    console.log('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ.');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

testAPIAccess();