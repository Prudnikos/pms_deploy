import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import { createClient } from '@supabase/supabase-js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (process.env.NODE_ENV === 'production') {
  dotenv.config({ path: '.env.production' });
} else {
  dotenv.config({ path: '.env.local' });
}

const app = express();
const PORT = process.env.PORT || 3001;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ CORS –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
app.use(cors({
  origin: ['http://localhost:5173', 'http://localhost:3000'],
  credentials: true
}));

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
app.use(express.json());

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
const supabase = createClient(
  process.env.VITE_SUPABASE_URL || 'https://qflncrldkqhmmrnepdpk.supabase.co',
  process.env.VITE_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFmbG5jcmxka3FobW1ybmVwZHBrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzE4NTc2NDMsImV4cCI6MjA0NzQzMzY0M30.8oFOjJQOZT7eFwHPsKV-JdXlC0KfQgUKFw7lIRl3zEc'
);

/**
 * Webhook endpoint –¥–ª—è Channex
 * URL: http://localhost:3001/api/channex/webhook
 */
app.post('/api/channex/webhook', async (req, res) => {
  console.log('üîî –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Channex:', {
    headers: req.headers,
    body: req.body,
    timestamp: new Date().toISOString()
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é webhook (Channex –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å custom headers)
  const webhookSecret = process.env.VITE_CHANNEX_WEBHOOK_SECRET;
  if (webhookSecret && webhookSecret !== 'your-webhook-secret') {
    const authHeader = req.headers['authorization'] || req.headers['x-webhook-token'] || req.headers['x-channex-token'];
    if (!authHeader) {
      console.log('‚ö†Ô∏è  Webhook –ø–æ–ª—É—á–µ–Ω –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (staging —Ä–µ–∂–∏–º - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º)');
    } else if (authHeader !== `Bearer ${webhookSecret}` && authHeader !== webhookSecret) {
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ webhook');
      return res.status(401).json({ error: 'Invalid authorization token' });
    } else {
      console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è webhook –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    }
  }

  try {
    const webhookData = req.body;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ webhook
    const eventType = webhookData.type || 'unknown';
    const eventId = webhookData.id || '';
    const objectType = webhookData.object_type || '';
    const objectId = webhookData.object_id || '';
    
    console.log('üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook:', {
      eventType,
      eventId,
      objectType,
      objectId
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º webhook –≤ –ë–î –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    const { error: logError } = await supabase
      .from('channex_webhooks')
      .insert({
        event_type: eventType,
        event_id: eventId,
        object_type: objectType,
        object_id: objectId,
        payload: webhookData,
        received_at: new Date().toISOString(),
        processed: false
      });

    if (logError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è webhook:', logError);
    } else {
      console.log('‚úÖ Webhook —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î');
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
    if (objectType === 'booking') {
      await handleBookingEvent(eventType, objectId, webhookData);
    } else if (objectType === 'booking_revision') {
      await handleBookingRevisionEvent(eventType, objectId, webhookData);
    } else {
      console.log('‚ÑπÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞:', objectType);
    }

    // –û—Ç–º–µ—á–∞–µ–º webhook –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
    if (eventId) {
      await supabase
        .from('channex_webhooks')
        .update({ processed: true, processed_at: new Date().toISOString() })
        .eq('event_id', eventId);
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç Channex (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!)
    res.status(200).json({ 
      success: true, 
      message: 'Webhook processed successfully',
      event_id: eventId
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ –ë–î
    await supabase
      .from('channex_webhook_errors')
      .insert({
        error_message: error.message,
        error_stack: error.stack,
        payload: req.body,
        occurred_at: new Date().toISOString()
      });

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É (Channex –ø–æ–≤—Ç–æ—Ä–∏—Ç –ø–æ–ø—ã—Ç–∫—É)
    res.status(500).json({ 
      success: false, 
      error: 'Internal server error',
      message: error.message
    });
  }
});

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
 */
async function handleBookingEvent(eventType, bookingId, webhookData) {
  console.log(`üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ booking event: ${eventType} –¥–ª—è ID ${bookingId}`);

  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç Channex API
    const response = await fetchBookingFromChannex(bookingId);
    
    if (response && response.data) {
      const booking = response.data;
      await syncBookingToPMS(booking, eventType);
      console.log(`‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ${bookingId} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ`);
    } else {
      console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ${bookingId}`);
    }

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ booking event:`, error);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π —Ä–µ–≤–∏–∑–∏–π –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
 */
async function handleBookingRevisionEvent(eventType, revisionId, webhookData) {
  console.log(`üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ booking revision: ${eventType} –¥–ª—è revision ${revisionId}`);

  try {
    // –î–ª—è —Ä–µ–≤–∏–∑–∏–π –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ webhook –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if (webhookData.data && webhookData.data.booking) {
      await syncBookingToPMS(webhookData.data.booking, eventType);
    } else {
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–≤–∏–∑–∏–∏
      const response = await fetchBookingRevisionFromChannex(revisionId);
      if (response && response.data && response.data.booking) {
        await syncBookingToPMS(response.data.booking, eventType);
      }
    }

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ booking revision:`, error);
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ Channex API
 */
async function fetchBookingFromChannex(bookingId) {
  const apiKey = process.env.VITE_CHANNEX_API_KEY;
  const apiUrl = process.env.VITE_CHANNEX_API_URL || 'https://api.channex.io/api/v1';
  
  if (!apiKey) {
    console.warn('‚ö†Ô∏è CHANNEX_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ');
    return null;
  }

  try {
    console.log(`üåê –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ${bookingId} –∏–∑ Channex`);
    
    const response = await fetch(`${apiUrl}/bookings/${bookingId}`, {
      headers: {
        'user-api-key': apiKey,
        'Content-Type': 'application/json'
      }
    });

    if (response.ok) {
      return await response.json();
    } else {
      console.error(`‚ùå –û—à–∏–±–∫–∞ API Channex: ${response.status}`);
      return null;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Channex API:', error);
    return null;
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≤–∏–∑–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ Channex API
 */
async function fetchBookingRevisionFromChannex(revisionId) {
  const apiKey = process.env.VITE_CHANNEX_API_KEY;
  const apiUrl = process.env.VITE_CHANNEX_API_URL || 'https://api.channex.io/api/v1';
  
  if (!apiKey) {
    console.warn('‚ö†Ô∏è CHANNEX_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    return null;
  }

  try {
    console.log(`üåê –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≤–∏–∑–∏–∏ ${revisionId} –∏–∑ Channex`);
    
    const response = await fetch(`${apiUrl}/booking_revisions/${revisionId}`, {
      headers: {
        'user-api-key': apiKey,
        'Content-Type': 'application/json'
      }
    });

    if (response.ok) {
      return await response.json();
    } else {
      console.error(`‚ùå –û—à–∏–±–∫–∞ API Channex: ${response.status}`);
      return null;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Channex API:', error);
    return null;
  }
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ PMS
 */
async function syncBookingToPMS(channexBooking, eventType) {
  console.log('üì• –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ PMS:', channexBooking.id);

  try {
    // –ú–∞–ø–ø–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Channex –≤ —Ñ–æ—Ä–º–∞—Ç PMS
    const pmsBooking = mapChannexToPMSBooking(channexBooking);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    const { data: existingBooking } = await supabase
      .from('bookings')
      .select('id')
      .eq('external_booking_id', channexBooking.id)
      .single();

    if (existingBooking) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      const { error } = await supabase
        .from('bookings')
        .update({
          ...pmsBooking,
          updated_at: new Date().toISOString()
        })
        .eq('id', existingBooking.id);

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      } else {
        console.log(`‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ${channexBooking.id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);
      }

    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      const { error } = await supabase
        .from('bookings')
        .insert({
          ...pmsBooking,
          created_at: new Date().toISOString()
        });

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      } else {
        console.log(`‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ${channexBooking.id} —Å–æ–∑–¥–∞–Ω–æ`);
      }
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

/**
 * –ú–∞–ø–ø–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ Channex –≤ —Ñ–æ—Ä–º–∞—Ç PMS
 */
function mapChannexToPMSBooking(channexBooking) {
  const attributes = channexBooking.attributes || channexBooking;
  
  return {
    external_booking_id: channexBooking.id,
    source: getBookingSource(attributes.ota_name),
    check_in: attributes.arrival_date,
    check_out: attributes.departure_date,
    guest_name: attributes.customer?.name || attributes.guest_name || 'Guest',
    guest_email: attributes.customer?.email || attributes.guest_email || '',
    guest_phone: attributes.customer?.phone || attributes.guest_phone || '',
    total_amount: parseFloat(attributes.total_price) || 0,
    status: mapBookingStatus(attributes.status),
    guests_count: (attributes.occupancy?.adults || 0) + (attributes.occupancy?.children || 0),
    notes: attributes.notes || attributes.special_requests || '',
    room_type: attributes.room_type?.title || '',
    channex_data: channexBooking // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  };
}

/**
 * –ú–∞–ø–ø–∏–Ω–≥ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function getBookingSource(otaName) {
  if (!otaName) return 'other';
  
  const mapping = {
    'Booking.com': 'booking',
    'Airbnb': 'airbnb',
    'Expedia': 'expedia',
    'Agoda': 'agoda',
    'Hotels.com': 'hotels',
    'Direct': 'direct'
  };
  
  return mapping[otaName] || 'other';
}

/**
 * –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function mapBookingStatus(channexStatus) {
  if (!channexStatus) return 'pending';
  
  const mapping = {
    'new': 'pending',
    'confirmed': 'confirmed',
    'cancelled': 'cancelled',
    'modified': 'confirmed',
    'pending': 'pending'
  };
  
  return mapping[channexStatus.toLowerCase()] || 'pending';
}

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    timestamp: new Date().toISOString(),
    service: 'channex-webhook-server'
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ Channex Webhook Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üîó Webhook URL: http://localhost:${PORT}/api/channex/webhook`);
  console.log(`‚ù§Ô∏è Health check: http://localhost:${PORT}/health`);
});

export default app;