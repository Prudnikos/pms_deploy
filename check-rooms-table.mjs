import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://zbhvwxpvlxqxadqzshfc.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpiaHZ3eHB2bHhxeGFkcXpzaGZjIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MTkyNTM3NCwiZXhwIjoyMDY3NTAxMzc0fQ.0kO3vG1OXNS05NPgm7MmcbkdMuLSG49GKwkCP4979tc';

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkRooms() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É rooms...\n');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–æ–º–µ—Ä–∞
    const { data: rooms, error } = await supabase
      .from('rooms')
      .select('*')
      .order('id');
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
      return;
    }
    
    console.log('üìã –í—Å–µ –Ω–æ–º–µ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
    console.log('================================');
    
    if (rooms && rooms.length > 0) {
      rooms.forEach((room) => {
        console.log(`\nID: ${room.id}`);
        console.log(`  –ù–æ–º–µ—Ä: ${room.room_number}`);
        console.log(`  –¢–∏–ø: ${room.room_type}`);
        console.log(`  –°—Ç–∞—Ç—É—Å: ${room.status}`);
      });
      
      console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
      console.log(`  –í—Å–µ–≥–æ –Ω–æ–º–µ—Ä–æ–≤: ${rooms.length}`);
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
      const types = {};
      rooms.forEach(room => {
        types[room.room_type] = (types[room.room_type] || 0) + 1;
      });
      
      console.log('\n  –ü–æ —Ç–∏–ø–∞–º:');
      Object.entries(types).forEach(([type, count]) => {
        console.log(`    ${type}: ${count}`);
      });
      
    } else {
      console.log('‚ö†Ô∏è –ù–µ—Ç –Ω–æ–º–µ—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∏—Ö room_id
    console.log('\n\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∏—Ö –Ω–æ–º–µ—Ä–∞:');
    console.log('========================================');
    
    const { data: bookings, error: bookingsError } = await supabase
      .from('bookings')
      .select('id, guest_first_name, room_id, check_in, source, channel')
      .order('created_at', { ascending: false })
      .limit(5);
    
    if (!bookingsError && bookings) {
      for (const booking of bookings) {
        // –ù–∞—Ö–æ–¥–∏–º –Ω–æ–º–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        const room = rooms?.find(r => r.id === booking.room_id);
        console.log(`\n–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: ${booking.guest_first_name}`);
        console.log(`  Check-in: ${booking.check_in}`);
        console.log(`  Source: ${booking.source || 'N/A'}`);
        console.log(`  Room ID: ${booking.room_id}`);
        console.log(`  –ù–æ–º–µ—Ä: ${room ? `${room.room_number} (${room.room_type})` : '‚ùå –ù–ï –ù–ê–ô–î–ï–ù'}`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

checkRooms();